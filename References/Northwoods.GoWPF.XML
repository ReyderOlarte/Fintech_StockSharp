<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.GoWPF</name>
    </assembly>
    <members>
        <member name="T:Northwoods.GoXam.Diagram">
            <summary>
            A <c>Diagram</c> is a <c>Control</c> that includes a <see cref="T:Northwoods.GoXam.DiagramPanel"/>
            that holds some <see cref="T:Northwoods.GoXam.Layer"/>s that display <see cref="T:Northwoods.GoXam.Part"/>s such as
            <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <remarks>
            <para>
            Each <c>Diagram</c> has a number of standard objects that it uses to perform its duties.
            These objects are accessible via the following properties:
            <see cref="P:Northwoods.GoXam.Diagram.Model"/>,
            <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>,
            <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/>,
            <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/>,
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>,
            <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>,
            and various other tool properties.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Diagram.Model"/> is the object that holds and describes all of the data
            for which <see cref="T:Northwoods.GoXam.Part"/>s are created and displayed.
            The purpose of the model is to recognize relationships between the data --
            in particular link relationships between nodes and group memberships between nodes.
            There are different kinds of models, such as
            <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>,
            <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/> and
            <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>.
            </para>
            <para>
            The default model is a <see cref="T:Northwoods.GoXam.Model.UniversalGraphLinksModel"/>.
            You will typically want to replace it with your own specialized model.
            The default model does not have an <see cref="T:Northwoods.GoXam.Model.UndoManager"/> either;
            you may want to set <see cref="P:Northwoods.GoXam.Model.DiagramModel.HasUndoManager"/> to true.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Diagram.PartManager"/> is responsible for creating <see cref="T:Northwoods.GoXam.Node"/>s
            corresponding to node data in the model, and for creating <see cref="T:Northwoods.GoXam.Link"/>s
            corresponding to link relationships in the model.
            It notices the insertion or deletion of node data or link data or group-memberships,
            and updates the diagram appropriately.
            It maintains collections of the existing <see cref="P:Northwoods.GoXam.Diagram.Nodes"/> and <see cref="P:Northwoods.GoXam.Diagram.Links"/>.
            </para>
            <para>
            You can control the appearance of the nodes and links in the diagram by setting
            several data template properties:
            <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>,
            <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/>.
            Also, because this is a standard <c>Control</c>, you can set its <c>Control.Template</c>
            property to a <c>ControlTemplate</c>.
            If you do not set these properties, its uses default templates to define the appearance
            of nodes, links, and of the control itself.
            If the value of a template property changes, the <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>
            will rebuild the <see cref="T:Northwoods.GoXam.Part"/>s that are affected.
            </para>
            <para>
            You can see the definitions of the standard templates
            in the Generic.XAML file that is in the docs subdirectory of the GoXam installation.
            </para>
            <para>
            The diagram also maintains the notion of selected parts.
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> property is an <c>ObservableCollection</c> of the currently
            selected <see cref="T:Northwoods.GoXam.Part"/>s.
            The primary selection is held as the <see cref="P:Northwoods.GoXam.Diagram.SelectedPart"/> property.
            You can set <see cref="P:Northwoods.GoXam.Diagram.MaximumSelectionCount"/> to control how many parts may
            be selected at once.
            To select a <see cref="T:Northwoods.GoXam.Part"/> you can set its <see cref="P:Northwoods.GoXam.Part.IsSelected"/> property.
            </para>
            <para>
            There are many properties, named "Allow...", that control what operations the user
            may perform on the parts in the diagram.  These correspond to the same named
            properties on <see cref="T:Northwoods.GoXam.Layer"/> that govern the behavior for those parts in a particular layer.
            Furthermore for some of these properties there are corresponding properties on
            <see cref="T:Northwoods.GoXam.Part"/>, named "...able", that govern the behavior for that individual part.
            For example, the <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> property corresponds to
            <see cref="P:Northwoods.GoXam.Layer.AllowCopy"/> and to the property <see cref="P:Northwoods.GoXam.Part.Copyable"/>.
            The <see cref="M:Northwoods.GoXam.Part.CanCopy"/> predicate is false if any of these properties is false.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/> implements various standard commands,
            such as the <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/> method and the
            <see cref="M:Northwoods.GoXam.CommandHandler.CanDelete"/> predicate.
            In WPF these methods are the implementation of the <c>Command</c>s listed as
            properties of the <c>Commands</c> static class.
            In Silverlight, which does not have <c>Command</c>s, the <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/>
            implements the corresponding keyboard events.
            </para>
            <para>
            The diagram also keeps track of the mouse-down point and last mouse point,
            in model coordinates: <see cref="P:Northwoods.GoXam.Diagram.FirstMousePointInModel"/> and <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>.
            </para>
            <para>
            The diagram supports modular behavior for mouse events by implementing "tools".
            "Mode-less" tools are held in three lists: <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>, and <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/>.
            The <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>, which defaults to an instance of <see cref="T:Northwoods.GoXam.Tool.ToolManager"/>,
            searches these lists when a mouse event happens to find the first tool that can run.
            It then makes that tool the new <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>, where it can continue to
            process mouse events.
            When the tool is done, it stops itself, causing the <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>
            to become the new <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </para>
            <para>
            Standard tools include:
            <list>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.RelinkingTool"/> for reconnecting an existing <see cref="T:Northwoods.GoXam.Link"/>
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.LinkReshapingTool"/> for reshaping the route of a <see cref="T:Northwoods.GoXam.Link"/>
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.ResizingTool"/> for resizing a <see cref="T:Northwoods.GoXam.Part"/> or an element inside a part
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.RotatingTool"/> for rotating a <see cref="T:Northwoods.GoXam.Node"/> or an element inside a node
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/> for drawing a new <see cref="T:Northwoods.GoXam.Link"/>
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/> for moving or (control-)copying selected <see cref="T:Northwoods.GoXam.Part"/>s
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> for rubber-band selection of some <see cref="T:Northwoods.GoXam.Part"/>s within a rectangular area
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/> for panning (scrolling) the diagram
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.TextEditingTool"/> for in-place editing of text
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.ClickCreatingTool"/> for inserting new <see cref="T:Northwoods.GoXam.Node"/>s where the user clicks
            </item>
            <item>
            <see cref="P:Northwoods.GoXam.Diagram.ClickSelectingTool"/> for selecting <see cref="T:Northwoods.GoXam.Part"/>s
            </item>
            </list>
            </para>
            <para>
            The diagram also raises various events when interesting things happen.
            These are routed events in WPF, but are just CLR events in Silverlight.
            </para>
            <para>
            The events include:
            <list>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.ClipboardPasted"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.ExternalObjectsDropped"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.LayoutCompleted"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.LinkDrawn"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.LinkRelinked"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.LinkReshaped"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.ModelReplaced"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.NodeCreated"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.NodeResized"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.NodeRotated"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionChanged"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionCopied"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionDeleting"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionDeleted"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionMoved"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionGrouped"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.SelectionUngrouped"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.TextEdited"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.TemplateApplied"/>
            </item>
            <item>
            <see cref="E:Northwoods.GoXam.Diagram.TemplatesChanged"/>
            </item>
            </list>
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/> is responsible for positioning all of the <see cref="T:Northwoods.GoXam.Node"/>s
            and routing all of the <see cref="T:Northwoods.GoXam.Link"/>s.
            The overall positioning of nodes is done by the value of the <see cref="P:Northwoods.GoXam.Diagram.Layout"/> property.
            Some <see cref="T:Northwoods.GoXam.Group"/>s can have their own <see cref="P:Northwoods.GoXam.Group.Layout"/>s.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.#ctor">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Diagram"/> with the standard values for the
            <see cref="P:Northwoods.GoXam.Diagram.Model"/>, <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>,
            <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/>, <see cref="P:Northwoods.GoXam.Diagram.Layout"/>,
            <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/>, <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>, <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/>,
            and the various defined tool properties including <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.ToString">
            <summary>
            For debugging convenience.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.FindResource``1(System.Windows.FrameworkElement,System.String)">
            <summary>
            This static method looks for a resource of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of the desired resource</typeparam>
            <param name="start">a <c>FrameworkElement</c></param>
            <param name="name">the name of the desired resource</param>
            <returns>
            the first object of type <typeparamref name="T"/> found in searching the
            <c>ResourceDictionary</c> of the <paramref name="start"/> element or in its parent elements,
            or null if no resource by that name is found, or if it is found but is not of the desired type.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.FindDefault``1(System.String)">
            <summary>
            This static method finds a default diagram resource of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of the desired resource</typeparam>
            <param name="name"></param>
            <returns>
            null if no resource can be found with the name <paramref name="name"/>
            or if it does exist but is not of type <typeparamref name="T"/>
            </returns>
            <remarks>
            This is different from something like <c>myDiagram.TryFindResource("DefaultSelectionAdornmentTemplate")</c>
            in that it only considers the predefined <see cref="T:Northwoods.GoXam.Diagram"/> default <c>DataTemplate</c>s and <c>Style</c>s,
            defined in <c>Generic.xaml</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.OnApplyTemplate">
            <summary>
            Perform initialization.
            </summary>
            <remarks>
            This finds the <see cref="T:Northwoods.GoXam.DiagramPanel"/> template child that becomes the value of <see cref="P:Northwoods.GoXam.Diagram.Panel"/>.
            It calls <see cref="M:Northwoods.GoXam.DiagramPanel.InitializeLayers"/>
            to create the various standard layers,
            it raises the <see cref="E:Northwoods.GoXam.Diagram.TemplateApplied"/> event so that you
            can initialize the <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s event handlers or establish data-bindings on its properties,
            it calls <see cref="M:Northwoods.GoXam.PartManager.RebuildNodeElements"/>
            to create <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s from the model's data, and
            it calls <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram(Northwoods.GoXam.LayoutInitial,System.Boolean)"/>
            to eventually position the nodes if needed.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.UnloadingClearsPartManagerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.UnloadingClearsPartManager"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ModelProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.Model"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.PartsModelProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.PartManagerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.PartManager"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialStretchProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialScaleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialScale"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialPositionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialPanelSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodesProperty">
            <summary>
            Identifies the read-only <see cref="P:Northwoods.GoXam.Diagram.Nodes"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodesSourceProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.NodesSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.FilterProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.Filter"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodeTemplateDictionaryProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodeTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GroupTemplateDictionaryProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GroupTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinksProperty">
            <summary>
            Identifies the read-only <see cref="P:Northwoods.GoXam.Diagram.Links"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinksSourceProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LinksSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkTemplateDictionaryProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.RaiseTemplatesChanged(System.String)">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.Diagram.TemplatesChanged"/> event.
            </summary>
            <param name="propertyname">the name of the modified dictionary property</param>
            <remarks>
            <para>
            You should call this after dynamically modifying the contents of one of the following dictionaries:
            <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/>,
            or <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/>.
            Pass the name of one of those three properties as the argument.
            </para>
            <para>
            This method is called automatically when you set any of the <see cref="T:Northwoods.GoXam.Diagram"/>
            properties that are of type <c>DataTemplate</c> or <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.StretchProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.Stretch"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialCenteredNodeDataProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.InitialCenteredNodeData"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.CenteredNodeDataProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.CenteredNodeData"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectedPartsProperty">
            <summary>
            Identifies the read-only <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.MaximumSelectionCountProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.MaximumSelectionCount"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectedPartProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.SelectedPart"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectedNodeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.SelectedNode"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectedGroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.SelectedGroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectedLinkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.SelectedLink"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.Select(Northwoods.GoXam.Part)">
            <summary>
            Make the given <paramref name="part"/>
            the only selected <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <param name="part">
            A <see cref="T:Northwoods.GoXam.Part"/> that belongs to this diagram.
            If this value is null, this does nothing.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.Select(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})">
            <summary>
            Make all of the <see cref="T:Northwoods.GoXam.Part"/>s in the given collection of <paramref name="parts"/>
            the only selected parts.
            </summary>
            <param name="parts">
            An <c>IEnumerable&lt;Part&gt;</c> of <see cref="T:Northwoods.GoXam.Part"/>s that belong to this diagram.
            If this value is null, this does nothing.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.ClearSelection">
            <summary>
            Remove all <see cref="T:Northwoods.GoXam.Part"/>s from the collection of <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.StartTransaction(System.String)">
            <summary>
            Start an undoable transaction (a collection of model changes)
            by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.StartTransaction(System.String)"/>.
            </summary>
            <param name="tname">
            a description of the changes that are about to happen
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.CommitTransaction(System.String)">
            <summary>
            Complete an undoable transaction (a collection of model changes)
            by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.CommitTransaction(System.String)"/>.
            </summary>
            <param name="tname">
            a description of the changes that just happened
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.RollbackTransaction">
            <summary>
            Abort the current transaction and rollback (undo) any of the changes
            by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RollbackTransaction"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LayoutManagerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LayoutProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.Layout"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.LayoutDiagram">
            <summary>
            Request a re-layout of all of the nodes and links in this diagram.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.PrintManagerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.PrintManager"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowClipboardProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowClipboard"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowCopyProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowDeleteProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowDelete"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowDragOutProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowDragOut"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowDropProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowDrop"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowEditProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowEdit"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowGroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowGroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowUngroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowUngroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowInsertProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowLinkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowLink"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowRelinkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowRelink"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowMoveProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowMove"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowPrintProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowPrint"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowReshapeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowReshape"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowResizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowResize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowRotateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowRotate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowScrollProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowScroll"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowSelectProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowSelect"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowUndoProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowUndo"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.AllowZoomProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.CurrentToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.DefaultToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.FindMouseTool``1(System.Boolean)">
            <summary>
            Find a mouse tool of a given type.
            </summary>
            <typeparam name="T">this must implement <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/></typeparam>
            <param name="subclass">
            If true, a matching tool may be a subclass of <typeparamref name="T"/>;
            otherwise the tool must be of exactly the same type.
            </param>
            <returns></returns>
            <remarks>
            This searches the <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>, and <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/> lists.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.ReplaceMouseTool``1(Northwoods.GoXam.Tool.IDiagramTool,System.Boolean)">
            <summary>
            Replace a mouse tool of a given type with a new tool.
            </summary>
            <typeparam name="T">this must implement <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/></typeparam>
            <param name="newtool">
            If the new value is null, any tool that the search finds will just be removed
            from the list in which it was found.
            </param>
            <param name="subclass">
            If true, a matching tool may be a subclass of <typeparamref name="T"/>;
            otherwise the tool must be of exactly the same type.
            </param>
            <returns>the old tool that was replaced by the new one</returns>
            <remarks>
            This searches the <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>, and <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/> lists.
            The new tool is inserted into the same list in which a matching tool is found,
            at the same position as the old tool.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.RelinkingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.RelinkingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkReshapingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LinkReshapingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ResizingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.ResizingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.RotatingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.RotatingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.DraggingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.DragSelectingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.PanningToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.DragZoomingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.DragZoomingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.TextEditingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.TextEditingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ClickCreatingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.ClickCreatingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ClickSelectingToolProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.ClickSelectingTool"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.FirstMousePointInModelProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.FirstMousePointInModel"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LastMousePointInModelProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LastMouseEventArgsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.LastMouseEventArgs"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            On each key down event, call <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoKeyDown(System.Windows.Input.KeyEventArgs)"/> on the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Diagram.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            On each key up event, call <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoKeyUp(System.Windows.Input.KeyEventArgs)"/> on the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridSnapEnabledProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridSnapCellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridSnapCellSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridSnapOriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridSnapOrigin"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridVisibleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridPatternProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.GridPatternTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.TreePathProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.CommandHandlerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.TemplateAppliedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.TemplateApplied"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.InitialLayoutCompletedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LayoutCompletedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.LayoutCompleted"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ClipboardPastedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.ClipboardPasted"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.ExternalObjectsDroppedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.ExternalObjectsDropped"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkDrawnEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.LinkDrawn"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkRelinkedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.LinkRelinked"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.LinkReshapedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.LinkReshaped"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodeCreatedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.NodeCreated"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodeResizedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.NodeResized"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.NodeRotatedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.NodeRotated"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionChangedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionChanged"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionCopiedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionCopied"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionDeletingEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionDeleting"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionDeletedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionDeleted"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionMovedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionMoved"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionGroupedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionGrouped"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.SelectionUngroupedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.SelectionUngrouped"/> routed event.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Diagram.TextEditedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.Diagram.TextEdited"/> routed event.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.UnloadingClearsPartManager">
            <summary>
            Gets or sets whether when this Diagram is Unloaded, it should clear out all
            of the <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>'s <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <value>
            The initial value is true.
            </value>
            <remarks>
            <para>
            If you expect to temporarily remove this diagram from the visual tree
            and re-insert it, you will want to set this property to false.
            The default value of true accommodates the usage pattern where removing
            the diagram from the visual tree is meant to discard the diagram permanently.
            </para>
            <para>
            If the diagram is inside a <c>TabControl</c>,
            this treats the value of <c>UnloadingClearsPartManager</c> as if it were false.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Panel">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.DiagramPanel"/> that implements the basic functionality of this diagram.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoXam.DiagramPanel"/> should be in the <c>ControlTemplate</c> for this diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialParts">
            <summary>
            Gets the list of <see cref="T:Northwoods.GoXam.Part"/>s that are automatically included in the diagram
            without coming from the <see cref="P:Northwoods.GoXam.Diagram.Model"/>.
            </summary>
            <remarks>
            This property is declared as the ContentProperty for this control,
            so that you can define <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s
            that are nested inside the <see cref="T:Northwoods.GoXam.Diagram"/> element in XAML.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Model">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/> that organizes the data
            to which this diagram is bound.
            </summary>
            <value>
            The initial value is an instance of <see cref="T:Northwoods.GoXam.Model.UniversalGraphLinksModel"/>.
            </value>
            <remarks>
            <para>
            Replacing this value causes all of the bound <see cref="T:Northwoods.GoXam.Node"/>s and
            <see cref="T:Northwoods.GoXam.Link"/>s to be deleted and re-created from the new model data.
            The value of <see cref="P:Northwoods.GoXam.Diagram.NodesSource"/> (and possibly <see cref="P:Northwoods.GoXam.Diagram.LinksSource"/>)
            will be updated too.
            </para>
            <para>
            Models may be shared by multiple Diagrams.
            One common approach is to have two Diagrams displaying the same Model
            but using different DataTemplates and sometimes even different Layouts.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.ModelReplaced">
            <summary>
            This event is raised when the <see cref="P:Northwoods.GoXam.Diagram.Model"/> property changes value.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.PartsModel">
            <summary>
            Gets or sets the special model used to hold <see cref="T:Northwoods.GoXam.Part"/>s
            that are not bound to data.
            </summary>
            <value>
            The initial value is an instance of <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>.
            It is first populated when the diagram is initialized by the <see cref="T:Northwoods.GoXam.Part"/>s
            held by the <see cref="P:Northwoods.GoXam.Diagram.InitialParts"/> collection.
            There must always be a value for this property.
            </value>
            <remarks>
            This special model is also used to hold temporary nodes and links
            used by tools such as <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/>.
            The parts managed by this model can be added to any layer in the diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.PartManager">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.PartManager"/> responsible for creating and updating
            <see cref="T:Northwoods.GoXam.Part"/>s for all of the data managed by the <see cref="P:Northwoods.GoXam.Diagram.Model"/>.
            </summary>
            <value>
            The initial value is an instance of <see cref="T:Northwoods.GoXam.PartManager"/>.
            There must always be a non-null value for this property.
            PartManagers cannot be shared by Diagrams.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialStretch">
            <summary>
            Gets or sets the initial value for this diagram's <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> property.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>.
            Setting this to a different value will cause the diagram to be scaled and positioned
            to fit in the available space.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialScale">
            <summary>
            Gets or sets the initial value for this diagram's <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> property.
            </summary>
            <value>
            The default value is <c>Double.NaN</c>,
            which does not change the initial value of the panel's scale.
            Any new value should not be negative or zero.
            </value>
            <remarks>
            This property only has an effect on the initial diagram shown if the
            <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/> property has its default value of <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialPosition">
            <summary>
            Gets or sets the initial value for this diagram's <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> property, in model coordinates.
            </summary>
            <value>
            The default value is <c>new Point(Double.NaN, Double.NaN)</c>,
            which does not change the initial value of this diagram's panel's position.
            </value>
            <remarks>
            This property only has an effect on the initial diagram shown if the
            <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/> property has its default value of <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialPanelSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> point in the panel where
            the point specified by <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/> should be positioned.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>.
            If the <see cref="T:Northwoods.GoXam.Spot"/> is not a specific spot, this property
            and the <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/> property are ignored.
            </value>
            <remarks>
            <para>
            This spot specifies the initial point in the <see cref="P:Northwoods.GoXam.Diagram.Panel"/> at which the
            <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/> of the diagram's <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>
            should be located.
            The default values of this property and of <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/>
            cause the top-left corner of the diagram contents to be positioned at the top-left corner of the panel.
            </para>
            <para>
            This property only has an effect on the initial diagram shown if the
            <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/> property has its default value of <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>
            and if the <see cref="P:Northwoods.GoXam.Diagram.InitialPosition"/> property has its default value of a <c>Point</c>
            whose X or Y values are <c>Double.NaN</c>,
            and if both spots are specific spots (i.e. <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> are true).
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> point in the diagram bounds that
            should be positioned at the point specified by <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/>.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>.
            If the <see cref="T:Northwoods.GoXam.Spot"/> is not a specific spot, this property
            and the <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/> property are ignored.
            </value>
            <remarks>
            <para>
            This spot specifies the initial point in the diagram's <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>
            at which the <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/> of the <see cref="P:Northwoods.GoXam.Diagram.Panel"/>
            should be located.
            The default values of this property and of <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/>
            cause the top-left corner of the diagram contents to be positioned at the top-left corner of the panel.
            </para>
            <para>
            This property only has an effect on the initial diagram shown if the
            <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/> property has its default value of <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>,
            and if the <see cref="P:Northwoods.GoXam.Diagram.InitialPosition"/> property has its default value of a <c>Point</c>
            whose X or Y values are <c>Double.NaN</c>,
            and if both spots are specific spots (i.e. <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> are true).
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Nodes">
            <summary>
            A read-only collection of the <see cref="T:Northwoods.GoXam.Node"/>s in this diagram, including <see cref="T:Northwoods.GoXam.Group"/>s.
            </summary>
            <remarks>
            This is a synonym for <see cref="P:Northwoods.GoXam.PartManager.Nodes"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.NodesSource">
            <summary>
            Gets and sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.Model"/>'s <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>.
            </summary>
            <value>
            The setter ignores new values that are null.
            </value>
            <remarks>
            <para>
            Setting this property will not automatically create a model for you, if <see cref="P:Northwoods.GoXam.Diagram.Model"/> is null.
            You will need to set that <see cref="P:Northwoods.GoXam.Diagram.Model"/> property explicitly, usually in code.
            When the value of this property changes, the new value is used as
            the new value for the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> property.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoXam.Diagram.Model"/> is replaced, or when the model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> changes,
            this dependency property will automatically be set to the new collection value.
            </para>
            <para>
            If you want to data-bind this property, you should use "Mode=TwoWay".
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Filter">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.PartManager.FilterNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            causes node data not to get <see cref="T:Northwoods.GoXam.Node"/>s created for them if they are the
            tree children of collapsed tree nodes or if they are the members of collapsed
            group nodes.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.PartManagerFilter.None"/> -- all nodes and links
            in the model get realized as <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s in the diagram.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary">
            <summary>
            Gets or sets a <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> that determines the appearance of <see cref="T:Northwoods.GoXam.Node"/>s
            that are not <see cref="T:Northwoods.GoXam.Group"/>s.
            </summary>
            <value>
            The default value is null, but the default style for <see cref="T:Northwoods.GoXam.Diagram"/>
            will set this to a shared <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> with reasonable 
            (but minimal) data templates for all predefined categories.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            </para>
            <para>
            The dictionary is keyed by the node's <see cref="P:Northwoods.GoXam.Part.Category"/>.
            The value of <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/> takes precedence over any
            entry in this dictionary with the key an empty string, "", which is the default category.
            If <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/> is null, you should be sure to have a data template
            in this dictionary for the default category, "".
            One way of doing that is by setting the <see cref="P:Northwoods.GoXam.DataTemplateDictionary.Default"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.NodeTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to define the default appearance of regular <see cref="T:Northwoods.GoXam.Node"/>s,
            ones that are neither groups nor link labels.
            </summary>
            <value>
            The default style assigns this property to use a generic node template.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary">
            <summary>
            Gets or sets a <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> that determines the appearance of all <see cref="T:Northwoods.GoXam.Group"/>s.
            </summary>
            <value>
            The default value is null, but the default style for <see cref="T:Northwoods.GoXam.Diagram"/>
            will set this to a shared <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> with reasonable 
            (but minimal) data templates for all predefined categories.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Many data templates expand into something containing a <see cref="T:Northwoods.GoXam.GroupPanel"/>.
            </para>
            <para>
            The dictionary is keyed by the group's <see cref="P:Northwoods.GoXam.Part.Category"/>.
            The value of <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/> takes precedence over any
            entry in this dictionary with the key an empty string, "", which is the default category.
            If <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/> is null, you should be sure to have a data template
            in this dictionary for the default category, "".
            One way of doing that is by setting the <see cref="P:Northwoods.GoXam.DataTemplateDictionary.Default"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GroupTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to define the default appearance of <see cref="T:Northwoods.GoXam.Group"/>s.
            </summary>
            <value>
            The default style assigns this property to use a generic group node template.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Typically the data template expands into a <see cref="T:Northwoods.GoXam.GroupPanel"/> surrounded by a <c>Border</c>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Links">
            <summary>
            A read-only collection of the <see cref="T:Northwoods.GoXam.Link"/>s in this diagram.
            </summary>
            <remarks>
            This is a synonym for the <see cref="P:Northwoods.GoXam.PartManager.Links"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LinksSource">
            <summary>
            Gets and sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.Model"/>'s <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/>,
            if the model is an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </summary>
            <value>
            The setter ignores new values that are null.
            </value>
            <remarks>
            <para>
            Setting this property will not automatically create a model for you, if <see cref="P:Northwoods.GoXam.Diagram.Model"/> is null.
            You will need to set that <see cref="P:Northwoods.GoXam.Diagram.Model"/> property explicitly, usually in code.
            When the value of this property changes, the new value is used as
            the new value for the <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> property.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoXam.Diagram.Model"/> is replaced, or when the model's <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> changes,
            this dependency property will automatically be set to the new collection value.
            </para>
            <para>
            If you want to data-bind this property, you should use "Mode=TwoWay".
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary">
            <summary>
            Gets or sets a <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> that determines the appearance of all <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <value>
            The default value is null, but the default style for <see cref="T:Northwoods.GoXam.Diagram"/>
            will set this to a shared <see cref="T:Northwoods.GoXam.DataTemplateDictionary"/> with reasonable 
            (but minimal) data templates for all predefined categories.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            and <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Typically most data templates expand into a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            </para>
            <para>
            The dictionary is keyed by the link's <see cref="P:Northwoods.GoXam.Part.Category"/>.
            The value of <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> takes precedence over any
            entry in this dictionary with the key an empty string, "", which is the default category.
            If <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> is null, you should be sure to have a data template
            in this dictionary for the default category, "".
            One way of doing that is by setting the <see cref="P:Northwoods.GoXam.DataTemplateDictionary.Default"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LinkTemplate">
            <summary>
            Gets or sets a <c>DataTemplate</c> that determines the default appearance of <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <value>
            The default style assigns this property to use a generic link template.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            and <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Typically the data template expands into a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.TemplatesChanged">
            <summary>
            This event is raised when one of the <c>DataTemplate</c> properties
            of the diagram is changed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Stretch">
            <summary>
            Gets or sets how the parts are positioned in the panel.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.StretchPolicy.Unstretched"/>.
            Setting this value will also set the <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> property
            on the <see cref="P:Northwoods.GoXam.Diagram.Panel"/>.
            </value>
            <remarks>
            Set this property to <see cref="F:Northwoods.GoXam.StretchPolicy.Uniform"/>
            to cause the whole diagram to appear in the panel, at a small enough scale
            that everything fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.InitialCenteredNodeData">
            <summary>
            Gets or sets the data object for which the corresponding <see cref="T:Northwoods.GoXam.Node"/>
            will be centered in the viewport after an initial layout has completed.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            <para>
            One cannot scroll the diagram until the diagram and its <see cref="P:Northwoods.GoXam.Diagram.Panel"/>
            have been fully initialized, until the nodes and links have been realized,
            and until the initial layout has completed, ensuring that all nodes have locations.
            Rather than calling <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part)"/> in an
            <see cref="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted"/> event handler, you can just set this
            property to refer to some data, and <see cref="M:Northwoods.GoXam.DiagramPanel.OnInitialLayoutCompleted"/>
            will center the node for you.
            </para>
            <para>
            Note that if you set both this property and <see cref="P:Northwoods.GoXam.Diagram.CenteredNodeData"/>
            to different data, the latter will take precedence.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.CenteredNodeData">
            <summary>
            Gets or sets the data object for which the corresponding <see cref="T:Northwoods.GoXam.Node"/>
            will be centered in the viewport.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            You can cause the currently selected node to be automatically centered by binding:
            <code>
              &lt;go:Diagram x:Name="myDiagram" Grid.Row="0"
                  CenteredNodeData="{Binding ElementName=myDiagram, Path=SelectedNode.Data}" /&gt;
            </code>
            This calls <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part)"/> when the value of this property changes or
            when a layout completes in <see cref="M:Northwoods.GoXam.DiagramPanel.OnLayoutCompleted"/>.
            <para>
            This property, if non-null, takes precedence over the <see cref="P:Northwoods.GoXam.Diagram.InitialCenteredNodeData"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.SelectedParts">
            <summary>
            This is an <c>ObservableCollection</c> of all selected <see cref="T:Northwoods.GoXam.Part"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.MaximumSelectionCount">
            <summary>
            Gets or sets the maximum number of selected parts.
            </summary>
            <value>
            The default value is a large positive integer.
            Any new value must be non-negative.
            </value>
            <remarks>
            Decreasing this value may cause parts to be removed from <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>
            in order to meet the new lower limit.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.SelectedPart">
            <summary>
            Gets or sets the primary selected <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <value>
            This may be null, if no part is selected.
            </value>
            <remarks>
            Changing this value will make the previous value (if any) be not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>,
            and will select the new value.
            Because this property is frequently set programmatically,
            it does not make sense to make this property the target of a OneWay data-binding.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.SelectedNode">
            <summary>
            Gets or sets the primary selected <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <value>
            This may be null, if <see cref="P:Northwoods.GoXam.Diagram.SelectedPart"/> is not a <see cref="T:Northwoods.GoXam.Node"/> or if it is a <see cref="T:Northwoods.GoXam.Group"/>.
            </value>
            <remarks>
            <para>
            Changing this value will make the previous value (if any) be not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>,
            and will select the new value.
            Because this property is frequently set programmatically,
            it does not make sense to make this property the target of a OneWay data-binding.
            </para>
            <para>
            Although <see cref="T:Northwoods.GoXam.Group"/> inherits from <see cref="T:Northwoods.GoXam.Node"/>,
            this property will be null if the selected part is a <see cref="T:Northwoods.GoXam.Group"/>
            in order to make it easier to data-bind parts of your user interface differently
            for groups than for regular nodes.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.SelectedGroup">
            <summary>
            Gets or sets the primary selected <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
            <value>
            This may be null, if <see cref="P:Northwoods.GoXam.Diagram.SelectedPart"/> is not a <see cref="T:Northwoods.GoXam.Group"/>.
            </value>
            <remarks>
            Changing this value will make the previous value (if any) be not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>,
            and will select the new value.
            Because this property is frequently set programmatically,
            it does not make sense to make this property the target of a OneWay data-binding.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.SelectedLink">
            <summary>
            Gets or sets the primary selected <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <value>
            This may be null, if <see cref="P:Northwoods.GoXam.Diagram.SelectedPart"/> is not a <see cref="T:Northwoods.GoXam.Link"/>.
            </value>
            <remarks>
            Changing this value will make the previous value (if any) be not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>,
            and will select the new value.
            Because this property is frequently set programmatically,
            it does not make sense to make this property the target of a OneWay data-binding.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.IsInTransaction">
            <summary>
            This property is true when a transaction has been started on the
            <see cref="P:Northwoods.GoXam.Diagram.Model"/>'s <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LayoutManager">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.LayoutManager"/> that is responsible
            for positioning all of the nodes in the diagram.
            </summary>
            <value>
            Initially this is an instance of <see cref="T:Northwoods.GoXam.LayoutManager"/>.
            There must always be a non-null value for this property.
            LayoutManagers cannot be shared by Diagrams.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> responsible for positioning all of
            the top-level nodes in the diagram.
            </summary>
            <value>
            Initially this is an instance of <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>.
            This value may be null, in which case there is no automatic layout of top-level nodes,
            but there still may be layout of the nodes that are members of groups that have
            their own layouts.
            </value>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/> is responsible for performing this layout
            after performing any nested layouts that might be defined for some groups
            via the <see cref="P:Northwoods.GoXam.Group.Layout"/> property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.PrintManager">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.PrintManager"/> that is responsible
            for printing the diagram.
            </summary>
            <value>
            Initially this is an instance of <see cref="T:Northwoods.GoXam.PrintManager"/>.
            PrintManagers cannot be shared by Diagrams.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.IsReadOnly">
            <summary>
            Gets or sets whether the user may not modify the diagram.
            This is a dependency property.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowClipboard">
            <summary>
            Gets or sets whether the user may copy to or paste from the clipboard,
            either the system clipboard or the internal one.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowCopy">
            <summary>
            Gets or sets whether the user may copy parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowDelete">
            <summary>
            Gets or sets whether the user may delete parts from the diagram.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowDragOut">
            <summary>
            Gets or sets whether the user may start a drag-and-drop in this diagram,
            possibly dropping in a different control.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowDrop">
            <summary>
            Gets or sets whether the user may end a drag-and-drop in this diagram.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowEdit">
            <summary>
            Gets or sets whether the user may do in-place text editing.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowGroup">
            <summary>
            Gets or sets whether the user may group parts together.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowUngroup">
            <summary>
            Gets or sets whether the user may ungroup existing group nodes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowInsert">
            <summary>
            Gets or sets whether the user may insert parts into the diagram.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowLink">
            <summary>
            Gets or sets whether the user may draw new links.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowRelink">
            <summary>
            Gets or sets whether the user may reconnect existing links.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowMove">
            <summary>
            Gets or sets whether the user may move parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowPrint">
            <summary>
            Gets or sets whether the user may print parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowReshape">
            <summary>
            Gets or sets whether the user may reshape parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowResize">
            <summary>
            Gets or sets whether the user may resize parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowRotate">
            <summary>
            Gets or sets whether the user may rotate parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowScroll">
            <summary>
            Gets or sets whether the user may scroll the diagram,
            thereby changing the value of <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowSelect">
            <summary>
            Gets or sets whether the user may select parts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowUndo">
            <summary>
            Gets or sets whether the user may undo any changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.AllowZoom">
            <summary>
            Gets or sets whether the user may zoom the diagram,
            thereby changing the value of <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.CurrentTool">
            <summary>
            Gets or sets the current <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/> that handles the diagram's input events.
            </summary>
            <value>
            Initially this is set to the value of <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>.
            Setting this to a null value is treated as if it were set to the <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>,
            because there should always be a currently running tool, except when the diagram is
            being initialized.
            </value>
            <remarks>
            <para>
            Setting this property to a new tool stops the previous current tool.
            If the old tool was <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Active"/>,
            this calls its <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoDeactivate"/> method.
            Then it calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoStop"/> on it.
            </para>
            <para>
            This starts the new tool by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoStart"/> on it.
            </para>
            <para>
            Normally this is a <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> ready to select and run a mode-less tool
            from the lists of mouse tools (<see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>, <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/>).
            </para>
            <para>
            You can run a modal tool just by setting this property.
            When that tool is finished it should call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>
            or it can set this property to the value of <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>.
            </para>
            <para>
            Because this property is frequently set, it cannot be used as a data-binding target.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.DefaultTool">
            <summary>
            Gets or sets the default tool, which is used as the value of <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>
            both initially as well as whenever a tool stops.
            </summary>
            <value>
            Setting this property also sets the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>
            if the old default tool is the currently running tool.
            </value>
            <remarks>
            Normally the default tool is an instance of <see cref="T:Northwoods.GoXam.Tool.ToolManager"/>,
            which manages mode-less mouse tools.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.MouseDownTools">
            <summary>
            Gets the list of <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/>s searched by the
            <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> to look for tools to run upon a mouse down event.
            </summary>
            <value>
            The initial value is a list of instances of the following tools:
            <see cref="P:Northwoods.GoXam.Diagram.RelinkingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.LinkReshapingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.ResizingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.RotatingTool"/>
            </value>
            <remarks>
            When explicitly adding a tool to this list
            because it is not one of the types listed above,
            be sure to remember to set
            its <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram"/> backpointer to refer to this diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.RelinkingTool">
            <summary>
            Gets or sets the standard mouse-down tool for reconnecting an existing link.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.RelinkingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LinkReshapingTool">
            <summary>
            Gets or sets the standard mouse-down tool for reshaping a link.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.LinkReshapingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.ResizingTool">
            <summary>
            Gets or sets the standard mouse-down tool for resizing a part.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.ResizingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.RotatingTool">
            <summary>
            Gets or sets the standard mouse-down tool for rotating a part.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.RotatingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.MouseMoveTools">
            <summary>
            Gets the list of <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/>s searched by the
            <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> to look for tools to run upon a mouse move event.
            </summary>
            <value>
            The initial value is a list of instances of the following tools:
            <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/>
            </value>
            <remarks>
            When explicitly adding a tool to this list
            because it is not one of the types listed above
            nor <see cref="P:Northwoods.GoXam.Diagram.DragZoomingTool"/> (which is not normally part of the list),
            be sure to remember to set
            its <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram"/> backpointer to refer to this diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LinkingTool">
            <summary>
            Gets or sets the standard mouse-move tool for drawing a new link.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.DraggingTool">
            <summary>
            Gets or sets the standard mouse-move tool for dragging (moving or copying) the selection.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.DragSelectingTool">
            <summary>
            Gets or sets the standard mouse-move tool for selecting many objects with a rubber-band rectangle.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/>,
            except for Windows Phone, where by default there is no such tool -- the value is null.
            </value>
            <remarks>
            <para>
            For example, you can change the selection policy in XAML by:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.DragSelectingTool&gt;
                  &lt;go:DragSelectingTool Include="Intersects" /&gt;
                &lt;/go:Diagram.DragSelectingTool&gt;
              &lt;/go:Diagram&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.PanningTool">
            <summary>
            Gets or sets the standard mouse-move tool for manual panning.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/>.
            </value>
            <remarks>
            <para>
            Normally the <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> takes precedence,
            because both tools operate on a left-button-mouse-down in the background
            followed by a mouse-drag.  But <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> precedes this
            <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/> in the list of <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>,
            so if it is applicable, it is always chosen first.
            </para>
            <para>
            To enable this mode-less panning tool, you can remove the drag-selecting
            tool or you can disable that tool by disallowing selection.
            Remove the tool in WPF XAML by:
            <code>
              &lt;go:Diagram ... DragSelectingTool="{x:Null}" &gt;
                . . .
              &lt;/go:Diagram&gt;
            </code>
            or remove it in code by:
            <code>
              myDiagram.DragSelectingTool = null;
            </code>
            You can disable user selection by setting the <see cref="P:Northwoods.GoXam.Diagram.AllowSelect"/> property to false.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.DragZoomingTool">
            <summary>
            Gets or sets the non-standard mouse-move tool for manual zooming.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            <para>
            Because this property is normally null, there is no standard mode-less drag-zooming tool.
            You can install this tool by creating an instance of it and setting that diagram property.
            However, although it can start, the <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> and
            the <see cref="P:Northwoods.GoXam.Diagram.PanningTool"/> are two other background-mouse-drag mode-less tools that are normally
            present and earlier in the <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/> and thus will take precedence over this tool.
            </para>
            <para>
            To make this mode-less tool effective, you can remove the other two background mouse-dragging tools
            and install the <see cref="T:Northwoods.GoXam.Tool.DragZoomingTool"/> in XAML:
            <code>
              &lt;go:Diagram ... DragSelectingTool="{x:Null}" PanningTool="{x:Null}" &gt;
                &lt;go:Diagram.DragZoomingTool&gt;
                  &lt;go:DragZoomingTool /&gt;
                &lt;/go:Diagram.DragZoomingTool&gt;
              &lt;/go:Diagram&gt;
            </code>
            You could also do the same in code:
            <code>
              myDiagram.DragSelectingTool = null;
              myDiagram.PanningTool = null;
              myDiagram.DragZoomingTool = new DragZoomingTool();
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.MouseUpTools">
            <summary>
            Gets the list of <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/>s searched by the
            <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> to look for tools to run upon a mouse up event.
            </summary>
            <value>
            The initial value is a list of instances of the following tools:
            <see cref="P:Northwoods.GoXam.Diagram.TextEditingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.ClickCreatingTool"/>
            <see cref="P:Northwoods.GoXam.Diagram.ClickSelectingTool"/>
            </value>
            <remarks>
            When explicitly adding a tool to this list
            because it is not one of the types listed above,
            be sure to remember to set
            its <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram"/> backpointer to refer to this diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.TextEditingTool">
            <summary>
            Gets or sets the standard tool for in-place text editing.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.TextEditingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.ClickCreatingTool">
            <summary>
            Gets or sets the standard mouse-up tool for inserting objects with a mouse click.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.ClickCreatingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.ClickSelectingTool">
            <summary>
            Gets or sets the standard mouse-up tool for selecting objects with a mouse click.
            </summary>
            <value>
            The default value is an instance of <see cref="P:Northwoods.GoXam.Diagram.ClickSelectingTool"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.FirstMousePointInModel">
            <summary>
            Gets or sets the point in model coordinates at which a mouse down event occurred.
            </summary>
            <para>
            Because this property is frequently set, it cannot be used as a data-binding target.
            </para>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LastMousePointInModel">
            <summary>
            Gets or sets the latest point in model coordinates at which any mouse event occurred.
            </summary>
            <para>
            Because this property is frequently set, it cannot be used as a data-binding target.
            </para>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LastMouseEventArgs">
            <summary>
            Gets or sets the <c>MouseEventArgs</c> describing the latest mouse event.
            </summary>
            <para>
            Because this property is frequently set, it cannot be used as a data-binding target.
            </para>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridSnapEnabled">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/> snaps the location
            of dragged nodes.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property controls whether the <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSpot"/> and <see cref="P:Northwoods.GoXam.Diagram.GridSnapOrigin"/>
            properties affect the <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>
            when its <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/>
            property includes the diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridSnapCellSize">
            <summary>
            Gets or sets the size of the grid cell used when snapping during a drag
            if the value of <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> is true.
            </summary>
            <value>
            The default <c>Size</c> is 10x10 in model units.
            Any new width or height value must be positive but non-infinite numbers.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridSnapCellSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> that specifies what point in the grid cell dragged parts snap to,
            if the value of <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> is true.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>,
            which means parts get snapped directly to the grid points.
            A new value must be a specific spot: <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> must be true for any new value.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridSnapOrigin">
            <summary>
            Gets or sets the snapping grid's coordinates, in model coordinates,
            if the value of <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> is true.
            </summary>
            <value>
            The default value is <c>Point(0, 0)</c>.
            Both X and Y values must be non-infinite numbers.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridVisible">
            <summary>
            Gets or sets whether a background grid pattern is visible for the whole diagram.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The background grid is created if needed by calling <see cref="M:Northwoods.GoXam.DiagramPanel.CreateBackgroundGridPattern"/>,
            which uses the <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/> or the default background grid template.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridPattern">
            <summary>
            Gets or sets the <c>UIElement</c> used to render the <see cref="T:Northwoods.GoXam.GridPattern"/>
            for the whole diagram.
            </summary>
            <remarks>
            <para>
            This may be specified in XAML.
            It may be created automatically from the <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/>
            when <see cref="P:Northwoods.GoXam.Diagram.GridVisible"/> is set to true.
            </para>
            <para>
            Because this property is frequently set, it cannot be used as a data-binding target.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.GridPatternTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to render the <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/>
            for the whole diagram.
            </summary>
            <remarks>
            The grid is only created if needed and made visible when <see cref="P:Northwoods.GoXam.Diagram.GridVisible"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.TreePath">
            <summary>
            Gets or sets the manner in which tree-structured diagrams are assumed to be defined.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreePath.Destination"/>,
            which assumes that links go from the parent node to its child nodes.
            If the value is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            tree operations assume that links go from each child node to its parent node.
            </value>
            <remarks>
            This only affects operations such as deleting and copying nodes by the
            <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/> when <see cref="P:Northwoods.GoXam.CommandHandler.DeletingInclusions"/>
            or <see cref="P:Northwoods.GoXam.CommandHandler.CopyingInclusions"/> includes tree children,
            or when dragging nodes by the <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/> when
            <see cref="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions"/> includes tree children.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.CommandHandler">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.CommandHandler"/> that
            implements all of the standard commands.
            </summary>
            <value>
            The initial value is an instance of <see cref="T:Northwoods.GoXam.CommandHandler"/>.
            CommandHandlers cannot be shared by Diagrams.
            </value>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.TemplateApplied">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.Diagram.OnApplyTemplate"/>,
            after the diagram's <see cref="P:Northwoods.GoXam.Diagram.Panel"/> has been created,
            to allow you to establish event handlers or bindings on the <see cref="T:Northwoods.GoXam.DiagramPanel"/>.
            </summary>
            <remarks>
            The <c>Loaded</c> event may occur repeatedly as the Diagram is removed and then re-inserted into the visual tree.
            The <see cref="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted"/> event may occur repeatedly as the diagram's model is replaced.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted">
            <summary>
            This event is raised after the first layout has been performed
            and the diagram bounds have been updated.
            </summary>
            <remarks>
            This event not only occurs during initialization, but also when the model is replaced.
            One-time initialization of the <see cref="T:Northwoods.GoXam.DiagramPanel"/> should be done in the <see cref="E:Northwoods.GoXam.Diagram.TemplateApplied"/> event.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.LayoutCompleted">
            <summary>
            This event is raised after any layout has been performed
            and the diagram bounds have been updated.
            </summary>
            <remarks>
            This event occurs fairly often.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.ClipboardPasted">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.CommandHandler.Paste"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the newly created <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.ExternalObjectsDropped">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the newly created <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.LinkDrawn">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the new <see cref="T:Northwoods.GoXam.Link"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.LinkRelinked">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the relinked <see cref="T:Northwoods.GoXam.Link"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.LinkReshaped">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.LinkReshapingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the manually routed <see cref="T:Northwoods.GoXam.Link"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.NodeCreated">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.ClickCreatingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the newly drawn <see cref="T:Northwoods.GoXam.Node"/>.
            If you are looking for an event that occurs upon a drop when dragging from a <see cref="T:Northwoods.GoXam.Palette"/>,
            use the <see cref="E:Northwoods.GoXam.Diagram.ExternalObjectsDropped"/> event.
            If you are looking for an event that occurs when the user control-drag-drops the selection to make a copy of the selection,
            use the <see cref="E:Northwoods.GoXam.Diagram.SelectionCopied"/> event.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.NodeResized">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the sized <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.NodeRotated">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.RotatingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the rotated <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionChanged">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the currently selected <see cref="T:Northwoods.GoXam.Part"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionCopied">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the newly copied <see cref="T:Northwoods.GoXam.Part"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionDeleting">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/>,
            before the deletion occurs.
            </summary>
            <remarks>
            Set the <c>Handled</c> property on the <see cref="T:Northwoods.GoXam.DiagramEventArgs"/> to cancel the deletion.
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the currently selected <see cref="T:Northwoods.GoXam.Part"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionDeleted">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/>,
            after the deletion occurs.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection will be empty at this time.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionMoved">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the moved <see cref="T:Northwoods.GoXam.Part"/>s.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionGrouped">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.CommandHandler.Group"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedGroup"/> property holds the newly created <see cref="T:Northwoods.GoXam.Group"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.SelectionUngrouped">
            <summary>
            This event is raised by <see cref="M:Northwoods.GoXam.CommandHandler.Ungroup"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection holds the <see cref="T:Northwoods.GoXam.Part"/>s
            that used to be members of the group that was removed.
            If the removed group had been a member of another group beforehand,
            the selected members will become members of that other group.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Diagram.TextEdited">
            <summary>
            This event is raised by <see cref="T:Northwoods.GoXam.Tool.TextEditingTool"/>.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> will be the <see cref="T:Northwoods.GoXam.Part"/>
            holding the <c>TextBlock</c> that was edited.
            The <see cref="P:Northwoods.GoXam.DiagramEventArgs.Element"/> will be the <c>TextBlock</c> that was edited.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.LicenseKey">
            <summary>
            This static/shared property holds the runtime license key that permits distribution
            of applications using this control without displaying a licensing watermark.
            </summary>
            <remarks>
            <para>
            This should always be set before any <see cref="T:Northwoods.GoXam.Diagram"/> or <see cref="T:Northwoods.GoXam.DiagramPanel"/> is created.
            </para>
            <para>
            For more details, read the GoXamIntro documentation.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Diagram.VersionName">
            <summary>
            This property returns the Diagram software version, as a string.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.CommandHandler">
            <summary>
            This class implements the handlers for all of the standard diagram commands.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:Northwoods.GoXam.Diagram"/> has an instance of this class as its
            <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/> property.
            If you want to customize the standard behavior, you can easily override any of its methods
            and substitute an instance of your custom command handler class for your diagram.
            <code>
            public class CustomCommandHandler : CommandHandler {
              protected override void CopyToClipboard(IDataCollection coll) {
                base.CopyToClipboard(coll);
                ... maybe set some other Clipboard data formats ...
              }
            }
            </code>
            and install it with either XAML:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.CommandHandler&gt;
                  &lt;local:CustomCommandHandler /&gt;
                &lt;/go:Diagram.CommandHandler&gt;
              &lt;/go:Diagram&gt;
            </code>
            or in the initialization of your Diagram control:
            <code>
              myDiagram.CommandHandler = new CustomCommandHandler();
            </code>
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.#ctor">
            <summary>
            Create a normal <see cref="T:Northwoods.GoXam.CommandHandler"/>.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.GoXam.CommandHandler"/> class does not have any of its own state,
            except for a back-pointer to the owner <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            This is called by the <see cref="T:Northwoods.GoXam.Tool.ToolManager"/>.
            </summary>
            <param name="e"></param>
            <remarks>
            However, it will not get called for commands for which there are input bindings.
            Caution: it does get called when the user presses a modifier key such as Key.LeftCtrl.
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.DoKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            This is called by the <see cref="T:Northwoods.GoXam.Tool.ToolManager"/>.
            </summary>
            <param name="e"></param>
            <remarks>
            Caution: it does get called when the user presses a modifier key such as Key.LeftCtrl.
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.AddStandardBindings">
            <summary>
            Define the standard <c>CommandBindings</c> and <c>InputBindings</c> for all of the predefined diagram <see cref="T:Northwoods.GoXam.Commands"/>.  [WPF only]
            </summary>
            <seealso cref="M:Northwoods.GoXam.CommandHandler.RemoveStandardBindings"/>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.RemoveStandardBindings">
            <summary>
            Remove all of the standard diagram command bindings and input bindings.  [WPF only]
            </summary>
            <seealso cref="M:Northwoods.GoXam.CommandHandler.AddStandardBindings"/>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.RaiseEvent(System.Windows.RoutedEvent)">
            <summary>
            This method just calls <c>UIElement.RaiseEvent</c> on the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>
            and returns whether the event was handled.
            </summary>
            <param name="evt"></param>
            <returns>true if the event was raised and it was <c>Handled</c></returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.StopCommand">
            <summary>
            Cancel the operation of the current <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </summary>
            <remarks>
            This may be called when the user presses ESCAPE.
            If the current tool was a <see cref="T:Northwoods.GoXam.Tool.ToolManager"/>, this clears the diagram's selection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanStopCommand">
            <summary>
            This overridable predicate controls whether or not the <see cref="M:Northwoods.GoXam.CommandHandler.StopCommand"/> is executed.
            </summary>
            <returns>by default, this returns true</returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Delete">
            <summary>
            Delete the currently <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> from the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.
            </summary>
            <remarks>
            This raises the <see cref="F:Northwoods.GoXam.Diagram.SelectionDeletingEvent"/>;
            if it is <c>Handled</c>, this deletion is cancelled.
            It then removes all of the selected parts from the diagram,
            by calling <see cref="M:Northwoods.GoXam.PartManager.DeleteParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>.
            Finally it raises the <see cref="F:Northwoods.GoXam.Diagram.SelectionDeletedEvent"/>.
            All of the changes are performed in an undoable edit.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanDelete">
            <summary>
            This overridable predicate controls whether or not the <c>Delete</c> command is executed.
            </summary>
            <returns>
            by default, this returns true if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowDelete"/> is true,
            and if there are some selected parts (<see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>).
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.CommandHandler.DeletingInclusionsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.CommandHandler.DeletingInclusions"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.SelectAll">
            <summary>
            Select all of the <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s in the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanSelectAll">
            <summary>
            This overridable predicate controls whether or not the <c>SelectAll</c> command is executed.
            </summary>
            <returns>
            by default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowSelect"/> is true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Copy">
            <summary>
            Copy the currently <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> from the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>
            into the clipboard.
            </summary>
            <remarks>
            This makes a copy of the current selection (by calling <see cref="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)"/>)
            and then calls <see cref="M:Northwoods.GoXam.CommandHandler.CopyToClipboard(Northwoods.GoXam.Model.IDataCollection)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanCopy">
            <summary>
            This overridable predicate controls whether or not the <c>Copy</c> command is executed.
            </summary>
            <returns>
            by default, this returns true
            if <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowClipboard"/> is true,
            and if there are some selected parts (<see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>).
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.CommandHandler.CopyingInclusionsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.CommandHandler.CopyingInclusions"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.CommandHandler.ClipboardBitmapProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.CommandHandler.ClipboardBitmap"/> dependency property.  [WPF only]
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Cut">
            <summary>
            Execute a <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/> followed by a <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanCut">
            <summary>
            This overridable predicate controls whether or not the <c>Cut</c> command is executed.
            </summary>
            <returns>
            by default, this returns true
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowDelete"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowClipboard"/> is true,
            if there are some selected parts (<see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>),
            and if the model is <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CopyToClipboard(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            This writes the given data collection to the clipboard
            using the diagram's model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>.
            </summary>
            <param name="coll"></param>
            <remarks>
            In WPF you can set <see cref="P:Northwoods.GoXam.CommandHandler.ClipboardBitmap"/> to true in order
            to also put a bitmap of the selected parts onto the clipboard.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.PasteFromClipboard">
            <summary>
            This reads a data collection from the clipboard
            using the diagram's model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>.
            </summary>
            <returns>null if the Clipboard does not contain any data of the given format</returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Paste">
            <summary>
            Copy the contents of the clipboard as new nodes and links in this diagram,
            and make those new parts the new selection.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.CommandHandler.PasteFromClipboard"/> to get a collection of nodes and links,
            copies them into this <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>'s model
            (by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>),
            and then selects all of the newly created parts.
            This also raises the <see cref="F:Northwoods.GoXam.Diagram.ClipboardPastedEvent"/>.
            All of the changes are performed in an undoable edit.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanPaste">
            <summary>
            This overridable predicate controls whether or not the <c>Paste</c> command is executed.
            </summary>
            <returns>
            by default, this returns true
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowClipboard"/> is true,
            if the clipboard has data of the format given by the diagram's model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>,
            and if the model is <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Undo">
            <summary>
            Call <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.<see cref="P:Northwoods.GoXam.Diagram.Model"/>.<see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/>.<see cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/>.
            </summary>
            <remarks>
            This also tries to scroll the diagram to the primary edited object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanUndo">
            <summary>
            This overridable predicate controls whether or not the <c>Undo</c> command is executed.
            </summary>
            <returns>
            by default, this returns true
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowUndo"/> is true,
            and if the diagram's model's <see cref="T:Northwoods.GoXam.Model.UndoManager"/> <see cref="M:Northwoods.GoXam.Model.UndoManager.CanUndo"/>
            predicate returns true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Redo">
            <summary>
            Call <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.<see cref="P:Northwoods.GoXam.Diagram.Model"/>.<see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/>.<see cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>.
            </summary>
            <remarks>
            This also tries to scroll the diagram to the primary edited object.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanRedo">
            <summary>
            This overridable predicate controls whether or not the <c>Redo</c> command is executed.
            </summary>
            <returns>
            by default, this returns true
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowUndo"/> is true,
            and if the diagram's model's <see cref="T:Northwoods.GoXam.Model.UndoManager"/> <see cref="M:Northwoods.GoXam.Model.UndoManager.CanRedo"/>
            predicate returns true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.DecreaseZoom(System.Object)">
            <summary>
            Decrease the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.<see cref="P:Northwoods.GoXam.Diagram.Panel"/>.<see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>
            by the given factor.
            </summary>
            <param name="param">
            The factor by which to decrease the zoom.
            This should be less than one but greater than zero; it defaults to 5% (1/<see cref="P:Northwoods.GoXam.CommandHandler.ZoomFactor"/>).
            </param>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanDecreaseZoom(System.Object)">
            <summary>
            This overridable predicate controls whether or not the <c>DecreaseZoom</c> command is executed.
            </summary>
            <param name="param">the factor by which to decrease the zoom; this defaults to 5% (1/<see cref="P:Northwoods.GoXam.CommandHandler.ZoomFactor"/>)</param>
            <returns>
            by default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> is true,
            and if the <paramref name="param"/> is a value greater than zero.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.IncreaseZoom(System.Object)">
            <summary>
            Increase the <see cref="P:Northwoods.GoXam.CommandHandler.Diagram"/>.<see cref="P:Northwoods.GoXam.Diagram.Panel"/>.<see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>
            by the given factor.
            </summary>
            <param name="param">
            The factor by which to increase the zoom.
            This should be greater than one; it defaults to 5% (<see cref="P:Northwoods.GoXam.CommandHandler.ZoomFactor"/>).
            </param>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanIncreaseZoom(System.Object)">
            <summary>
            This overridable predicate controls whether or not the <c>IncreaseZoom</c> command is executed.
            </summary>
            <param name="param">the factor by which to increase the zoom; this defaults to 5% (<see cref="P:Northwoods.GoXam.CommandHandler.ZoomFactor"/>)</param>
            <returns>
            by default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> is true,
            and if the <paramref name="param"/> is a value greater than zero.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Zoom(System.Object)">
            <summary>
            Set the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> property of the <see cref="P:Northwoods.GoXam.Diagram.Panel"/>
            to the given value.
            </summary>
            <param name="param">
            The new scale value.
            This should be greater than zero; it defaults to 1.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanZoom(System.Object)">
            <summary>
            This overridable predicate controls whether or not the <c>Zoom</c> command is executed.
            </summary>
            <param name="param">the new <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> value; this defaults to 1</param>
            <returns>
            by default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> is true,
            and if the <paramref name="param"/> is a value greater than zero.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.ZoomToFit">
            <summary>
            Change the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> such that the whole diagram/document fits into the viewport;
            or if this command had just executed before, restore the original viewport.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanZoomToFit">
            <summary>
            This overridable predicate controls whether or not the <c>ZoomToFit</c> command is executed.
            </summary>
            <returns>
            by default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> is true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Group">
            <summary>
            Create a new group node and add the selected parts to that new group.
            </summary>
            <remarks>
            This creates a new group node by adding a copy of the <see cref="P:Northwoods.GoXam.CommandHandler.PrototypeGroup"/> data
            to the model, which must support the <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/> interface.
            Each of the selected nodes for which <see cref="M:Northwoods.GoXam.Part.CanGroup"/> is true
            is made a member of that new group node.
            If all of the selected groupable nodes were members of a pre-existing group node,
            the new group node also becomes a member of that pre-existing group.
            The new group node becomes the only selected part.
            This also raises the <see cref="E:Northwoods.GoXam.Diagram.SelectionGrouped"/>.
            All of the changes are performed in an undoable edit.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanGroup">
            <summary>
            This overridable predicate controls whether or not the <c>Group</c> command is executed.
            </summary>
            <returns>
            By default, this returns true:
            if the <see cref="P:Northwoods.GoXam.CommandHandler.PrototypeGroup"/> data is not null,
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowGroup"/> is true,
            if the model is an <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/> that is modifiable, and
            if there are any selected nodes that can be <see cref="M:Northwoods.GoXam.Part.CanGroup"/>'ed.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.CommandHandler.PrototypeGroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.CommandHandler.PrototypeGroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.CommandHandler.ZoomFactorProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.CommandHandler.ZoomFactor"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Ungroup">
            <summary>
            For each selected node that is a group, remove the group without removing its members from the diagram.
            </summary>
            <remarks>
            For each selected node that is a <see cref="T:Northwoods.GoXam.Group"/> and that is <see cref="P:Northwoods.GoXam.Group.Ungroupable"/>,
            change all of their member nodes to be members of the group that the selected group node is in.
            (If the selected group node is a top-level node, i.e. not a member of any group node,
            its members become top-level nodes too.)
            All of those selected group nodes are deleted.
            All of the reparented member nodes are selected.
            This also raises the <see cref="F:Northwoods.GoXam.Diagram.SelectionUngroupedEvent"/>.
            All of the changes are performed in an undoable edit.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanUngroup">
            <summary>
            This overridable predicate controls whether or not the <c>Ungroup</c> command is executed.
            </summary>
            <returns>
            by default, this returns true 
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowDelete"/> is true,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowUngroup"/> is true,
            if the model is an <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/> that is modifiable, and
            if there are any selected <see cref="T:Northwoods.GoXam.Group"/>s that can be <see cref="M:Northwoods.GoXam.Group.CanUngroup"/>'ed.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Edit">
            <summary>
            Start in-place editing of the first <c>TextBlock</c> of the selected part.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanEdit">
            <summary>
            This overridable predicate controls whether or not the <c>Edit</c> command is executed.
            </summary>
            <returns>
            By default, this returns true:
            if the diagram is not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            if <see cref="P:Northwoods.GoXam.Diagram.AllowEdit"/> is true,
            if there are any selected parts that can be <see cref="M:Northwoods.GoXam.Part.CanEdit"/>'ed,
            and if there is a <see cref="P:Northwoods.GoXam.Diagram.TextEditingTool"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.Print">
            <summary>
            Print the diagram by showing a <c>PrintDialog</c> and then calling the
            <see cref="P:Northwoods.GoXam.Diagram.PrintManager"/>'s <see cref="M:Northwoods.GoXam.PrintManager.Print(System.Windows.Controls.PrintDialog)"/> method.
            </summary>
            <remarks>
            This calls the <c>Print</c> method on the <see cref="P:Northwoods.GoXam.Diagram.PrintManager"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CommandHandler.CanPrint">
            <summary>
            This overridable predicate controls whether or not the <c>Print</c> command is executed.
            </summary>
            <returns>
            By default, this returns true if <see cref="P:Northwoods.GoXam.Diagram.AllowPrint"/> is true
            and there is a <see cref="P:Northwoods.GoXam.Diagram.PrintManager"/>.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this <see cref="T:Northwoods.GoXam.CommandHandler"/> executes commands.
            </summary>
            <value>
            This value is automatically set by the <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/> setter.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.DeletingInclusions">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/> deletes only the selected parts
            or subtrees of selected nodes as well.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.Standard"/>.
            </value>
            <remarks>
            <para>
            When set to <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree"/>,
            <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/> will augment the collection of
            selected nodes to include their tree children nodes.
            The resulting collection often will include many <see cref="T:Northwoods.GoXam.Node"/>s and
            <see cref="T:Northwoods.GoXam.Link"/>s that are not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>.
            </para>
            <para>
            Links are assumed to go from the parent node to the children nodes,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is set to "Source".
            </para>
            <para>
            If you set this property, you might also want to set the
            <see cref="P:Northwoods.GoXam.CommandHandler.CopyingInclusions"/> property and the
            <see cref="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.CopyingInclusions">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/> deletes only the selected parts
            or subtrees of selected nodes as well.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.Standard"/>.
            </value>
            <remarks>
            <para>
            When set to <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree"/>,
            <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/> will augment the collection of
            selected nodes to include their tree children nodes.
            The resulting collection often will include many <see cref="T:Northwoods.GoXam.Node"/>s and
            <see cref="T:Northwoods.GoXam.Link"/>s that are not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>.
            </para>
            <para>
            Links are assumed to go from the parent node to the children nodes,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is set to "Source".
            </para>
            <para>
            If you set this property, you might also want to set the
            <see cref="P:Northwoods.GoXam.CommandHandler.DeletingInclusions"/> property and the
            <see cref="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.ClipboardBitmap">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.CommandHandler.CopyToClipboard(Northwoods.GoXam.Model.IDataCollection)"/> also adds a bitmap
            of the area of the selected parts to the system clipboard.  [WPF only]
            </summary>
            <value>
            The default value is false, no bitmap of the selected parts is put on the clipboard.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.PrototypeGroup">
            <summary>
            Gets or sets a data value to be copied for a new group node by <see cref="M:Northwoods.GoXam.CommandHandler.Group"/>.
            </summary>
            <value>
            The default value is null, which causes <see cref="M:Northwoods.GoXam.CommandHandler.CanGroup"/> predicate to return false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.ZoomFactor">
            <summary>
            Gets or sets the factor by which zooming occurs.
            </summary>
            <value>
            The default value is 1.05, which causes <see cref="M:Northwoods.GoXam.CommandHandler.IncreaseZoom(System.Object)"/> and <see cref="M:Northwoods.GoXam.CommandHandler.DecreaseZoom(System.Object)"/>
            to change the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> by 5% each time, by default.
            Any new value must be larger than 1.0.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.CopyCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanCopy"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.CutCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Cut"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanCut"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.DeleteCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanDelete"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.PasteCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Paste"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanPaste"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.PrintCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Print"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanPrint"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.RedoCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Redo"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanRedo"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.SelectAllCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.SelectAll"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanSelectAll"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.UndoCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Undo"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanUndo"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.DecreaseZoomCommand">
            <summary>
            Gets a non-routed parameterized <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.DecreaseZoom(System.Object)"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanDecreaseZoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.IncreaseZoomCommand">
            <summary>
            Gets a non-routed parameterized <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.IncreaseZoom(System.Object)"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanIncreaseZoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.ZoomCommand">
            <summary>
            Gets a non-routed parameterized <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Zoom(System.Object)"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanZoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.ZoomToFitCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.ZoomToFit"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanZoomToFit"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.GroupCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Group"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanGroup"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.UngroupCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Ungroup"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanUngroup"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.CommandHandler.EditCommand">
            <summary>
            Gets a non-routed <c>ICommand</c> that executes <see cref="M:Northwoods.GoXam.CommandHandler.Edit"/> and is enabled by <see cref="M:Northwoods.GoXam.CommandHandler.CanEdit"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Commands">
            <summary>
            This static class provides all of the predefined commands that <see cref="T:Northwoods.GoXam.Diagram"/>s can handle
            via their <see cref="P:Northwoods.GoXam.Diagram.CommandHandler"/>.  [WPF only]
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Copy">
            <summary>
            Gets the routed command that represents an edit Copy operation: <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Cut">
            <summary>
            Gets the routed command that represents an edit Cut operation: <see cref="M:Northwoods.GoXam.CommandHandler.Cut"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Delete">
            <summary>
            Gets the routed command that represents an edit Delete operation: <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Paste">
            <summary>
            Gets the routed command that represents an edit Paste operation: <see cref="M:Northwoods.GoXam.CommandHandler.Paste"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Print">
            <summary>
            Gets the routed command that represents a Print operation: <see cref="M:Northwoods.GoXam.CommandHandler.Print"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Redo">
            <summary>
            Gets the routed command that represents an edit Redo operation: <see cref="M:Northwoods.GoXam.CommandHandler.Redo"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.SelectAll">
            <summary>
            Gets the routed command that represents an edit SelectAll operation: <see cref="M:Northwoods.GoXam.CommandHandler.SelectAll"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Stop">
            <summary>
            Gets the routed command that represents the cancelling of an ongoing operation: <see cref="M:Northwoods.GoXam.CommandHandler.StopCommand"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Undo">
            <summary>
            Gets the routed command that represents an edit Undo operation: <see cref="M:Northwoods.GoXam.CommandHandler.Undo"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.DecreaseZoom">
            <summary>
            Gets the routed command that represents a navigation zoom-out operation: <see cref="M:Northwoods.GoXam.CommandHandler.DecreaseZoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.IncreaseZoom">
            <summary>
            Gets the routed command that represents a navigation zoom-in operation: <see cref="M:Northwoods.GoXam.CommandHandler.IncreaseZoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Zoom">
            <summary>
            Gets the routed command that represents a navigation reset-to-normal-zoom operation: <see cref="M:Northwoods.GoXam.CommandHandler.Zoom(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.ZoomToFit">
            <summary>
            Gets the routed command that represents a zoom-to-fit operation: <see cref="M:Northwoods.GoXam.CommandHandler.ZoomToFit"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Group">
            <summary>
            Gets the routed command that represents an edit Group operation: <see cref="M:Northwoods.GoXam.CommandHandler.Group"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Ungroup">
            <summary>
            Gets the routed command that represents an edit Ungroup operation: <see cref="M:Northwoods.GoXam.CommandHandler.Ungroup"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Commands.Edit">
            <summary>
            Gets the routed command that represents an in-place Edit operation: <see cref="M:Northwoods.GoXam.CommandHandler.Edit"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Converter">
            <summary>
            This is a base class for all of the converters.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Converter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            By default this just throws a <c>NotImplementedException</c>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Converter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            By default this just throws a <c>NotImplementedException</c>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoXam.StringColorConverter">
            <summary>
            Convert the name of a color into a <c>Color</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.StringColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a color name or RGB value into a <c>Color</c>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.StringColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This converts a Color to a string.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoXam.StringBrushConverter">
            <summary>
            Convert the name of a color into a <c>Brush</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.StringBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a color name or RGB value into a <c>SolidColorBrush</c>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.StringBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This works to retrieve the color as a string from a <c>SolidColorBrush</c>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoXam.CountVisibilityConverter">
            <summary>
            Convert a positive integer to the value <c>Visibility.Visible</c>;
            zero or a negative value converts to <c>Visibility.Collapsed</c>.
            </summary>
            <remarks>
            This can be useful when you want the something to be visible only
            when some value, such as the Count of a list, is positive.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.CountVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This returns <c>Visibility.Visible</c> when the value is positive,
            or <c>Visibility.Collapsed</c> otherwise.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.CountVisibilityConverter.Inverted">
            <summary>
            Gets or sets whether a positive value should convert to
            <c>Visibility.Collapsed</c> instead of <c>Visibility.Visible</c>.
            </summary>
            <value>
            The default value is false, e.g. a zero value converts to <c>Collapsed</c>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.BooleanBrushConverter">
            <summary>
            Convert a boolean to one of two <c>Brush</c>es.
            </summary>
            <remarks>
            <para>
            You can specify a brush for when the boolean is True and
            another one for when the boolean is False,
            either by setting the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueBrush"/> or <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseBrush"/> properties,
            or by setting the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueColor"/> or <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseColor"/> properties
            which will also set the corresponding brush property to a <c>SolidColorBrush</c> of that color.
            </para>
            <para>
            Typically you will create an instance (or two) of this converter class as resources.
            For example:
            <code>
            &lt;go:BooleanBrushConverter x:Key="theBooleanBrushConverter" TrueColor="DodgerBlue"&gt;
              &lt;go:BooleanBrushConverter.FalseBrush&gt;
                &lt;LinearGradientBrush . . .&gt;
                   . . .
                &lt;/LinearGradientBrush&gt;
              &lt;/go:BooleanBrushConverter.FalseBrush&gt;
            &lt;/go:BooleanBrushConverter&gt;
            </code>
            </para>
            <para>
            One possible use for this converter is to indicate selection:
            <code>
            &lt;DataTemplate x:Key="NodeTemplate2"&gt;
              &lt;Border BorderBrush="Gray" BorderThickness="1"
                      Background="{Binding Path=Part.IsSelected, Converter={StaticResource theBooleanBrushConverter}}"
                      go:Node.Location="{Binding Path=Data.Location, Mode=TwoWay}"&gt;
                &lt;StackPanel Orientation="Vertical"&gt;
                  &lt;Ellipse Fill="Blue" Width="20" Height="20" HorizontalAlignment="Center"
                           go:Node.LinkableFrom="True" go:Node.LinkableTo="True" Cursor="Arrow"
                           go:Node.FromSpot="AllSides" go:Node.ToSpot="AllSides"/&gt;
                  &lt;TextBlock x:Name="Text" Text="{Binding Path=Data.Key}" HorizontalAlignment="Center" /&gt;
                &lt;/StackPanel&gt;
              &lt;/Border&gt;
            &lt;/DataTemplate&gt;
            </code>
            When the node is not selected, the background is a linear gradient brush.
            When the node is selected, the background is a solid DodgerBlue.
            </para>
            <para>
            By default true converts to the system highlight color/brush (typically bluish)
            and false converts to the system highlight text color/brush (typically white).
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.BooleanBrushConverter.#ctor">
            <summary>
            Create a boolean to Brush converter using the system highlight color
            as the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueColor"/> and the system highlight text color
            as the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseColor"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.BooleanBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This returns <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseBrush"/> when the <paramref name="value"/> is false;
            otherwise this returns <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueBrush"/>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.BooleanBrushConverter.TrueColor">
            <summary>
            Gets or sets the color of <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueBrush"/> when it is a <c>SolidColorBrush</c>.
            </summary>
            <value>
            Changing this property will also modify the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueBrush"/> property.
            </value>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.BooleanBrushConverter.TrueBrush">
            <summary>
            Gets or sets the brush to be returned by the conversion when the input value is true.
            </summary>
            <value>
            Changing this property will also modify the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.TrueColor"/> property
            if the new brush is a <c>SolidColorBrush</c>.
            </value>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.BooleanBrushConverter.FalseColor">
            <summary>
            Gets or sets the color of <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseBrush"/> when it is a <c>SolidColorBrush</c>.
            </summary>
            <value>
            Changing this property will also modify the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseBrush"/> property.
            </value>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.BooleanBrushConverter.FalseBrush">
            <summary>
            Gets or sets the brush to be returned by the conversion when the input value is false.
            </summary>
            <value>
            Changing this property will also modify the <see cref="P:Northwoods.GoXam.BooleanBrushConverter.FalseColor"/> property
            if the new brush is a <c>SolidColorBrush</c>.
            </value>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.BooleanStringConverter">
            <summary>
            Convert a boolean to one of two strings.
            </summary>
            <remarks>
            <para>
            Typically you will create an instance of this as a resource.
            For example, one possible use of this converter:
            <code>
            &lt;go:BooleanStringConverter x:Key="theBooleanLayerConverter" TrueString="Foreground" FalseString="" /&gt;
            </code>
            <code>
            &lt;DataTemplate&gt;
              &lt;Border . . .
                      go:Part.LayerName="{Binding Path=Part.IsSelected, Converter={StaticResource theBooleanLayerConverter}}"&gt;
                . . .
              &lt;/Border&gt;
            &lt;/DataTemplate&gt;
            </code>
            When the node is selected, the node is moved to the <see cref="T:Northwoods.GoXam.NodeLayer"/> named "Foreground".
            When the node is no longer selected, the node is moved to the default layer, named with the empty string.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.BooleanStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This returns <see cref="P:Northwoods.GoXam.BooleanStringConverter.FalseString"/> when the <paramref name="value"/> is false;
            otherwise this returns <see cref="P:Northwoods.GoXam.BooleanStringConverter.TrueString"/>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.BooleanStringConverter.TrueString">
            <summary>
            Gets or sets the string that is returned by the conversion when the value is true.
            </summary>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.BooleanStringConverter.FalseString">
            <summary>
            Gets or sets the string that is returned by the conversion when the value is false.
            </summary>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.BooleanThicknessConverter">
            <summary>
            Convert a boolean to one of two <c>Thickness</c> values.
            </summary>
            <remarks>
            <para>
            Typically you will create an instance of this as a resource.
            For example, one possible use of this converter:
            <code>
            &lt;go:BooleanThicknessConverter x:Key="theBooleanThicknessConverter" TrueThickness="3" FalseThickness="2" /&gt;
            </code>
            <code>
            &lt;DataTemplate&gt;
              &lt;Border . . .
                  BorderThickness="{Binding Path=Part.IsSelected, Converter={StaticResource theBooleanThicknessConverter}}"&gt;
                . . .
              &lt;/Border&gt;
            &lt;/DataTemplate&gt;
            </code>
            When the node is selected, the node's border is thicker than normal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.BooleanThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This returns the <see cref="P:Northwoods.GoXam.BooleanThicknessConverter.FalseThickness"/> value when the <paramref name="value"/> is false;
            otherwise this returns the value of <see cref="P:Northwoods.GoXam.BooleanThicknessConverter.TrueThickness"/>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.BooleanThicknessConverter.TrueThickness">
            <summary>
            Gets or sets the double-precision floating point value that is returned by the conversion when the value is true.
            </summary>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.BooleanThicknessConverter.FalseThickness">
            <summary>
            Gets or sets the double-precision floating point value that is returned by the conversion when the value is false.
            </summary>
            <remarks>
            This is not a dependency property, so one cannot bind this property value.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.NullBooleanConverter">
            <summary>
            Convert a reference value to false if the value is null or to true otherwise.
            When <see cref="P:Northwoods.GoXam.NullBooleanConverter.Inverted"/> is true the sense is reversed.
            </summary>
            <remarks>
            <para>
            Typically you will create an instance of this as a resource.
            For example, one possible use of this converter:
            <code>
            &lt;go:NullBooleanConverter x:Key="theNullBooleanConverter" /&gt;
            </code>
            <code>
              &lt;ComboBox IsEnabled="{Binding Path=SelectedNode, ElementName=myDiagram, Converter={StaticResource theNullBooleanConverter}}"&gt;
            </code>
            When a node is selected, the <c>ComboBox</c> is enabled.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.NullBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This returns false or true depending on whether the value is null or not
            and on the value of <see cref="P:Northwoods.GoXam.NullBooleanConverter.Inverted"/>.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.NullBooleanConverter.Inverted">
            <summary>
            Gets or sets whether a null value should convert to true or false.
            </summary>
            <value>
            The default value is false, which converts a null value to false.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.GridPattern">
            <summary>
            This panel is used to draw regular grid patterns.
            </summary>
            <remarks>
            <para>
            The typical <see cref="T:Northwoods.GoXam.GridPattern"/> will have pairs of <c>Path</c>s as child elements.
            Each <c>Path</c> will have the attached property <see cref="F:Northwoods.GoXam.GridPattern.FigureProperty"/> set to indicate
            whether the path should be a line or a bar, and whether the path has repeated horizontal
            or vertical segments.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.GridPattern.CellSize"/> property controls the size of each cell.
            </para>
            <para>
            A simple grid is defined by:
            <code>
              &lt;go:GridPattern CellSize="10 10" Width="200" Height="200"&gt;
                &lt;Path Stroke="LightGray" StrokeThickness="1" go:GridPattern.Figure="HorizontalLine" /&gt;
                &lt;Path Stroke="LightGray" StrokeThickness="1" go:GridPattern.Figure="VerticalLine" /&gt;
              &lt;/go:GridPattern&gt;
            </code>
            </para>
            <para>
            You can also have repeating variations of the lines by having multiple <c>Path</c>s,
            where those after the first one in each direction have the <see cref="F:Northwoods.GoXam.GridPattern.IntervalProperty"/> attached
            property to set integer values larger than one.
            The interval describes how often that path should be drawn.
            Note that the interval is an integer not a double because it is a multiple.
            So in the follow example, once every five lines there is a Gray line instead of a LightGray line --
            in other words every 10 model units the line is LightGray,
            except that every 50 model units the line is Gray.
            <code>
              &lt;go:GridPattern CellSize="10 10" Width="200" Height="200"&gt;
                &lt;Path Stroke="LightGray" StrokeThickness="1" go:GridPattern.Figure="HorizontalLine" /&gt;
                &lt;Path Stroke="LightGray" StrokeThickness="1" go:GridPattern.Figure="VerticalLine" /&gt;
                &lt;Path Stroke="Gray" StrokeThickness="1" go:GridPattern.Figure="HorizontalLine" go:GridPattern.Interval="5" /&gt;
                &lt;Path Stroke="Gray" StrokeThickness="1" go:GridPattern.Figure="VerticalLine" go:GridPattern.Interval="5" /&gt;
              &lt;/go:GridPattern&gt;
            </code>
            </para>
            <para>
            You can have alternating green bars by:
            <code>
              &lt;go:GridPattern CellSize="50 50" Width="200" Height="200"&gt;
                &lt;Path Fill="LightGreen" go:GridPattern.Figure="HorizontalBar" go:GridPattern.Interval="2" /&gt;
              &lt;/go:GridPattern&gt;
            </code>
            </para>
            <para>
            A <c>GridPattern</c> may be the value of a diagram's <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/> property.
            You will need to set <see cref="P:Northwoods.GoXam.Diagram.GridVisible"/> to true.
            Such a <c>GridPattern</c> is automatically arranged to occupy the whole <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s viewport;
            so you should not set its <b>Width</b> or <b>Height</b>.
            The <c>GridPattern</c> may be supplied as a property element value in XAML or as a <c>DataTemplate</c>
            specified as the diagram's <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/>.
            If no <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/> property and no 
            <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/> are supplied,
            it will use a default template.
            </para>
            <para>
            You should not apply any transformations to the <c>Path</c>s; that is reserved for GoXam's use.
            If the <c>GridPattern</c> is the whole diagram's <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/>,
            you should not apply any transformations to it at all.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.#ctor">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.GridPattern"/> panel.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.CellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.GridPattern.CellSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.OriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.GridPattern.Origin"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.FigureProperty">
            <summary>
            Identifies the <c>Figure</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.GridFigure"/> of the <c>Path</c> that describes its appearance.
            </summary>
            <param name="d">a <c>Path</c></param>
            <returns>This defaults to <see cref="F:Northwoods.GoXam.GridFigure.None"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.SetFigure(System.Windows.DependencyObject,Northwoods.GoXam.GridFigure)">
            <summary>
            Sets the <see cref="T:Northwoods.GoXam.GridFigure"/> of the <c>Path</c> to determine its appearance.
            </summary>
            <param name="d">a <c>Path</c></param>
            <param name="v">
            a <see cref="T:Northwoods.GoXam.GridFigure"/>; the panel assumes <see cref="F:Northwoods.GoXam.GridFigure.None"/> otherwise
            </param>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.IntervalProperty">
            <summary>
            Identifies the <c>Interval</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.GetInterval(System.Windows.DependencyObject)">
            <summary>
            Gets how far apart the lines (or the starts of the bar edges) should be drawn, in multiples of the cell size.
            </summary>
            <param name="d">a <c>Path</c></param>
            <returns>This defaults to 1, a single cell width or height, depending on the value of <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/>.</returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.SetInterval(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets how far apart the lines (or the starts of the bar edges) should be drawn.
            </summary>
            <param name="d">a <c>Path</c></param>
            <param name="v">
            a positive integer, in units of the cell width or height, depending on the direction given by <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/>
            </param>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.OffsetProperty">
            <summary>
            Identifies the <c>Offset</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.GetOffset(System.Windows.DependencyObject)">
            <summary>
            Gets the offset for starting the count at which <c>Path</c>s should be drawn, in multiples of the cell size.
            </summary>
            <param name="d">a <c>Path</c></param>
            <returns>This defaults to zero.</returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.SetOffset(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the starting offset at which the given <c>Path</c> is drawn, in multiples of the cell size.
            </summary>
            <param name="d">a <c>Path</c></param>
            <param name="v">
            a positive integer, in units of the cell width or height, depending on the direction given by <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/>
            </param>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.BarThicknessProperty">
            <summary>
            Identifies the <c>BarThickness</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.GetBarThickness(System.Windows.DependencyObject)">
            <summary>
            Gets the thickness of horizontal or vertical bars, in multiples of the cell size.
            </summary>
            <param name="d">a <c>Path</c></param>
            <returns>This defaults to 1, a single cell width or height, depending on the <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/>.</returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.SetBarThickness(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the thickness of bars, in multiples of the cell size.
            </summary>
            <param name="d">a <c>Path</c></param>
            <param name="v">
            a positive integer, in units of the cell width or height, depending on the direction given by <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/>
            </param>
        </member>
        <member name="F:Northwoods.GoXam.GridPattern.CrossLengthProperty">
            <summary>
            Identifies the <c>CrossLength</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.GetCrossLength(System.Windows.DependencyObject)">
            <summary>
            Gets the length of a <see cref="F:Northwoods.GoXam.GridFigure.HorizontalCross"/> or <see cref="F:Northwoods.GoXam.GridFigure.VerticalCross"/> line.
            </summary>
            <param name="d">a <c>Path</c></param>
            <returns>This defaults to 6.</returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.SetCrossLength(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the length of a <see cref="F:Northwoods.GoXam.GridFigure.HorizontalCross"/> or <see cref="F:Northwoods.GoXam.GridFigure.VerticalCross"/> line.
            </summary>
            <param name="d">a <c>Path</c></param>
            <param name="v">
            a positive number, in model coordinates; the actual length of the line is limited by the <see cref="P:Northwoods.GoXam.GridPattern.CellSize"/>.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.MeasureOverride(System.Windows.Size)">
            <summary>
            Supply the geometries for child <c>Path</c> elements that have a
            <see cref="M:Northwoods.GoXam.GridPattern.GetFigure(System.Windows.DependencyObject)"/> that is not <see cref="F:Northwoods.GoXam.GridFigure.None"/>,
            and measure all children.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange all of the child elements.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            This override is necessary to avoid a performance bug in WPF.
            </summary>
            <param name="hitTestParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.GridPattern.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <summary>
            This override is necessary to avoid a performance bug in WPF.
            </summary>
            <param name="hitTestParameters"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.GridPattern.CellSize">
            <summary>
            Gets or sets the size of each grid cell.
            </summary>
            <value>
            The default value is 10x10.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.GridPattern.Origin">
            <summary>
            Gets or sets the snapping grid's coordinates starting point.
            </summary>
            <value>
            The default value is <c>Point(0, 0)</c>.
            Both X and Y values must be non-infinite numbers.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.GridFigure">
            <summary>
            This enumeration describes how <c>Path</c> elements that are children
            of a <see cref="T:Northwoods.GoXam.GridPattern"/> may be used to draw a regular grid.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.None">
            <summary>
            The default value -- not used by <see cref="T:Northwoods.GoXam.GridPattern"/> as a regular grid line or bar.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.HorizontalLine">
            <summary>
            Draw regular horizontal lines; supply "Stroke..." properties to the <c>Path</c>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.VerticalLine">
            <summary>
            Draw regular vertical lines; supply "Stroke..." properties to the <c>Path</c>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.HorizontalBar">
            <summary>
            Draw regular horizontal bars; supply the "Fill" property to the <c>Path</c>.
            The brush fill applies to the whole <see cref="T:Northwoods.GoXam.GridPattern"/>, not to each bar.
            Control the breadth of each bar in units of the cell size
            by setting the attached <see cref="F:Northwoods.GoXam.GridPattern.BarThicknessProperty"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.VerticalBar">
            <summary>
            Draw regular vertical bars; supply the "Fill" property to the <c>Path</c>.
            The brush fill applies to the whole <see cref="T:Northwoods.GoXam.GridPattern"/>, not to each bar.
            Control the breadth of each bar in units of the cell size
            by setting the attached <see cref="F:Northwoods.GoXam.GridPattern.BarThicknessProperty"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.HorizontalDot">
            <summary>
            Draw regular dots along horizontal lines at the grid points.
            You need to supply the <b>Stroke</b> brush property to give each dot a color.
            The <b>StrokeThickness</b> specifies the size of each dot.
            If you do not specify a non-zero <b>StrokeThickness</b>, it will be set to 1.
            <see cref="T:Northwoods.GoXam.GridPattern"/> will automatically set the other "Stroke..." properties.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.VerticalDot">
            <summary>
            Draw regular dots along vertical lines at the grid points.
            You need to supply the <b>Stroke</b> brush property to give each dot a color.
            The <b>StrokeThickness</b> specifies the size of each dot.
            If you do not specify a non-zero <b>StrokeThickness</b>, it will be set to 1.
            <see cref="T:Northwoods.GoXam.GridPattern"/> will automatically set the other "Stroke..." properties.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.HorizontalCross">
            <summary>
            Draw horizontal lines for crosses at the grid points.
            You need to supply the <b>Stroke</b> brush property to give each line a color.
            If you do not specify a non-zero <b>StrokeThickness</b>, it will be set to 1.
            <see cref="T:Northwoods.GoXam.GridPattern"/> will automatically set the other "Stroke..." properties.
            Control the length of each dash by setting the <see cref="F:Northwoods.GoXam.GridPattern.CrossLengthProperty"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GridFigure.VerticalCross">
            <summary>
            Draw vertical lines for crosses at the grid points.
            You need to supply the <b>Stroke</b> brush property to give each line a color.
            If you do not specify a non-zero <b>StrokeThickness</b>, it will be set to 1.
            <see cref="T:Northwoods.GoXam.GridPattern"/> will automatically set the other "Stroke..." properties.
            Control the length of each dash by setting the <see cref="F:Northwoods.GoXam.GridPattern.CrossLengthProperty"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.XHelper">
            <summary>
            This static class holds various methods that are useful in saving and loading
            model data to and from Linq for XML <c>XElement</c>s.
            </summary>
            <remarks>
            <para>
            There are three kinds of methods defined in this class.
            There are basic data conversion methods, converting data types to and from Strings.
            There are methods that produce <c>XAttribute</c>s and <c>XElement</c>s
            containing given some data.
            There are methods that get data from <c>XAttribute</c>s and <c>XElement</c>s.
            </para>
            <para>
            The conversion method names are all prefixed with "To".
            They use the <c>XmlConvert</c> methods for achieving their results.
            For the basic data types (String, bool, int, Guid, and double), the conversion
            methods are the same as the equivalent <c>XmlConvert</c> methods.
            For the additional data types (Point, Size, Rect, Thickness)
            the conversion methods assume the numbers are separated by spaces.
            </para>
            <para>
            When generating XML using Linq for XML you will often want to avoid
            generating attributes or elements when the values are the same as the property defaults.
            To help with that situation the methods named "Attribute"
            take the attribute name, a property value, and the property's default value.
            If the value is null or if the value is equal to the default value,
            the method returns null; otherwise it returns a new <c>XAttribute</c>.
            This is convenient when building an <c>XElement</c>.
            </para>
            <para>
            When consuming XML using Linq for XML you need to deal with situations
            where the expected attribute or child element is not present
            or where the value is in the wrong format or for some other reason
            cannot be converted to the expected data type.
            To help with these cases the methods named "Read"
            take the attribute name, the <c>XElement</c> on which the attribute may exist,
            and the default value for that property.
            If the <c>XElement</c> is null,
            or if it has no <c>XAttribute</c> with the given name,
            or if there is an exception converting the string value to the expected data type,
            it will return the default value.
            </para>
            <para>
            There are also generic methods for handling enumerations and for sequences of data.
            For data sequences, of type <c>IEnumerable</c>, the methods will generate
            and expect to consume child elements, one for each item.
            You will need to specify the name of those child elements,
            and the conversion function for the item data type.
            </para>
            <para>
            For examples of how to use these methods,
            look at the descriptions of the predefined data methods for making elements and loading
            data from them:
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.MakeXElement(System.Xml.Linq.XName)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>,
            <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.LoadFromXElement(System.Xml.Linq.XElement)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>,
            <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute``1(System.Xml.Linq.XName,``0,``0,System.Func{``0,System.String})">
            <summary>
            This generic method produces an <c>XAttribute</c> with the given value
            if the value is not equal to the given default value, using the given
            conversion function to convert the value to a string.
            </summary>
            <typeparam name="T">the value type</typeparam>
            <param name="n">the name of the <c>XAttribute</c></param>
            <param name="v">the value</param>
            <param name="defval">the default value for this attribute/property</param>
            <param name="conv">a function from <typeparamref name="T"/> to String</param>
            <returns>an <c>XAttribute</c>, or null if the value is null or if it is equal to the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read``1(System.Xml.Linq.XName,System.Xml.Linq.XElement,``0,System.Func{System.String,``0})">
            <summary>
            This generic method produces a property value from an <c>XElement</c>'s
            attribute value, using a conversion function to convert the string to
            the expected type, and returning a default value if the conversion fails.
            </summary>
            <typeparam name="T">the value type</typeparam>
            <param name="n">the name of the attribute</param>
            <param name="e">the <c>XElement</c> that may have an <c>XAttribute</c> with the name <paramref name="n"/></param>
            <param name="defval">
            the default value to return if there's no attribute named <paramref name="n"/>
            or if the attribute value string cannot be converted to the value type
            </param>
            <param name="conv">a function from String to <typeparamref name="T"/></param>
            <returns>either the attribute value string converted to <typeparamref name="T"/>,
            or else the <paramref name="defval"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.String,System.String)">
            <summary>
            Generate an <c>XAttribute</c> for a String value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.String)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a String,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.String)">
            <summary>
            This data conversion function converts a String to a String by just returning its argument.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Boolean,System.Boolean)">
            <summary>
            Generate an <c>XAttribute</c> for a Boolean value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Boolean,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Boolean)">
            <summary>
            This data conversion function converts a Boolean to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToBoolean(System.String)">
            <summary>
            This data conversion function converts a String to a Boolean.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Int32,System.Int32)">
            <summary>
            Generate an <c>XAttribute</c> for an Int32 value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to an Int32,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Int32)">
            <summary>
            This data conversion function converts an Int32 to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToInt32(System.String)">
            <summary>
            This data conversion function converts a String to an Int32.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Guid,System.Guid)">
            <summary>
            Generate an <c>XAttribute</c> for a Guid value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Guid)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Guid,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Guid)">
            <summary>
            This data conversion function converts a Guid to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToGuid(System.String)">
            <summary>
            This data conversion function converts a String to a Guid.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Double,System.Double)">
            <summary>
            Generate an <c>XAttribute</c> for a Double value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Double)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Double,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Double)">
            <summary>
            This data conversion function converts a Double to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToDouble(System.String)">
            <summary>
            This data conversion function converts a String to a Double.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Windows.Point,System.Windows.Point)">
            <summary>
            Generate an <c>XAttribute</c> for a Point value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Windows.Point)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Point,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Windows.Point)">
            <summary>
            This data conversion function converts a Point to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToPoint(System.String)">
            <summary>
            This data conversion function converts a String to a Point.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Windows.Size,System.Windows.Size)">
            <summary>
            Generate an <c>XAttribute</c> for a Size value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Windows.Size)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Size,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Windows.Size)">
            <summary>
            This data conversion function converts a Size to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToSize(System.String)">
            <summary>
            This data conversion function converts a String to a Size.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Generate an <c>XAttribute</c> for a Rect value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Windows.Rect)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Rect,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Windows.Rect)">
            <summary>
            This data conversion function converts a Rect to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToRect(System.String)">
            <summary>
            This data conversion function converts a String to a Rect.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            Generate an <c>XAttribute</c> for a Thickness value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Windows.Thickness)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Thickness,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Windows.Thickness)">
            <summary>
            This data conversion function converts a Thickness to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToThickness(System.String)">
            <summary>
            This data conversion function converts a String to a Thickness.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.DateTime,System.DateTime)">
            <summary>
            Generate an <c>XAttribute</c> for a DateTime value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.DateTime)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a DateTime,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.DateTime)">
            <summary>
            This data conversion function converts a DateTime to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToDateTime(System.String)">
            <summary>
            This data conversion function converts a String to a DateTime.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.TimeSpan,System.TimeSpan)">
            <summary>
            Generate an <c>XAttribute</c> for a TimeSpan value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.TimeSpan)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a TimeSpan,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.TimeSpan)">
            <summary>
            This data conversion function converts a TimeSpan to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToTimeSpan(System.String)">
            <summary>
            This data conversion function converts a String to a TimeSpan.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Decimal,System.Decimal)">
            <summary>
            Generate an <c>XAttribute</c> for a Decimal value, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Decimal)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Decimal,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Decimal)">
            <summary>
            This data conversion function converts a Decimal to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToDecimal(System.String)">
            <summary>
            This data conversion function converts a String to a Decimal.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.AttributeEnum``1(System.Xml.Linq.XName,``0,``0)">
            <summary>
            Generate an <c>XAttribute</c> for an enumerated type value, unless the value is equal to the given default value.
            </summary>
            <typeparam name="T">this must be an <c>Enum</c> type</typeparam>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ReadEnum``1(System.Xml.Linq.XName,System.Xml.Linq.XElement,``0)">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to an enumerated type,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <typeparam name="T">this must be an <c>Enum</c> type</typeparam>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the <typeparamref name="T"/>, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Generate an <c>XAttribute</c> for a sequence of Int32 values, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Thickness,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            This data conversion function converts a sequence of Int32 values to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToIEnumerableOfInt32(System.String)">
            <summary>
            This data conversion function converts a String to a sequence of Int32.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Generate an <c>XAttribute</c> for a sequence of Double values, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Thickness,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            This data conversion function converts a sequence of Double values to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToIEnumerableOfDouble(System.String)">
            <summary>
            This data conversion function converts a String to a sequence of Doubles.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Attribute(System.Xml.Linq.XName,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Generate an <c>XAttribute</c> for a sequence of Point values, unless the value is equal to the given default value.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="v">the property value</param>
            <param name="defval">the default value for the property</param>
            <returns>an <c>XAttribute</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Read(System.Xml.Linq.XName,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Consume an <c>XAttribute</c> on an <c>XElement</c>, converting the attribute's value to a Thickness,
            or return the default value if the attribute is not present or if there is a conversion exception.
            </summary>
            <param name="n">the attribute name, often the same as the data's property name</param>
            <param name="e">the <c>XElement</c> holding the expected attribute</param>
            <param name="defval">the default value for the property</param>
            <returns>the attribute value converted to the expected data type, or the default value</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToString(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            This data conversion function converts a sequence of Point values to a String.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ToIEnumerableOfPoint(System.String)">
            <summary>
            This data conversion function converts a String to a sequence of Points.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.Elements``1(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Collections.IEnumerable,System.Func{``0,System.String})">
            <summary>
            Generate an <c>XElement</c> containing nested child <c>XElement</c>s, one for each item in the given collection.
            </summary>
            <typeparam name="T">the item data type</typeparam>
            <param name="n">the name for the new <c>XElement</c></param>
            <param name="c">the name for the child elements</param>
            <param name="v"></param>
            <param name="conv"></param>
            <returns>an <c>XElement</c> or null if the given collection was null or empty</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.XHelper.ReadElements``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Collections.Generic.ICollection{``0},System.Func{System.String,``0})">
            <summary>
            Consume an <c>XContainer</c> that is assumed to hold a collection of nested child <c>XElement</c>s
            each holding a value to be converted to the given data type.
            </summary>
            <typeparam name="T">the item data type</typeparam>
            <param name="e">the <c>XContainer</c> to be read</param>
            <param name="c">the name of the child elements</param>
            <param name="coll">an empty collection to which items are added</param>
            <param name="conv">a conversion function from String to the item data type, <typeparamref name="T"/></param>
            <returns>the <paramref name="coll"/> collection, containing all of the data items that were read</returns>
            <remarks>
            If there is an exception converting any of the child elements to data values,
            this will return the collection gathered so far.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Palette">
            <summary>
            The <c>Palette</c> control is a <see cref="T:Northwoods.GoXam.Diagram"/> that holds parts that can be dragged to a <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
            <remarks>
            <para>
            You will need to initialize the palette's <see cref="P:Northwoods.GoXam.Diagram.Model"/> with the node data with which
            you wish to populate the palette.  For example, for the (simple) palette:
            <code>
              &lt;go:Palette x:Name="myPalette" NodeTemplate="..." /&gt;
            </code>
            you would need to perform something like the following at initialization:
            <code>
              myPalette.Model.NodesSource = new String[] {
                "Alpha", "Beta", "Gamma"
              };
            </code>
            You also need to set <c>AllowDrop="True"</c> on the <see cref="T:Northwoods.GoXam.Diagram"/>(s)
            into which users may drop the items from the palette.
            </para>
            <para>
            It is commonplace to have a different and probably simpler node <c>DataTemplate</c> for
            <see cref="T:Northwoods.GoXam.Palette"/>s than for the destination <see cref="T:Northwoods.GoXam.Diagram"/>s.
            </para>
            <para>
            By default a palette uses a <see cref="T:Northwoods.GoXam.Layout.GridLayout"/>
            as its <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.  That <c>GridLayout</c> defaults to sorting
            all of the nodes by the <see cref="P:Northwoods.GoXam.Part.Text"/> (attached) property.
            It also re-layouts automatically whenever the viewport size changes,
            because the size of the <see cref="T:Northwoods.GoXam.DiagramPanel"/> changes or because the scale changes.
            </para>
            <para>
            The default style for a palette also makes it <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>,
            and sets <see cref="P:Northwoods.GoXam.Diagram.AllowDragOut"/> to be true, to permit drag-and-drop
            operations to start from this palette and to end on other diagrams.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Palette.#ctor">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Palette"/> control.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Palette.OnApplyTemplate">
            <summary>
            This override replaces the default <see cref="P:Northwoods.GoXam.Diagram.Layout"/> with a <see cref="T:Northwoods.GoXam.Layout.GridLayout"/>
            that executes under <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/> that include <see cref="F:Northwoods.GoXam.Layout.LayoutChange.ViewportSizeChanged"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.DiagramEventArgs">
            <summary>
            This <c>RoutedEventArgs</c> class adds an optional <see cref="P:Northwoods.GoXam.DiagramEventArgs.Part"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramEventArgs.#ctor">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.DiagramEventArgs"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramEventArgs.#ctor(Northwoods.GoXam.Part)">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.DiagramEventArgs"/> that refers to a <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <param name="p">a <see cref="T:Northwoods.GoXam.Part"/></param>
        </member>
        <member name="M:Northwoods.GoXam.DiagramEventArgs.#ctor(Northwoods.GoXam.Part,System.Windows.FrameworkElement)">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.DiagramEventArgs"/> that refers to a <see cref="T:Northwoods.GoXam.Part"/>
            and a specific <c>FrameworkElement</c> that was the subject of the event.
            </summary>
            <param name="p">a <see cref="T:Northwoods.GoXam.Part"/></param>
            <param name="e">a <c>FrameworkElement</c></param>
        </member>
        <member name="P:Northwoods.GoXam.DiagramEventArgs.Part">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Part"/>
            that was acted upon and that is the subject of the event.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramEventArgs.Element">
            <summary>
            Gets or sets the specific <c>FrameworkElement</c>
            that was acted upon and that is the subject of the event.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Geo.LargestSizeKeepingAspectRatio(System.Windows.Size,System.Windows.Size)">
            <summary>
            Compute a <c>Size</c> that fits in <paramref name="target"/> while maintaining
            the aspect ratio given by <paramref name="aspect"/>.
            </summary>
            <param name="target"></param>
            <param name="aspect">if both width and height are zero or negative, assume 1x1</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetNearestIntersectionPoint(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Find the closest point of a rectangle to a given point that is on a line from that point.
            </summary>
            <param name="rect"></param>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with the rectangle; false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.NearestPointOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Return a point on a straight line segment that is closest to a given point.
            </summary>
            <param name="a">One end of the line.</param>
            <param name="b">The other end of the line.</param>
            <param name="p">The point to be closest to.</param>
            <param name="result">
            A <c>Point</c> that is on the finite length straight line segment from
            <paramref name="a"/> to <paramref name="b"/>
            </param>
            <returns>
            true if the point <paramref name="p"/> is on a perpendicular line to the line segment;
            false if the point <paramref name="p"/> is beyond either end of the line segment.
            When this returns false, the <paramref name="result"/> will be either
            <paramref name="a"/> or <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.NearestIntersectionOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Find the intersection point of the finite line segment A-B and the infinite line P-Q
            that is closest to point P.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="p"></param>
            <param name="q"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetAngle(System.Double,System.Double)">
            <summary>
            Return the angle of the line going from the origin to a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            an angle in degrees, with <c>0</c> along the positive X axis, and
            with <c>90.0</c> along the positive Y axis.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.NearestIntersectionOnEllipse(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.NearestIntersectionOnArc(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@,System.Double,System.Double)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1 within the area from startAngle through the sweepAngle.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.FindClosest(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point)">
            <summary>
            Returns the closest point to <paramref name="source"/> in <paramref name="points"/>.
            </summary>
            <param name="points">The list of points checking for distance to source.</param>
            <param name="source">The point we want to be closest to.</param>
            <returns>The closest point to <paramref name="source"/>.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.LineIntersectsWithSegment(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns true if line(line1, line2) intersects with line segment(seg1, seg2) and sets [intersection] to the point
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <param name="intersection"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetAngleFromX(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the positive angle with repect to center's x axis of [point]
            </summary>
            <param name="point"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.RotatePoint(System.Windows.Point,System.Double)">
            <summary>
            Rotates the point [p] about (0,0)
            </summary>
            <param name="p">The point to be rotated</param>
            <param name="angle">The angle to rotate the point in degrees (Counter-Clockwise is positive)</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.ScalePoint(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Scales the given point by scaleX, scaleY
            </summary>
            <param name="pt">The point to be scaled</param>
            <param name="scaleX">The amount to scale the point in the x direction</param>
            <param name="scaleY">The amount to scale the point in the y direction</param>
            <returns>The scaled point</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.TranslatePoint(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Translates the point by transX, transY
            </summary>
            <param name="pt">The point to be translated</param>
            <param name="transX">The amount to translate in the x direction</param>
            <param name="transY">The amount to translate in the y direction</param>
            <returns>The translated point</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.TranslatePoints(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Translates a collection of points by transX, transY
            </summary>
            <param name="pts">The collection to be translated</param>
            <param name="transX">The amount to translate in the x direction</param>
            <param name="transY">The amount to translate in the y direction</param>
            <returns>The translated collection</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetLineEllipseIntersections(System.Windows.Point,System.Windows.Point,System.Windows.Media.EllipseGeometry)">
            <summary>
            Returns all intersections between infinite line [line1-line2] and [ellipse] and returns them
            </summary>
            <param name="line1">First point on the infinite line</param>
            <param name="line2">Second point on the infinite line</param>
            <param name="ellipse">The ellipse we are checking for intersections with</param>
            <returns>A list of intersection points</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetLineArcSegmentIntersections(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Media.ArcSegment,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [line1-line2] and the ArcSegment and puts them in [result]
            </summary>
            <param name="line1">First point on the infinite line</param>
            <param name="line2">Second point on the infinite line</param>
            <param name="ellipseStartPoint">The start point of the arc segment</param>
            <param name="arcSeg">The arc segment to find intersections with</param>
            <param name="intersection">The list to return the intersections with</param>
            <returns>Returns true if their are any intersections; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetQuadBezierIntersectionsOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [l1-l2] and the QuadBezier and puts them in [result]
            </summary>
            <param name="s">Start point of the bezier curve</param>
            <param name="c1">First control point of the bezier curve</param>
            <param name="e">End point of the bezier curve</param>
            <param name="l1">First point of the infinite line</param>
            <param name="l2">Second point of the infinite line</param>
            <param name="epsilon">Accuracy tolerance</param>
            <param name="result">List of the intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetPolyLineSegIntersections(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Media.PointCollection,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections of infinite line [line1-line2] and the polyline defined by [start] and [points]
            </summary>
            <param name="line1">First point of the infinite line</param>
            <param name="line2">Second point of the infinite line</param>
            <param name="start">First point of the polyline</param>
            <param name="points">List of line segments</param>
            <param name="result">The list of intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetPolyBezierIntersections(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Media.PointCollection,System.Double,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [line1-line2] and the PolyBezier and puts them in [result]
            </summary>
            <param name="line1">First point of the infinite line</param>
            <param name="line2">Second point of the infinite line</param>
            <param name="start">First point of the PolyBezier</param>
            <param name="points">List of points in the PolyBezier</param>
            <param name="epsilon">Accuracy tolerance</param>
            <param name="result">The list of intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetPolyQuadBezierIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Media.PointCollection,System.Double,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [line1-line2] and the PolyBezier and puts them in [result]
            </summary>
            <param name="line1">First point of the infinite line</param>
            <param name="line2">Second point of the infinite line</param>
            <param name="start">First point of the PolyQuadBezier</param>
            <param name="points">List of points in the PolyQuadBezier</param>
            <param name="epsilon">Accuracy tolerance</param>
            <param name="result">The list of intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.InfiniteLineContainsPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns true if [point] is within [fuzz] pixels of the infinite line passing through [p1] and [p2]
            </summary>
            <param name="p1">Point 1 on the infinite line</param>
            <param name="p2">Point 2 on the infinite line</param>
            <param name="point">The point we're checking to be on the line</param>
            <param name="fuzz">The number of pixels away [point] can be from the line</param>
            <returns>True if [point] is on or within [fuzz] pixels of the line, false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetIntersectionsOnPathGeometry(System.Windows.Media.PathGeometry,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@,System.Boolean)">
            <summary>
            Returns a point on [path] that is the closest intersection of the path and the line formed by p1/p2
            </summary>
            <param name="path">The Path Geometry to find intersections with</param>
            <param name="p1">First point on the infinite line</param>
            <param name="p2">Second point on the infinite line</param>
            <param name="result">The list of intersection points</param>
            <param name="mustBeFilled">True if each figure must be filled to be included</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetIntersectionsOnGeometry(System.Windows.Media.Geometry,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [p1-p2] and [geom] and puts them in [result]
            </summary>
            <param name="geom">The geometry to find intersections with</param>
            <param name="p1">First point on the infinite line</param>
            <param name="p2">Second point on the infinite line</param>
            <param name="result">The list of intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetIntersectionsOnGeometry(System.Windows.Media.Geometry,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@,System.Boolean)">
            <summary>
            Returns all intersections between infinite line [p1-p2] and [geom] and puts them in [result]
            </summary>
            <param name="geom">The geometry to find intersections with</param>
            <param name="p1">First point on the infinite line</param>
            <param name="p2">Second point on the infinite line</param>
            <param name="result">The list of intersections</param>
            <param name="mustBeFilled">True if each figure must be filled to be included</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetIntersectionsOnRect(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Returns all intersections between infinite line [p1-p2] and [rect] and puts them in [result]
            </summary>
            <param name="rect">The Rect to check for intersections</param>
            <param name="p1">First point on the infinite line</param>
            <param name="p2">Second point on the infinite line</param>
            <param name="result">The list of intersections</param>
            <returns>True if intersections are found; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetCubedRoot(System.Double)">
            <summary>
            Gets the cubed root of [x]
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetRootsOfCubic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a list of the 3 roots of a cubic equation of the form at^3 + bt^2 + ct + d
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns>A list of the roots</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetIntersectionsOnBezier(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point}@)">
            <summary>
            Calculates all intersections between infinite line [p1,p2] and the cubic bezier curve [s,c1,c2,e]
            </summary>
            <param name="p1">First point on the infinite line</param>
            <param name="p2">Second point on the infinite line</param>
            <param name="s">The start point of the Bezier Curve</param>
            <param name="c1">The first control point of the Bezier Curve</param>
            <param name="c2">The second control point of the Bezier Curve</param>
            <param name="e">The end of the Bezier Curve</param>
            <param name="intersections">The list of intersections</param>
            <returns>True if there are any intersections; false otherwise</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GeometryContainsPoint(System.Windows.Point,System.Windows.Media.Geometry)">
            <summary>
            Returns true if [p1] lies inside [geom], false otherwise
            </summary>
            <param name="p1"></param>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.OnscreenElementContainsPoint(System.Windows.Point,System.Windows.FrameworkElement)">
            <summary>
            Returns true if [fe] contains [p]. [fe] must be onscreen.
            </summary>
            <param name="p">Point in [fe]'s coordinates</param>
            <param name="fe">The framework element to test</param>
            <returns>True if [fe] contains [p] else false</returns>
            <remarks>Silverlight's gives false negatives SOMETIMES so it is conclusive if true, not if false</remarks>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GeometryContainsPoint(System.Windows.Point,System.Windows.Media.Geometry,System.Boolean)">
            <summary>
            Count intersections on the ray from outside bounding box to p1. If odd, it's in, else it's out (Raycasting)
            </summary>
            <param name="p1"></param>
            <param name="geom"></param>
            <param name="overrideNonZero"></param>
            <returns>True if p1 is in the geometry</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GeometryContainsPointRaycasting(System.Windows.Point,System.Windows.Media.Geometry)">
            <summary>
            Determines using raycasting whether or not [p1] lies inside [geom]
            </summary>
            <param name="p1"></param>
            <param name="geom"></param>
            <returns>True if p1 is in the geometry</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.ApproximateBezierElevation(System.Windows.Point[],System.Double)">
            <summary>
            Elevate the given Bezier Curve up to degree [epsilon]
            </summary>
            <param name="controlPoints">An array of control points that define a Bezier Curve</param>
            <param name="epsilon">The degree to raise the bezier to</param>
            <returns>A list of points that define an elevated Bezier Curve</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.SubdivideBezier(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Breaks the bezier up into line segments that are a maximum of sqrt(epsilon) away from the original curve
            </summary>
            <param name="p1">Start point of the bezier curve</param>
            <param name="p2">First control point of the bezier curve</param>
            <param name="p3">Second control point of the bezier curve</param>
            <param name="p4">End point of the bezier curve</param>
            <param name="result">The list of line segments</param>
            <param name="epsilon">The square of the maximum amount of deviation from the original curve</param>
        </member>
        <member name="M:Northwoods.GoXam.Geo.ApproximateBezier(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns a list of points that approximate bezier [p1-p4] with maximum error of epsilon
            </summary>
            <param name="p1">Start point of the bezier curve</param>
            <param name="p2">First control point of the bezier curve</param>
            <param name="p3">Second control point of the bezier curve</param>
            <param name="p4">End point of the bezier curve</param>
            <param name="epsilon">The maximum amount of error</param>
            <returns>A list of points that approximate the bezier curve</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.ApproximateArcSegment(System.Windows.Media.ArcSegment,System.Windows.Point,System.Double)">
            <summary>
            Returns a piecewise linear approximation of the given arcsegment, stepping by epsilon
            </summary>
            <param name="arcSeg">The arc segment to approximate</param>
            <param name="ellipseStartPoint">The point to start the arc segment at</param>
            <param name="epsilon">The x distance between each point</param>
            <returns>The list of points that approximate the arc segment</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.GetKeyPointsInPathGeometry(System.Windows.Media.PathGeometry)">
            <summary>
            Returns a list of points that approximate the pathgeometry [pg]
            </summary>
            <param name="pg">The path geometry to approximate</param>
            <returns>A list of points that approximate the path geometry</returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.FigureContainsPointWinding(System.Windows.Point,System.Windows.Point[],System.Windows.Rect)">
            <summary>
            Determines using the Winding Number method whether [p1] is in the figure defined by [points]
            </summary>
            <param name="p1"></param>
            <param name="points"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Geo.Invert(System.Windows.Media.Matrix@)">
            <summary>
            Inverts the square Matrix [matrix]
            </summary>
            <param name="matrix">The matrix to invert</param>
        </member>
        <member name="T:Northwoods.GoXam.LayoutManager">
            <summary>
            This class is responsible for automatically positioning all nodes in the diagram.
            </summary>
            <remarks>
            <para>
            You can explicitly re-layout the whole diagram by calling <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram"/>.
            However, it is more common to let this <c>LayoutManager</c> decide when layouts should happen.
            You can control this by setting the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/> property
            on each kind of layout.
            By default each layout has its <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/> set to invalidate
            its layout whenever a node or a link or a group membership is added or removed, but
            not when a node changes size.
            Once a <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/> has been invalidated, this <c>LayoutManager</c>
            will eventually call its <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> method.
            </para>
            <para>
            Each <see cref="T:Northwoods.GoXam.Node"/> and <see cref="T:Northwoods.GoXam.Link"/> has a single <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> that
            may position the node and route the link.  The <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> is found by
            proceeding up the chain of containing <see cref="T:Northwoods.GoXam.Group"/>s until it finds one with a value
            for <see cref="P:Northwoods.GoXam.Group.Layout"/>, or it ultimately uses the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.
            </para>
            <para>
            The <see cref="M:Northwoods.GoXam.LayoutManager.CanLayoutPart(Northwoods.GoXam.Part,Northwoods.GoXam.Layout.IDiagramLayout)"/> predicate decides whether a particular part should be laid
            out by a given layout.  You can set the <see cref="P:Northwoods.GoXam.Part.LayoutId"/> attached property to
            be the string "None" if you do not want it to be laid out.
            </para>
            <para>
            Each <see cref="T:Northwoods.GoXam.Diagram"/> has an instance of this class as its
            <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/> property.
            If you want to customize the standard behavior, you can easily override any of its methods
            and substitute an instance of your custom layout manager class for your diagram.
            <code>
            public class CustomLayoutManager : LayoutManager {
              protected override bool CanLayoutPart(Part p, IDiagramLayout lay) {
                return ...;  // decide dynamically which Nodes and Links should be considered for each layout
              }
            }
            </code>
            and install it with either XAML:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.LayoutManager&gt;
                  &lt;local:CustomLayoutManager /&gt;
                &lt;/go:Diagram.LayoutManager&gt;
              &lt;/go:Diagram&gt;
            </code>
            or in the initialization of your Diagram control:
            <code>
              myDiagram.LayoutManager = new CustomLayoutManager();
            </code>
            </para>
            <para>
            Automatic layout in GoXam includes support for animated movement of
            nodes to their intended destinations.
            Such support is not limited to the execution of <see cref="M:Northwoods.GoXam.LayoutManager.PerformLayout"/> --
            you can call <see cref="M:Northwoods.GoXam.LayoutManager.MoveAnimated(Northwoods.GoXam.Node,System.Windows.Point)"/> at any time.
            For example, the <see cref="T:Northwoods.GoXam.Node"/> method <see cref="M:Northwoods.GoXam.Node.Move(System.Windows.Point,System.Boolean)"/> calls <see cref="M:Northwoods.GoXam.LayoutManager.MoveAnimated(Northwoods.GoXam.Node,System.Windows.Point)"/>.
            </para>
            <para>
            Setting the <see cref="P:Northwoods.GoXam.LayoutManager.Animated"/> property to false disables all animation.
            Set the <see cref="P:Northwoods.GoXam.LayoutManager.AnimationTime"/> property to control how quickly
            the animation completes.
            For nodes that do not have an initial location (because the value is <c>NaN,NaN</c>),
            you can specify the point from where they appear to come
            by setting the <see cref="P:Northwoods.GoXam.LayoutManager.DefaultLocation"/>.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.#ctor">
            <summary>
            The constructor for the standard layout manager that is the initial value of
            <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.LayoutDiagram">
            <summary>
            Request a re-layout of all of the nodes and links in this diagram.
            </summary>
            <remarks>
            This first marks each <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> in the diagram as invalid
            and then schedules a layout to occur soon.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.LayoutDiagram(Northwoods.GoXam.LayoutInitial,System.Boolean)">
            <summary>
            Request a re-layout of all invalidated layouts in this diagram.
            </summary>
            <param name="init">
            If the value is <see cref="F:Northwoods.GoXam.LayoutInitial.InvalidateAll"/>,
            all <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>s will be declared invalid, and they will all be performed
            at the time given by the <paramref name="immediate"/> argument.
            If the value is <see cref="F:Northwoods.GoXam.LayoutInitial.InvalidateIfNodesUnlocated"/>,
            <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>s will be declared invalid only if they are responsible
            for <see cref="T:Northwoods.GoXam.Node"/>s that do not have a <see cref="P:Northwoods.GoXam.Node.Location"/>,
            because their X and/or Y values are <c>Double.NaN</c>.
            If the value is <see cref="F:Northwoods.GoXam.LayoutInitial.ValidateAll"/>,
            all <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>s will be declared valid, and no layout will occur
            until after something else happens to invalidate a layout.
            If the value is <see cref="F:Northwoods.GoXam.LayoutInitial.None"/>,
            no layout validity is changed -- any invalid layouts will be performed at the specified time.
            </param>
            <param name="immediate">
            If true this method performs an immediate layout.
            If false this method schedules a layout to occur soon.
            </param>
            <remarks>
            The value for the <paramref name="init"/> parameter usually comes from the
            <see cref="P:Northwoods.GoXam.LayoutManager.Initial"/> property.
            This method changes the validity of layouts by setting the <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LayoutManager.InitialProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.LayoutManager.Initial"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.PerformLayout">
            <summary>
            This method is called asynchronously in order to layout a <see cref="P:Northwoods.GoXam.LayoutManager.Diagram"/>.
            </summary>
            <remarks>
            <para>
            This calls <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> on each low-level <see cref="T:Northwoods.GoXam.Group"/>
            that has a <see cref="P:Northwoods.GoXam.Group.Layout"/>, and proceeds up the chains of containing
            groups until it finally does a layout on the <see cref="P:Northwoods.GoXam.LayoutManager.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.
            For a <see cref="T:Northwoods.GoXam.Group"/> that does not have a <see cref="P:Northwoods.GoXam.Group.Layout"/>, a layout
            ignores the group itself but includes the group's members as if the group did not exist.
            If <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> is true for a layout, this does not call its
            <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> method.
            </para>
            <para>
            The layout ignores invisible elements.
            A <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/> is included in a layout only if <see cref="M:Northwoods.GoXam.LayoutManager.CanLayoutPart(Northwoods.GoXam.Part,Northwoods.GoXam.Layout.IDiagramLayout)"/>
            returns true.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.CanLayoutPart(Northwoods.GoXam.Part,Northwoods.GoXam.Layout.IDiagramLayout)">
            <summary>
            This predicate decides whether a <see cref="T:Northwoods.GoXam.Part"/> should participate in an
            <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>'s layout.
            </summary>
            <param name="p">a <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/></param>
            <param name="lay">the layout that might be responsible for positioning the part</param>
            <returns>
            True if the part is visible and if the part's <see cref="P:Northwoods.GoXam.Part.LayoutId"/> is not "None" and is
            either "All" or the same value as the layout's <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.Id"/>.
            False for all <see cref="T:Northwoods.GoXam.Adornment"/>s and for all <see cref="T:Northwoods.GoXam.Node"/>s that are
            <see cref="P:Northwoods.GoXam.Node.IsLinkLabel"/>, and for all <see cref="T:Northwoods.GoXam.Group"/>s that have no
            <see cref="P:Northwoods.GoXam.Group.Layout"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.InvalidateLayout(Northwoods.GoXam.Part,Northwoods.GoXam.Layout.LayoutChange)">
            <summary>
            Declare that the <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> including a given <see cref="T:Northwoods.GoXam.Part"/>
            is now invalid and may need to be performed again soon.
            </summary>
            <param name="p">must be a <see cref="T:Northwoods.GoXam.Part"/></param>
            <param name="change">
            a hint on the reason for the need for a new layout;
            this is used to decide whether a layout is really needed.
            </param>
            <remarks>
            <para>
            This is called by the diagram's <see cref="T:Northwoods.GoXam.PartManager"/> each time
            a node or link or group-membership is added or removed.
            It calls <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> to let the part's
            responsible <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> know that there's been a change
            and that the layout may need to be performed again, depending on
            the layout's <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>.
            </para>
            <para>
            This method ignores parts in temporary layers.
            This method also does nothing if <see cref="P:Northwoods.GoXam.LayoutManager.SkipsInvalidate"/> is true
            or if the <see cref="P:Northwoods.GoXam.Diagram.Model"/>'s
            <see cref="P:Northwoods.GoXam.Model.IDiagramModel.SkipsUndoManager"/> property is true.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LayoutManager.AnimatedProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.LayoutManager.Animated"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LayoutManager.AnimationTimeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.LayoutManager.AnimationTime"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LayoutManager.DefaultLocationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.LayoutManager.DefaultLocation"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LayoutManager.MoveAnimated(Northwoods.GoXam.Node,System.Windows.Point)">
            <summary>
            This basically just sets the value of <see cref="P:Northwoods.GoXam.Node.Position"/>,
            but with animated movement.
            </summary>
            <param name="node"></param>
            <param name="newpos">a new position in model coordinates</param>
            <remarks>
            There is no animation if <see cref="P:Northwoods.GoXam.LayoutManager.Animated"/> is false,
            if the <see cref="P:Northwoods.GoXam.LayoutManager.AnimationTime"/> is very small, or
            if the original position and the new position are very near to each other
            or offscreen.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this <see cref="T:Northwoods.GoXam.LayoutManager"/> performs automatic layouts.
            </summary>
            <value>
            This value is automatically set by the <see cref="P:Northwoods.GoXam.Diagram.LayoutManager"/> setter.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.Initial">
            <summary>
            Gets or sets under what conditions an "initialization" or "reset" of the model should cause layouts to be invalidated.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.LayoutInitial.InvalidateIfNodesUnlocated"/>.
            </value>
            <remarks>
            The diagram will call <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram(Northwoods.GoXam.LayoutInitial,System.Boolean)"/> with this value
            when there has been a significant change to the whole diagram, such as:
            <list>
            <item>the diagram's model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> (or other source) has been replaced</item>
            <item>one of the diagram's model's "Path..." properties has changed</item>
            <item>the diagram's <see cref="P:Northwoods.GoXam.Diagram.Model"/> has been replaced</item>
            <item>one or more of the diagram's node <c>DataTemplate</c>s have been replaced</item>
            </list>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.SkipsInvalidate">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.LayoutManager.InvalidateLayout(Northwoods.GoXam.Part,Northwoods.GoXam.Layout.LayoutChange)"/> should do nothing when a part is added/removed/changed.
            </summary>
            <value>
            By default this is false.
            </value>
            <remarks>
            This property does not affect the behavior of <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram(Northwoods.GoXam.LayoutInitial,System.Boolean)"/>
            in determining the value of <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> for all layouts in this diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.Animated">
            <summary>
            Gets or sets whether there should be animated motion moving the nodes
            from their current positions to their laid out positions.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.LayoutManager.AnimationTime"/>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.AnimationTime">
            <summary>
            Gets or sets the time in milliseconds that any animation should take.
            </summary>
            <value>
            The default value is 250 (a quarter second).
            </value>
            <seealso cref="P:Northwoods.GoXam.LayoutManager.Animated"/>
        </member>
        <member name="P:Northwoods.GoXam.LayoutManager.DefaultLocation">
            <summary>
            Gets or sets the location from which unpositioned nodes appear
            at the start of the animation.
            </summary>
            <value>
            The default value is the origin <c>Point</c>(0, 0).
            </value>
            <remarks>
            Animated movement is fine for nodes that have a location before the layout,
            but for those nodes that did not have a location, pretend that they started
            at the <c>Point</c> given by this property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.LayoutInitial">
            <summary>
            This enumeration controls the initial validity of <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>s
            managed by <see cref="T:Northwoods.GoXam.LayoutManager"/>, as the value of <see cref="P:Northwoods.GoXam.LayoutManager.Initial"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoXam.LayoutManager.LayoutDiagram(Northwoods.GoXam.LayoutInitial,System.Boolean)"/> describes some of the
            circumstances in which a diagram has had changes which would suggest invalidating (or validating)
            all of the layouts in a diagram.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LayoutInitial.None">
            <summary>
            Do not change the value of <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> when the diagram is "reset".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LayoutInitial.InvalidateAll">
            <summary>
            Set all layouts to be invalid when the diagram is "reset"; all layouts will be performed soon.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LayoutInitial.InvalidateIfNodesUnlocated">
            <summary>
            Set all layouts to be valid when the diagram is "reset", except declare invalid those layouts that have
            nodes without a <see cref="P:Northwoods.GoXam.Node.Location"/> (i.e. one or both of the X and Y values are <c>NaN</c>).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LayoutInitial.ValidateAll">
            <summary>
            Set all layouts to be valid when the diagram is "reset"; no layout is performed until
            some other changes cause a layout to become invalid.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GridLayout">
            <summary>
            This simple layout places all of the nodes in a grid-like arrangement, ordered,
            and wrapping as needed.
            </summary>
            <remarks>
            <para>
            By default this layout will sort all of the nodes alphabetically (ignoring case)
            and position them left-to-right until they don't fit in the current row,
            at which time it starts a new row.
            There is a uniform cell size equal to the maximum node width (plus spacing width)
            and the maximum node height (plus spacing height).
            At least one node is placed in each row, even if the node by itself is wider
            than the wrapping width.
            The wrapping width is given by the width in model coordinates of the diagram's
            panel's viewport width.
            </para>
            <para>
            You can specify values for the <see cref="P:Northwoods.GoXam.Layout.GridLayout.CellSize"/> <c>Width</c> and/or <c>Height</c>.
            If a node is wider than the cell size, it spans more than one cell in the row.
            You can also specify a value for the <see cref="P:Northwoods.GoXam.Layout.GridLayout.WrappingWidth"/>,
            which will be used instead of the diagram's viewport width.
            </para>
            <para>
            This layout is sufficiently simple that it does not use a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3"/>.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.DiagramLayout">
            <summary>
            <c>DiagramLayout</c> is the base class for all of the predefined specific layout implementations.
            </summary>
            <remarks>
            <para>
            This provides a rudimentary default layout that will position all of the nodes that have no position
            (i.e. the <see cref="P:Northwoods.GoXam.Node.Location"/> is <c>NaN, NaN</c>).  Nodes that already have a position are ignored.
            The layout behavior may be improved in the future.
            </para>
            <para>
            The <see cref="T:Northwoods.GoXam.LayoutManager"/> will call <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> to decide
            which <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s will be passed to <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/>.
            <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> looks at this layout's <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Id"/> and the part's
            <see cref="P:Northwoods.GoXam.Part.LayoutId"/> to see if they match, among other criteria.
            </para>
            <para>
            As changes occur to the diagram, such as the addition of a <see cref="T:Northwoods.GoXam.Node"/>
            or the removal of a <see cref="T:Northwoods.GoXam.Link"/> or the change in size of a <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Group"/>,
            the <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> method will be called.
            Depending on the kind of change and on the value of <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>,
            the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> property may be set to false.
            At a later time, such as at the end of a transaction, the <see cref="T:Northwoods.GoXam.LayoutManager"/>
            will call <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to make the layout valid again.
            </para>
            <para>
            To implement your own custom layouts, you can inherit from either this class or from
            one of the other predefined layout classes, overriding the <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> method.
            You can call the <see cref="M:Northwoods.GoXam.Node.Move(System.Windows.Point,System.Boolean)"/> method to re-position a node, including whole groups,
            possibly with animation.
            Install the layout as the value of <see cref="P:Northwoods.GoXam.Diagram.Layout"/>
            or <see cref="P:Northwoods.GoXam.Group.Layout"/>.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.IDiagramLayout">
            <summary>
            This interface specifies the methods and properties that the <see cref="T:Northwoods.GoXam.LayoutManager"/>
            of the <see cref="T:Northwoods.GoXam.Diagram"/> uses to perform the positioning and routing
            of all of the nodes and links in the diagram.
            </summary>
            <remarks>
            All existing layouts are actually subclasses of the class <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.IDiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)">
            <summary>
            Declare that this layout might no longer be valid, depending on the reason for the change.
            </summary>
            <param name="reason">
            a <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> hint describing what change may have made the layout invalid
            </param>
            <param name="part">
            an optional <see cref="T:Northwoods.GoXam.Part"/> that has changed
            </param>
            <remarks>
            Depending on the arguments and on the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>,
            this should set <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> to false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.IDiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)">
            <summary>
            Decide whether a given <see cref="T:Northwoods.GoXam.Part"/> should participate in this layout.
            </summary>
            <param name="part"></param>
            <returns>
            Typically this should return false if the part is not visible,
            if the part is in a temporary <see cref="T:Northwoods.GoXam.Layer"/>,
            or if the part's <see cref="P:Northwoods.GoXam.Part.LayoutId"/> is "None".
            This should return true if the part's <see cref="P:Northwoods.GoXam.Part.LayoutId"/> is "All" or
            if it matches the <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.Id"/> of this layout.
            </returns>
            <remarks>
            The <see cref="T:Northwoods.GoXam.LayoutManager"/> will use this predicate to decide which nodes and links
            to pass to <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Actually perform the layout computations--positioning the nodes and routing the links.
            </summary>
            <param name="nodes">the <see cref="T:Northwoods.GoXam.Node"/>s to operate on</param>
            <param name="links">the <see cref="T:Northwoods.GoXam.Link"/>s to operate on</param>
        </member>
        <member name="P:Northwoods.GoXam.Layout.IDiagramLayout.Diagram">
            <summary>
            Gets or sets a reference to the owner <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.IDiagramLayout.Group">
            <summary>
            Gets or sets a reference to the owner <see cref="T:Northwoods.GoXam.Group"/>, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.IDiagramLayout.Id">
            <summary>
            Gets or sets an identifier for a particular layout.
            </summary>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> to decide
            whether a part should participate in this layout, normally based on the
            part's <see cref="P:Northwoods.GoXam.Part.LayoutId"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout">
            <summary>
            Gets or sets whether this layout is valid; if not, the <see cref="T:Northwoods.GoXam.LayoutManager"/>
            will call <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> sometime in order to try to make the layout valid.
            </summary>
            <remarks>
            As parts are added, modified, or removed, or as layouts are replaced,
            <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> will be called, and depending on the conditions
            will set this property to false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/> that is invalidated
            only under the <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Standard"/> conditions.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.#ctor(Northwoods.GoXam.Layout.DiagramLayout)">
            <summary>
            Help making a copy of a <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>.
            </summary>
            <param name="layout"></param>
            <remarks>
            This is just called by the copy-constructors of classes that inherit from this one.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.DiagramLayout.IdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Id"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.InvalidateLayout">
            <summary>
            Set the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> property to false, and
            ask the diagram's <see cref="T:Northwoods.GoXam.LayoutManager"/> to perform layouts in the near future.
            </summary>
            <remarks>
            This is typically called when a layout property value has changed.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.DiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)">
            <summary>
            Declare that this layout might no longer be valid, depending on the change and the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>.
            </summary>
            <param name="reason">
            A <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> hint describing what change may have made the layout invalid.
            If the value is <see cref="F:Northwoods.GoXam.Layout.LayoutChange.All"/>, <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> will be set to false unconditionally.
            </param>
            <param name="part">
            the <see cref="T:Northwoods.GoXam.Part"/> that has changed
            </param>
            <remarks>
            This method may set <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> to false, if the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/> are met.
            This method does not request a new layout -- call <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.InvalidateLayout"/> if
            you want to unconditionally set <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> to false and ask the
            <see cref="T:Northwoods.GoXam.LayoutManager"/> to schedule perform layouts that are invalid.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.DiagramLayout.InvalidateLayout"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)">
            <summary>
            Decide whether a given <see cref="T:Northwoods.GoXam.Part"/> should participate in this layout.
            </summary>
            <param name="part"></param>
            <returns>
            Typically this should return false if the part is not visible,
            if the part is in a temporary <see cref="T:Northwoods.GoXam.Layer"/>,
            or if the part's <see cref="P:Northwoods.GoXam.Part.LayoutId"/> is "None".
            This should return true if the part's <c>LayoutId</c> is "All" or
            if it matches the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Id"/> of this layout.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.DiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Position all nodes that do not have an assigned <see cref="P:Northwoods.GoXam.Node.Location"/>
            in the manner of a simple rectangular array.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <remarks>
            You can override this method to do whatever node positioning and link routing that you wish.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.Diagram">
            <summary>
            Gets or sets a reference to the owner <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
            <value>
            The default value is null, but it is set automatically by the
            <see cref="P:Northwoods.GoXam.Diagram.Layout"/> and
            <see cref="P:Northwoods.GoXam.Group.Layout"/> property setters.
            You should not need to set this property.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.Group">
            <summary>
            Gets or sets a reference to the owner <see cref="T:Northwoods.GoXam.Group"/>, if any.
            </summary>
            <value>
            The default value is null, but it is set automatically by the
            <see cref="P:Northwoods.GoXam.Diagram.Layout"/> and
            <see cref="P:Northwoods.GoXam.Group.Layout"/> property setters;
            the former sets this property to null.
            You should not need to set this property.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.Id">
            <summary>
            Gets or sets an identifier for a particular layout.
            </summary>
            <value>
            The default value is the empty string.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> to decide
            whether a part should participate in this layout.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Part.LayoutId"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout">
            <summary>
            Gets or sets whether this layout is valid; if not, the <see cref="T:Northwoods.GoXam.LayoutManager"/>
            will call <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> sometime in order to make sure the layout is valid.
            </summary>
            <remarks>
            This property simply holds the validity state --
            changing the value does not request the performance of the layout any time soon.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.DiagramLayout.InvalidateLayout"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> conditions for which
            <see cref="M:Northwoods.GoXam.Layout.DiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> will set <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ValidLayout"/> to false.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Standard"/>,
            which includes all <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Added"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Removed"/> flags
            and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.DiagramLayoutChanged"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.GroupLayoutChanged"/>.
            </value>
            <remarks>
            <para>
            In XAML, you can combine <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> enum values:
            <code>&lt;go:TreeLayout Conditions="NodeAdded LinkAdded" ... /&gt;</code>
            </para>
            <para>
            Changing this value does not invalidate this layout,
            but will cause the next layout to be considered an "initial" one.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin">
            <summary>
            Gets or sets the point of the top-left node.
            </summary>
            <value>
            The default value is the Point(0,0).
            </value>
            <remarks>
            Some kinds of layout may ignore this property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GridLayout.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.Layout.GridLayout"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GridLayout.#ctor(Northwoods.GoXam.Layout.GridLayout)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.GoXam.Layout.GridLayout"/>, copying most of the important properties.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GridLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Position all nodes in the manner of a simple rectangular array.
            </summary>
            <param name="nodes"></param>
            <param name="links">these are ignored</param>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.WrappingWidthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.WrappingWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.WrappingColumnProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.WrappingColumn"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.CellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.CellSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.SpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Spacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.AlignmentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Alignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.ArrangementProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Arrangement"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.ComparerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Comparer"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridLayout.SortingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Sorting"/> dependency property.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.WrappingWidth">
            <summary>
            Gets or sets the wrapping width.
            </summary>
            <value>
            The default value is <c>Double.NaN</c>, meaning to use the
            width of the diagram's panel's viewport.
            Any real value must be larger than zero.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.WrappingColumn">
            <summary>
            Gets or sets the maximum number of columns.
            </summary>
            <value>
            The default value is zero, meaning not to limit the number of columns.
            1 is a common value.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.CellSize">
            <summary>
            Gets or sets the minimum node size by which each node is positioned in the grid.
            </summary>
            <value>
            The default value is NaN x NaN.
            The units are in model coordinates.
            When the width is <c>Double.NaN</c>,
            the <see cref="P:Northwoods.GoXam.Layout.GridLayout.ActualCellSize"/> uses the maximum of all node widths
            plus the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Spacing"/> width.
            When the height is <c>Double.NaN</c>,
            the <see cref="P:Northwoods.GoXam.Layout.GridLayout.ActualCellSize"/> uses the maximum of all node heights,
            plus the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Spacing"/> height.
            </value>
            <remarks>
            When the cell size is smaller than a node, the node will occupy more than one cell.
            This allows nodes to be positioned closer to each other, but then variations in node
            sizes may cause them not to be aligned in perfect rows or columns.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.ActualCellSize">
            <summary>
            Gets the actual cell size used by the grid.
            </summary>
            <value>
            This is set by each layout, as computed by taking the value of
            <see cref="P:Northwoods.GoXam.Layout.GridLayout.CellSize"/> and perhaps considering the nodes being laid out,
            and adding the <see cref="P:Northwoods.GoXam.Layout.GridLayout.Spacing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.Spacing">
            <summary>
            Gets or sets the minimum horizontal and vertical space between nodes.
            </summary>
            <value>
            The default value is 10x10.
            The units are in model coordinates.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.Alignment">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoXam.Node.Location"/> or the <see cref="P:Northwoods.GoXam.Node.Position"/> should be used
            to arrange each node.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.GridAlignment.Location"/> -- the <see cref="P:Northwoods.GoXam.Node.Location"/>s will be aligned in a grid.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.Arrangement">
            <summary>
            Gets or sets how to arrange the nodes.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.GridArrangement.LeftToRight"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.Comparer">
            <summary>
            Gets or sets the comparison function used to sort the nodes.
            </summary>
            <value>
            The default value is a case-insensitive alphabetic comparison
            using the <see cref="P:Northwoods.GoXam.Part.Text"/> (attached) property of each node.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GridLayout.Sorting">
            <summary>
            Gets or sets what order to place the nodes.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.GridSorting.Ascending"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GridAlignment">
            <summary>
            This enumeration specifies whether to position each node by
            its <see cref="P:Northwoods.GoXam.Node.Position"/> or by its <see cref="P:Northwoods.GoXam.Node.Location"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridAlignment.Position">
            <summary>
            Position the top-left corner of each node at a grid point.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridAlignment.Location">
            <summary>
            Position the node's <see cref="P:Northwoods.GoXam.Node.Location"/> at a grid point.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GridArrangement">
            <summary>
            This enumeration specifies how to fill each row.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridArrangement.LeftToRight">
            <summary>
            Fill each row from left to right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridArrangement.RightToLeft">
            <summary>
            Fill each row from right to left.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GridSorting">
            <summary>
            This enumeration specifies whether to sort all of the nodes,
            and in what order to position them.
            </summary>
            <remarks>
            The default <see cref="P:Northwoods.GoXam.Layout.GridLayout.Comparer"/> does a case-insensitive comparison
            of the value of each node's <see cref="P:Northwoods.GoXam.Part.Text"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridSorting.Forward">
            <summary>
            Lay out each item in the order in which the nodes were given.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridSorting.Reverse">
            <summary>
            Lay out each item in reverse order from which the nodes were given.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridSorting.Ascending">
            <summary>
            Lay out each item according to the sort order given by <see cref="P:Northwoods.GoXam.Layout.GridLayout.Comparer"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.GridSorting.Descending">
            <summary>
            Lay out each item in reverse sort order given by <see cref="P:Northwoods.GoXam.Layout.GridLayout.Comparer"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.ForceDirectedLayout">
            <summary>
            ForceDirected provides an auto-layout algorithm for
            graphs which utilizes a force-directed method.
            </summary>
            <remarks>
            <para>
            The graph is viewed as
            a system of bodies with forces acting between the bodies.  The algorithm
            seeks a configuration of the bodies with locally minimal energy, i.e.,
            a position such that the sum of the forces on each body is zero.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.#ctor">
            <summary>
            Constucts a ForceDirected layout class with null network, document.
            PerformLayout() will be a no-op until the document has been set.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.#ctor(Northwoods.GoXam.Layout.ForceDirectedLayout)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedLayout"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.NetworkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/> with the given nodes and links.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <returns>a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/></returns>
            <remarks>
            The network does not include nodes whose category is "Comment" unless <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Comments"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Performs force-directed auto-layout.
            </summary>
            <remarks>
            This method can be overridden to customize the layout algorithm,
            but care should be taken to ensure that each node and link in the
            input network are properly initialized and terminated.
            If <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/> is null, this calls <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to allocate
            and initialize a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/> with the graph that is in the <see cref="T:Northwoods.GoXam.Diagram"/>.
            After all of the computations are completed, this calls
            <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutNodesAndLinks"/> in order to commit the positions
            of all of the nodes.
            No undo/redo transaction is started or finished by this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.NeedsClusterLayout">
            <summary>
            Determines whether a clustering layout should be done before the regular force-directed layout.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            A clustering layout is useful when the graph is somewhat tree-like.
            </para>
            <para>
            For compatibility with older behavior,
            this does not examine the graph structure, but only at the positions of the nodes.
            By default this looks at the first few nodes in the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/>.
            If several of their <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/> intersect,
            this will return true; otherwise this will return false.
            Hence for a network whose nodes are already "spread out",
            no cluster layout will occur.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ComputeClusterLayoutIterations(System.Int32,System.Int32)">
            <summary>
            Determine how many additional force-directed layout iterations should occur for this clustered network.
            </summary>
            <param name="level">the recursion depth for clustered layout</param>
            <param name="maxiter"></param>
            <returns>a non-negative number that will be temporarily added to <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.MaxIterations"/></returns>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangementSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangementSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangesToOriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangesToOrigin"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangeConnectedGraphs(System.Collections.Generic.IEnumerator{Northwoods.GoXam.Layout.ForceDirectedNetwork},Northwoods.GoXam.Layout.ForceDirectedNetwork)">
            <summary>
            During a clustered layout, position each separate graph network so that they do not overlap each other.
            </summary>
            <param name="subnets">an <c>IEnumerator</c> iterating over a number of <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/>,
            each containing a connected graph; this is the result of calling <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.SplitIntoSubNetworks``1"/></param>
            <param name="singletons">a <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/> containing only unconnected individual nodes</param>
            <remarks>
            <para>
            There may be separate component graphs (without any links between them) within the original network.
            The <paramref name="subnets"/> enumerator will iterate over a number of <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/>s,
            each containing a connected (sub)graph.
            If the original network is connected, i.e. if there is at least one path of
            undirected links from each node in the original <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/> to every other node,
            then there will be only a single <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/>
            for the enumerator, and the <paramref name="singletons"/> network will be empty.
            </para>
            <para>
            This method places each separately-laid-out graph in different non-overlapping locations.
            By default this ignores <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.IsFixed(Northwoods.GoXam.Layout.ForceDirectedVertex)"/>, because it may move "fixed" nodes to
            ensure disconnected subgraphs do not overlap.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.AddComments(Northwoods.GoXam.Layout.ForceDirectedVertex)">
            <summary>
            Find associated objects to be positioned along with the
            <see cref="T:Northwoods.GoXam.Layout.ForceDirectedVertex"/>.<see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/>.
            </summary>
            <param name="v"></param>
            <remarks>
            This method is called for each node in the network, when <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Comments"/> is true.
            The standard behavior is to look for <see cref="T:Northwoods.GoXam.Node"/> objects
            whose category is "Comment" and that refer to
            the force-directed vertex's <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/>.
            You may want to override this method in order to customize how
            any associated objects are found and how a new <see cref="T:Northwoods.GoXam.Layout.ForceDirectedVertex"/>
            and <see cref="T:Northwoods.GoXam.Layout.ForceDirectedEdge"/>
            are added to the network to represent the balloon comment.
            This method sets the new node's <see cref="P:Northwoods.GoXam.Layout.ForceDirectedVertex.Charge"/>
            to the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentElectricalCharge"/>, and sets the new link's
            <see cref="P:Northwoods.GoXam.Layout.ForceDirectedEdge.Length"/> to the value of
            <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentSpringLength"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GetNodeDistance(Northwoods.GoXam.Layout.ForceDirectedVertex,Northwoods.GoXam.Layout.ForceDirectedVertex)">
            <summary>
            Returns the distance between two nodes.
            The default implementation considers the shortest distance between the two nodes.
            If the nodes correspond to top-level Go objects, the width and height of the
            GoObject is factored into the distance between the nodes.  If the nodes do not
            correspond to top-level Go objects, then the nodes implicitly have a width and
            height of zero, and the distance is calculated.
            </summary>
            <param name="vertexA"></param>
            <param name="vertexB"></param>
            <returns>Returns the distance between two nodes.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringStiffness(Northwoods.GoXam.Layout.ForceDirectedEdge)">
            <summary>
            Returns the stiffness of the spring representing the ForceDirectedEdge link.  The
            to and from nodes of link L are acted upon by a force of magnitude
            <c>SpringStiffness(L) * (GetNodeDistance(L.from, L.to) - SpringLength(L))</c>.
            </summary>
            <param name="e"></param>
            <returns>Returns the stiffness of the spring representing link,
            normally the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringStiffness"/>,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedEdge.Stiffness"/> had already been set,
            in which case it just returns that value.</returns>
            <remarks>
            Very small positive numbers are normal.
            Values larger than that tend to cause "jittery" behavior that makes it hard or impossible to settle down,
            since no stable state can be found.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringLength(Northwoods.GoXam.Layout.ForceDirectedEdge)">
            <summary>
            Returns the length of the spring representing the ForceDirectedEdge link.  The
            to and from nodes of a link L are acted upon by a force of magnitude
            <c>SpringStiffness(L) * (GetNodeDistance(L.from, L.to) - SpringLength(L))</c>.
            </summary>
            <param name="e"></param>
            <returns>Returns the length of the spring representing link, normally the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringLength"/>,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedEdge.Length"/> had already been set,
            in which case it just returns that value.</returns>
            <remarks>
            If your nodes are large, you may need to increase this value,
            so that many nodes aren't forced to be packed in close to each other.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalCharge(Northwoods.GoXam.Layout.ForceDirectedVertex)">
            <summary>
            Returns the charge of the point representing the ForceDirectedVertex node.  A node L
            and a node V are acted upon by a force of magnitude
             <c>(ElectricalCharge(L) * ElectricalCharge(V)) / (GetNodeDistance(L,V) * GetNodeDistance(L,V))</c>.
            A node L is acted upon by forces in the X and Y directions of magnitude
             <c>ElectricalFieldX(L.position) * ElectricalCharge(L)</c> and
             <c>ElectricalFieldY(L.position) * ElectricalCharge(L)</c>.
            </summary>
            <param name="v"></param>
            <returns>Returns the charge of the node,
            normally the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultElectricalCharge"/>,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedVertex.Charge"/> had already been set,
            in which case it just returns that value.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalFieldX(System.Windows.Point)">
            <summary>
            Returns the electrical field in the X direction
            acting on a node at the logical point Point xy.  A node L
            is acted upon by a force in the X direction of magnitude
             <c>ElectricalFieldX(L.position) * ElectricalCharge(L)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the electrical field in the X direction, normally zero</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalFieldY(System.Windows.Point)">
            <summary>
            Returns the electrical field in the Y direction
            acting on a node at the logical point <c>Point</c> xy.  A node L
            is acted upon by a force in the Y direction of magnitude
             <c>ElectricalFieldY(L.position) * ElectricalCharge(L)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the electrical field in the Y direction, normally zero</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GravitationalMass(Northwoods.GoXam.Layout.ForceDirectedVertex)">
            <summary>
            The function GravitationalMass returns the mass of the point
            representing the ForceDirectedVertex node.  A node L
            is acted upon by forces in the X and Y directions of magnitude
             <c>GravitationalFieldX(L.position) * GravitationalMass(L)</c> and
             <c>GravitationalFieldY(L.position) * GravitationalMass(L)</c>.
            </summary>
            <param name="v"></param>
            <returns>Returns the mass of node,
            normally the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultGravitationalMass"/>,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.ForceDirectedVertex.Mass"/> had already been set,
            in which case it just returns that value.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GravitationalFieldX(System.Windows.Point)">
            <summary>
            The function GravitationalFieldX returns the gravitational field
            in the X direction acting on a node at the logical point <c>Point</c> xy.  A node L
            is acted upon by a force in the X direction of magnitude
             <c>GravitationalFieldX(L.position) * GravitationalMass(L)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the gravitational field in the X direction at point xy, normally zero.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GravitationalFieldY(System.Windows.Point)">
            <summary>
            The function GravitationalFieldY returns the gravitational field
            in the Y direction acting on a node at the logical point <c>Point</c> xy.  A node L
            is acted upon by a force in the Y direction of magnitude
             <c>GravitationalFieldY(L.position) * GravitationalMass(L)</c>.
            </summary>
            <param name="xy"></param>
            <returns>Returns the gravitational field in the Y direction at point xy, normally zero</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.IsFixed(Northwoods.GoXam.Layout.ForceDirectedVertex)">
            <summary>
            This predicate returns true if the node should not be moved
            by the layout algorithm but still have an effect on nearby and connected nodes.
            The default implementation returns <see cref="P:Northwoods.GoXam.Layout.ForceDirectedVertex.IsFixed"/>.
            </summary>
            <param name="v"></param>
            <returns>Returns true if node should not be moved by the layout algorithm</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.UpdatePositions">
            <summary>
            Peforms one iteration of the ForceDirected algorithm and updates the positions of
            the <see cref="T:Northwoods.GoXam.Layout.ForceDirectedVertex"/>s (but not the document's nodes).
            </summary>
            <returns>Returns true if additional iterations are needed to find a solution.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutNodesAndLinks">
            <summary>
            Updates the physical location of "real" nodes and links to reflect
            the layout.
            </summary>
            <remarks>
            This sets any port spots, as directed by <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.SetsPortSpots"/>,
            and then calls <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutNodes"/> and <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutNodes">
            <summary>
            Commit the position of all of the vertex nodes.
            </summary>
            <remarks>
            The position of all of the nodes is affected by whether <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangesToOrigin"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutLinks">
            <summary>
            Commit the position and routing of all of the edge links.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.SetsPortSpotsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.SetsPortSpots"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.CommentsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Comments"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.MaxIterationsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.MaxIterations"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.EpsilonProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Epsilon"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.InfinityDistanceProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.InfinityDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.RandomNumberGeneratorProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.RandomNumberGenerator"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringStiffnessProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringStiffness"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultElectricalChargeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultElectricalCharge"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultGravitationalMassProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultGravitationalMass"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentSpringLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentSpringLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentElectricalChargeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentElectricalCharge"/> dependency property.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.ForceDirectedNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangementSpacing">
            <summary>
            Gets or sets the space between which <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangeConnectedGraphs(System.Collections.Generic.IEnumerator{Northwoods.GoXam.Layout.ForceDirectedNetwork},Northwoods.GoXam.Layout.ForceDirectedNetwork)"/> will position the connected graphs
            that together compose the network.
            </summary>
            <value>
            This defaults to the Size(100, 100).
            </value>
            <remarks>
            These distances are used during a clustered layout; afterwards the normal force-directed layout
            will likely cause the size of any space between connected graphs to change, perhaps considerably.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.ArrangesToOrigin">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.LayoutNodes"/> should move all of the
            nodes so that the nodes all fit with the top-left corner at the
            <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin"/>.
            </summary>
            <value>
            By default this is false -- the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin"/> is ignored.
            When this is true, nodes are moved even though <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.IsFixed(Northwoods.GoXam.Layout.ForceDirectedVertex)"/> was true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.SetsPortSpots">
            <summary>
            Gets or sets whether the FromSpot and the ToSpot
            of every link route should be set to <c>Spot.Default</c>.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Comments">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.AddComments(Northwoods.GoXam.Layout.ForceDirectedVertex)"/> should find all <see cref="T:Northwoods.GoXam.Node"/>s
            whose category is "Comment" and
            whose anchors are nodes represented in the <see cref="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Network"/> and add <see cref="T:Northwoods.GoXam.Layout.ForceDirectedVertex"/>s
            representing those balloon comments as nodes in the network.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations to perform when doing the
            force directed auto layout.
            </summary>
            <value>The value must be non-negative.  The initial value is 100.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.CurrentIteration">
            <summary>
            Gets the current iteration count, valid during a call to <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.Epsilon">
            <summary>
            Gets or sets approximately how far some node must move in order for the iterations to continue.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.InfinityDistance">
            <summary>
            Gets or sets a threshold for the distance beyond which the electrical charge forces may be ignored.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator used to give an initial push between objects
            that are located at the same position.
            </summary>
            <value>
            Initially this is null, which causes a new <c>System.Random</c> to be used.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringStiffness">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringStiffness(Northwoods.GoXam.Layout.ForceDirectedEdge)"/>.
            </summary>
            <value>The value is initially 0.05.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultSpringLength">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringLength(Northwoods.GoXam.Layout.ForceDirectedEdge)"/>.
            </summary>
            <value>The value is initially 50.0.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultElectricalCharge">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalCharge(Northwoods.GoXam.Layout.ForceDirectedVertex)"/>.
            </summary>
            <value>The value is initially 150.0.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultGravitationalMass">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GravitationalMass(Northwoods.GoXam.Layout.ForceDirectedVertex)"/>.
            </summary>
            <value>The value is initially 0.0.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentSpringLength">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringLength(Northwoods.GoXam.Layout.ForceDirectedEdge)"/>.
            </summary>
            <value>The value is initially 20.0.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedLayout.DefaultCommentElectricalCharge">
            <summary>
            Gets or sets the value returned by <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalCharge(Northwoods.GoXam.Layout.ForceDirectedVertex)"/>.
            </summary>
            <value>The value is initially 25.0.</value>
        </member>
        <member name="T:Northwoods.GoXam.Layout.ForceDirectedNetwork">
            <summary>
            This provides an abstract view of a network (graph) of nodes and directed links.
            These nodes and links correspond to
            <see cref="T:Northwoods.GoXam.Part"/>s provided in the <see cref="T:Northwoods.GoXam.Diagram"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GenericNetwork`3">
            <summary>
            This provides an abstract view of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a
            network (graph) of vertexes and directed edges.  These vertexes and edges correspond to
            <see cref="T:Northwoods.GoXam.Part"/>s (<see cref="T:Northwoods.GoXam.Node"/>s or <see cref="T:Northwoods.GoXam.Link"/>s)
            provided in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original model.
            </summary>
            <typeparam name="V">a Type of <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/></typeparam>
            <typeparam name="E">a Type of <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/></typeparam>
            <typeparam name="Y">a Type of <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/></typeparam>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.CreateVertex">
            <summary>
            Allocate a new instance of <typeparamref name="V"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.CreateEdge">
            <summary>
            Allocate a new instance of <typeparamref name="E"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Adds the objects in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the network.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <remarks>
            This is usually more convenient than repeatedly calling <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddLink(Northwoods.GoXam.Link)"/> appropriately.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Clear">
            <summary>
            Removes all vertexes and edges from the network, resulting in an empty network.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddVertex(`0)">
            <summary>
            Adds a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/> to the Network.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)">
            <summary>
            This convenience method makes sure there is a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>
            in this network corresponding to a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="node">a Node</param>
            <returns>a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/> in this network</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteVertex(`0)">
            <summary>
            Removes a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/> from the network.
            </summary>
            <param name="vertex"></param>
            <remarks>
            This function also deletes all edges to or from the vertex.
            Performs nothing if the edge is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteNode(Northwoods.GoXam.Node)">
            <summary>
            This convenience method deletes any <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>
            corresponding to a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="node">a Node</param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.FindVertex(Northwoods.GoXam.Node)">
            <summary>
            Returns the <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/> which was constructed for the <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="node"></param>
            <returns>Returns the network <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/> associated with the <see cref="T:Northwoods.GoXam.Node"/>,
            or null if no such vertex exists.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddEdge(`1)">
            <summary>
            Adds an <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> to the network.
            Although this method is provided for completeness,
            <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/> provides a more efficient manner of linking
            nodes already in the network.
            </summary>
            <param name="edge"></param>
            <remarks>
            This adds the link to its ToVertex
            source links list, and to its FromVertex's
            destination links list.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddLink(Northwoods.GoXam.Link)">
            <summary>
            This convenience method takes a <see cref="T:Northwoods.GoXam.Link"/>,
            and returns an <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> that has been added to this network.
            </summary>
            <param name="link">a <see cref="T:Northwoods.GoXam.Link"/></param>
            <returns>an <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> in this network</returns>
            <remarks>
            If <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.FindEdge(Northwoods.GoXam.Link)"/> returns null, this method creates a new <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/>,
            makes sure the <see cref="P:Northwoods.GoXam.Link.FromNode"/> and <see cref="P:Northwoods.GoXam.Link.ToNode"/> have
            corresponding <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>es in the network, and adds the edge itself
            to the network.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteEdge(`1)">
            <summary>
            Deletes an <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> from the network.
            </summary>
            <param name="edge"></param>
            <remarks>
            Also removes the edge from its ToVertex's predecessor list
            and from its FromVertex's successor list.
            Performs nothing if the edge is not in the network.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteLink(Northwoods.GoXam.Link)">
            <summary>
            This convenience method makes sure a <see cref="T:Northwoods.GoXam.Link"/>
            does not have a <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> in this network.
            </summary>
            <param name="link"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteEdge(`1)"/> if
            <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.FindEdge(Northwoods.GoXam.Link)"/> finds an edge.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.FindEdge(Northwoods.GoXam.Link)">
            <summary>
            Returns the <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> which was constructed for the <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="link"></param>
            <returns>Returns the edge that was constructed with the link or
            null if no such edge exists.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)">
            <summary>
            Links two nodes already in the network and returns the created <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/>.
            </summary>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <param name="link"> the <see cref="T:Northwoods.GoXam.Link"/> to which the created edge should correspond (may be null)</param>
            <returns>Returns the <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> created when fromVertex and toVertex are linked.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.ReverseEdge(`1)">
            <summary>
            Reverses the direction of an <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/> in the network.
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteSelfEdges">
            <summary>
            Deletes all <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/>s whose "to vertex" and "from vertex" are the same vertex.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.DeleteArtificialVertexes">
            <summary>
            Delete all vertexes and edges that have no <see cref="T:Northwoods.GoXam.Part"/> associated with them.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.SplitIntoSubNetworks``1">
            <summary>
            Modify this network by splitting it up into separate subnetworks,
            each of which has all of its vertexes connected to each other, but not
            to any vertexes in any other subnetworks.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> of networks,
            sorted in order of decreasing vertex count.
            </returns>
            <remarks>
            This method will first delete from this network all artifical vertexes and
            all edges that do not connect two different vertexes.
            Afterwards, this original network may be empty or may contain all of the
            singleton vertexes, each of which had no edges connecting it to any other vertexes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.GetNodesAndLinks">
            <summary>
            Retrieve all of the <see cref="T:Northwoods.GoXam.Part"/> <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s from the
            <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>s and <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/>s that are in this network.
            </summary>
            <returns>
            An <c>IEnumerable{Part}</c> of all of the <see cref="T:Northwoods.GoXam.Part"/>s that
            correspond to the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertexes"/> and <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edges"/>.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.VertexCount">
            <summary>
            Gets the number of vertexes in this network.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.EdgeCount">
            <summary>
            Gets the number of edges in this network.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.NodeToVertexDictionary">
            <summary>
            Gets the dictionary that maps <see cref="T:Northwoods.GoXam.Node"/>s to <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>es.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.LinkToEdgeDictionary">
            <summary>
            Gets the dictionary that maps <see cref="T:Northwoods.GoXam.Link"/>s to <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertexes">
            <summary>
            Gets an enumerator for the network's vertexes.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edges">
            <summary>
            Gets an enumerator for the network's edges.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/> in which this
            network is being used.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1">
            <summary>
            Enumerator implements both <c>IEnumerator</c> and <c>IEnumerable</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1.Dispose">
            <summary>
            No resources to cleanup.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the Links
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1.MoveNext">
            <summary>
            Advance the enumerator to the next Link.
            </summary>
            <returns>True if there is a next Link; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Enumerator`1.Current">
            <summary>
             Gets the current node in the collection of links.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GenericNetwork`3.Edge">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.CommitPosition">
            <summary>
            Commits the position of the edge to the corresponding Link.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.GetOtherVertex(`0)">
            <summary>
            Finds and returns the edge's vertex other than <paramref name="v"/>.
            Returns null if <paramref name="v"/> is neither the "from" vertex or "to" vertex.
            </summary>
            <param name="v"></param>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.Link">
            <summary>
            Gets or sets this edge's associated <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.Link"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.Network">
            <summary>
            Gets or sets the network that this edge is part of.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.FromVertex">
            <summary>
            Gets or sets this edge's "from" <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>.
            </summary>
            <remarks>
            Setting this property does not modify the vertex
            by adding an edge to its list of destination edges
            or removing it from another vertex's list.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.ToVertex">
            <summary>
            Gets or sets this edge's "to" <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>.
            </summary>
            <remarks>
            Setting this property does not modify the vertex
            by adding an edge to its list of source edges
            or removing it from another vertex's list.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.Route">
            <summary>
            Gets the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.Route"/> associated with this edge.
            This may be needed by the algorithm to add bends to the link.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.AddSourceEdge(`1)">
            <summary>
            Adds an edge to the list of predecessors
            (i.e., the edge will be coming into this vertex).
            </summary>
            <param name="sourceEdge"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DeleteSourceEdge(`1)">
            <summary>
            Deletes an edge from the list of predecessors
            (i.e., the edge was coming into this vertex).
            </summary>
            <param name="sourceEdge"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.AddDestinationEdge(`1)">
            <summary>
            Adds an edge to the list successors
            (i.e., the edge will be going out from this vertex).
            </summary>
            <param name="destinationEdge"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DeleteDestinationEdge(`1)">
            <summary>
            Deletes an edge from the list of successors
            (i.e., the edge was going out from this vertex).
            </summary>
            <param name="destinationEdge"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.CommitPosition">
            <summary>
            Moves the <see cref="T:Northwoods.GoXam.Node"/> corresponding to this vertex
            so that its position is the current <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>.
            </summary>
            <remarks>
            To make the most common cases look right, the object's <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/>.<c>LocationElement</c>
            is centered.  Thus iconic nodes will have the center of the icon be positioned
            according to the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/> of this Node, ignoring any labels.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/> associated with this network vertex.
            </summary>
            <remarks>
            Setting this value to a node will also set the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>
            property to that object's <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/>.<c>LocationElement</c> center position.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Network">
            <summary>
            Gets or sets the network that this vertex is part of.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center">
            <summary>
            Gets or sets the center Point of this vertex.
            </summary>
            <remarks>
            Setting this property does not modify the position of any <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Focus"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position">
            <summary>
            Gets or sets the position (top-left corner) of this vertex.
            </summary>
            <remarks>
            Setting this property does not modify the position of any <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Focus"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Focus">
            <summary>
            Gets or sets the offset of the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/> from the
            <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/><c>.Position</c>.
            </summary>
            <remarks>
            Setting this property does not modify the position of any <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds">
            <summary>
            Gets or sets the Bounds of this node.
            </summary>
            <remarks>
            Setting this property does not modify the position of any <see cref="T:Northwoods.GoXam.Node"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>
            <seealso cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Focus"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Size">
            <summary>
            Gets the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/><c>.Size</c>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Width">
            <summary>
            Gets the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/><c>.Width</c>.
            </summary>
            <remarks>
            This is always the horizontal distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Height">
            <summary>
            Gets the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/><c>.Height</c>.
            </summary>
            <remarks>
            This is always the vertical distance reserved for this node.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.SourceVertexes">
            <summary>
            Gets an enumerator over all of the vertexes that have edges coming into this vertex.
            </summary>
            <remarks>
            The enumerator iterates over the set of all vertexes that have any
            destination edges coming into this vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DestinationVertexes">
            <summary>
            Gets an enumerator over all of the vertexes that have edges going out of this vertex.
            </summary>
            <remarks>
            The enumerator iterates over the set of all vertexes that have any
            source edges going out of this vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Vertexes">
            <summary>
            Gets an enumerator over all of the vertexes that are connected to this vertex.
            </summary>
            <remarks>
            The enumerator iterates over the set of all vertexes that have any
            edges connected to this vertex.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.SourceEdges">
            <summary>
            Gets an enumerator that iterates over all of the edges coming into this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.SourceEdgesCount">
            <summary>
            Gets the number of edges going into this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DestinationEdges">
            <summary>
            Gets an enumerator that iterates over all of the edges going out of this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DestinationEdgesCount">
            <summary>
            Gets the number of edges coming out of this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Edges">
            <summary>
            Gets an enumerator over all of the edges going out of or coming into this vertex.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.EdgesCount">
            <summary>
            Gets the number of edges connected to this vertex.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.ForceDirectedNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.ForceDirectedEdge">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedEdge.Stiffness">
            <summary>
            stiffness of the link; see the <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringStiffness(Northwoods.GoXam.Layout.ForceDirectedEdge)"/> method
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedEdge.Length">
            <summary>
            length of the link; see the <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.SpringLength(Northwoods.GoXam.Layout.ForceDirectedEdge)"/> method
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.ForceDirectedVertex">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedVertex.IsFixed">
            <summary>
            whether <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.IsFixed(Northwoods.GoXam.Layout.ForceDirectedVertex)"/> should return true
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedVertex.ForceX">
            <summary>
            cumulative force on the node in the X-direction
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedVertex.ForceY">
            <summary>
            cumulative force on the node in the Y-direction
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedVertex.Charge">
            <summary>
            charge of the node.  See the <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.ElectricalCharge(Northwoods.GoXam.Layout.ForceDirectedVertex)"/> method
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.ForceDirectedVertex.Mass">
            <summary>
            mass of the node.  See the <see cref="M:Northwoods.GoXam.Layout.ForceDirectedLayout.GravitationalMass(Northwoods.GoXam.Layout.ForceDirectedVertex)"/> method
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphLayout">
            <summary>
            LayeredDigraph provides an auto-layout for layered drawings
            of directed graphs.
            </summary>
            <remarks>
            <para>
            The method uses a hierarchical approach
            for creating drawings of digraphs with nodes arranged in layers.
            The layout algorithm consists of four-major steps: Cycle Removal,
            Layer Assignment, Crossing Reduction, and Straightening and Packing.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.#ctor">
            <summary>
            Constructs a LayeredDigraph with null network and document.
            PerformLayout() will be a no-op until the network has been set.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.#ctor(Northwoods.GoXam.Layout.LayeredDigraphLayout)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphLayout"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Network"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.NetworkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Network"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphNetwork"/> with the given nodes and links.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <returns>a <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphNetwork"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Performs a layered-digraph auto-layout.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Network"/> is null, one is automatically allocated
            and initialized with the graph that is in the <see cref="T:Northwoods.GoXam.Diagram"/>.
            After all of the computations are completed, this calls
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks"/> in order to commit the positions
            of all of the nodes.
            No undo/redo transaction is started or finished by this method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LinkMinLength(Northwoods.GoXam.Layout.LayeredDigraphEdge)">
            <summary>
            The function LinkMinLength returns the minimum length of the
            link represented by the LayeredDigraphLink link.
            The default implementation gives multi-links a minimum length of 2,
            and all other links a minimum length of 1.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="edge"></param>
            <returns>Returns the minimum length of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LinkLengthWeight(Northwoods.GoXam.Layout.LayeredDigraphEdge)">
            <summary>
            The function LinkLengthWeight returns the weight of the link
            represented by the LayeredDigraphLink link.  This weight is used by
            OptimalLinkLengthLayering to minimize weighted link lengths.
            The default implementation gives all links a length weight of 1.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="edge"></param>
            <returns>Returns the weight of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LinkStraightenWeight(Northwoods.GoXam.Layout.LayeredDigraphEdge)">
            <summary>
            The function LinkStraightenWeight returns the weight of the link
            represented by the LayeredDigraphLink link.  This weight is used by
            the straightening methods to give priority straightening to those links
            with higher weights.
            The default implementation gives links between two "real" nodes a weight of 1,
            links between a "real" node and an "artifical" node a weight of 4,
            and links between two "artificial" nodes a weight of 8.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="edge"></param>
            <returns>Returns the weight of the link represented by link</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NodeMinLayerSpace(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Boolean)">
            <summary>
            This function returns the minimum space reserved for this node from the center point
            for the "depth" of the layer that it is in.
            </summary>
            <param name="v"></param>
            <param name="topleft">whether to return the distance from the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>
            to the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>, or from the <b>Center</b>
            to the bottom or right side of the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/></param>
            <returns>Returns the minimum space reserved above and below this node, in document coordinates</returns>
            <remarks>
            The default implementation returns 0 for nodes that do not
            correspond to top-level Go objects.  For nodes that do correspond
            to top-level Go objects, the layer space is determined by the
            width or height of the object depending on the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Direction"/>.
            By default this adds 10 to the space, to account for port end segment lengths.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NodeMinColumnSpace(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Boolean)">
            <summary>
            The function NodeMinColumnSpace returns the minimum space
            reserved to either side of this node.
            The default implementation returns 0 for nodes that do not
            correspond to top-level Go objects.  For nodes that do correspond
            to top-level Go objects, the column space is determined by the
            width and height of the object divided by the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.ColumnSpacing"/>.
            Note: all sub-classes that override this method should ensure that
            nodes that do not correspond to top-level Go objects have a minimum
            column space of 0.
            This function can be overridden to provide "fine-tuning" of the layout.
            </summary>
            <param name="v"></param>
            <param name="topleft">whether to return the distance from the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Position"/>
            to the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Center"/>, or from the <b>Center</b>
            to the bottom or right side of the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/></param>
            <returns>Returns the minimum space reserved to either side of the center of this node, in units of <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.ColumnSpacing"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.SaveLayout">
            <summary>
            The function SaveLayout stores the layer, column, and index of all
            nodes in an array of integers.
            </summary>
            <returns>Returns an integer array representation of the current layout</returns>
            <remarks>See also <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.RestoreLayout(System.Int32[])"/></remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.RestoreLayout(System.Int32[])">
            <summary>
            The function RestoreLayout restores the layer, column, and index of all
            nodes from an array of integers.
            </summary>
            <param name="layout"></param>
            <remarks>See also <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.SaveLayout"/></remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.CrossingMatrix(System.Int32,System.Int32)">
            <summary>
            Computes the crossing matrix between the unfixedLayer and its adjacent layers.
            The direction argument indicates which adjacent layers should be taken into
            consideration when computing the crossing matrix:
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweeping towards layer 0)
            </code>
            The resulting integer array can be used as follows:
            if index1 and index2 are the indices corresponding to two nodes on the
            unfixedLayer and crossmat is the crossing matrix, then
            <c>crossmat[index1 * indices[unfixedLayer] + index2]</c>
            is the number of crossing that occur if the node corresponding to index1 is
            placed to the left of the node corresponding to index2.  If <c>index1 == index2</c>,
            then <c>crossmat[index1 * indices[unfixedLayer] + index2]</c> is the number of crossings
            between links to and from the node corresponding to index1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the crossing matrix</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.CountCrossings">
            <summary>
            Returns the total number of crossings in the network.
            Internal method used by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ReduceCrossings"/>.
            </summary>
            <returns>Returns the total number of crossings in the network.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.Bends(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Computes the bends between the unfixedLayer and its adjacent layers.
            The "bend" between a node U and a node V connected by a link L is calcluated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset))</c>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The direction argument indicates which adjacent layers should be taken into
            consideration when computing the crossing matrix:
            <c>direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1</c>
            <c>direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)</c>
            <c>direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)</c>
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <param name="weighted"></param>
            <returns>Returns the bends between the unfixedLayer and its adjacent layers.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.CountBends(System.Boolean)">
            <summary>
            Returns the total number of bends in the network.
            The "bend" between a node U and a node V connected by a link L is calcluated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset))</c>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            </summary>
            <param name="weighted"></param>
            <returns>Returns the total number of bends in the network.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.Normalize">
            <summary>
            Adjusts the columns of all nodes such that the leftmost column will be
            column 0 and maxColumn is updated appropriately.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.Barycenters(System.Int32,System.Int32)">
            <summary>
            Computes the array of barycenters (average) columns for the nodes in the 
            unfixedLayer based on the columns of predecessors (direction &lt; 0),
            successors (direction > 0), or both predecessors and successors (direction == 0)
            Elements without a defined barycenter will have an entry of -1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the array of barycenters (average) columns for the nodes in
            the unfixedLayer</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.Medians(System.Int32,System.Int32)">
            <summary>
            Computes the array of median columns for the nodes in the
            unfixedLayer based on the columns of predecessors (direction &lt; 0),
            successors (direction > 0), or both predecessors and successors (direction == 0).
            Elements without a defined median will have an entry of -1.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns the array of median columns for the nodes in
            the unfixedLayer</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.TightComponentUnset(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            Tight** functions only set the component and recurse on nodes which are "tight",
            in the sense that the nodes are separated by a link which corresponds to the
            minumum link length of the link between the two nodes.
            **Unset functions only set the component and recurse on nodes whose component is currently
            set to the unset value.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            </summary>
            <param name="v"></param>
            <param name="component"></param>
            <param name="unset"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ComponentUnset(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Uses a depth first search algorithm to set the component of all nodes in a component.
            **Unset functions only set the component and recurse on nodes whose component is currently
            set to the unset value.
            The forward and backward bools indicate the direction to use for a
            directed depth first search from node.
            </summary>
            <param name="v"></param>
            <param name="component"></param>
            <param name="unset"></param>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.RemoveCycles">
            <summary>
            Removes cycles from the input network by reversing some number of links.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemoval"/>
            or <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval"/>, as appropriate
            given the value of <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.CycleRemoveOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemoval">
            <summary>
            Removes cycles from the input network using a Greedy-Cycle-Removal algorithm.
            The idea is to induce an order on all nodes
            in the network (U1, U2, U3, ..., Uk) such that for the majority of links L = (Ui, Uj)
            it is true that i &lt; j.  All links L = (Ui, Uj) such that i > j are reversed.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemovalFindNode(Northwoods.GoXam.Layout.LayeredDigraphNetwork)">
            <summary>
            Finds a valid node in the network.
            Returns null if no valid node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a valid node in the network or null if no valid nodes exist</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemovalFindSink(Northwoods.GoXam.Layout.LayeredDigraphNetwork)">
            <summary>
            Finds a sink node in the network.  A node is considered a sink node if it is
            valid and all of its predecessors are invalid.  A valid node with no predecessors
            is vacously a sink.
            Returns null if no valid sink node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a sink node in the network, or null if no valid sink node exists</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemovalFindSource(Northwoods.GoXam.Layout.LayeredDigraphNetwork)">
            <summary>
            Finds a source node in the network.  A node is considered a sink node if it is
            valid and all of its successors are invalid.  A valid node with no successors
            is vacously a source.
            Returns null if no valid source node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a source node in the network or null if no sources exist</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemovalFindNodeMaxDegDiff(Northwoods.GoXam.Layout.LayeredDigraphNetwork)">
            <summary>
            Finds a valid node in the network that maximizes outdeg - indeg.
            The degree difference is computed using valid successors and predecessors.
            Returns null if no valid node exists.
            Used by GreedyCycleRemoval.
            </summary>
            <param name="network"></param>
            <returns>Returns a valid node in the network that maximized outdeg-indeg or null
            if no valid node exists</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval">
            <summary>
            Removes cycles from the input network using a depth first search.
            A link not in the depth first forest is reversed if the from-node was discovered
            and finished by the depth first search after the to-node was discovered but before
            the to-node was finished.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemovalVisit(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Peforms the recursive step of the depth first search on node.
            Updates the discover and finish time of node.
            Updates the forest flag of followed links.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AssignLayers">
            <summary>
            Assigns every node in the input network to a layer.
            The layering satisfies the following:
            if L is a link from node U to node V,
            then U.layer &gt; V.layer;
            further, U.layer - V.layer &gt;= LinkMinLength(L).
            This method can be overridden to customize how nodes are assigned layers.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSinkLayering"/>,
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSourceLayering"/>, or
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayering"/> as appropriate given
            the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayeringOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSinkLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in AssignLayers(),
            LongestPathSinkLayering ensures that every sink appears in layer 0
            and every node is as close to a sink as possible.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSinkLayeringLength(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Computes the length of the longest path from node to a sink node and sets the
            layer of node to that length.
            Returns the length of the longest path from node to a sink node.
            </summary>
            <param name="v"></param>
            <returns>Returns the length of the longest path from node to a sink node.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSourceLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AssignLayers"/>,
            LongestPathSourceLayering ensures that every source appears in layer maxLayer
            and every node is as close to a source as possible.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSourceLayeringLength(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Computes the length of the longest path from node to a source node and sets the
            layer of node to that length.
            Returns the length of the longest path from node to a source node.
            </summary>
            <param name="v"></param>
            <returns>Returns the length of the longest path from node to a source node.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayering">
            <summary>
            Assigns every node in the input network to a layer.
            In addition to the requirements described in AssignLayers(),
            OptimalLinkLengthLayering ensures that nodes are set in layers
            to minimize the total weighted link length.
            Hence, OptimalLinkLengthLayering minimizes the sum
            (U.layer - V.layer) * LinkLengthWeight(L)
            over all links L = (U,V).
            </summary>
            <remarks>See also <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LinkMinLength(Northwoods.GoXam.Layout.LayeredDigraphEdge)"/>
            and <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LinkLengthWeight(Northwoods.GoXam.Layout.LayeredDigraphEdge)"/></remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayeringDepthFirstSearch(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Peforms the depth first search of the network.
            After traversing all decendents, the node is "pull"-ed into
            the appropriate layer.
            </summary>
            <param name="v"></param>
            <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayeringPull(Northwoods.GoXam.Layout.LayeredDigraphVertex)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayeringPull(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Attempts to move node and it's tight component to a higher layer.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayeringPush(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Attempts to move node and it's tight component to a lower layer.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.MakeProper">
            <summary>
            Converts the input network into a proper digraph; i.e., artificial nodes and links
            are introduced into the network such that every link is between nodes in adjacent
            layers.  This has the effect of breaking up long links into a sequence of artificial
            nodes.
            </summary>
            <remarks>
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            All consecutive layout operations will preserve or update
            the indices.
            In addition, the indices array is initialized such that
            indices[layer] indicates the number of nodes in the layer.
            Finally, the variables minIndexLayer and maxIndexLayer record
            the layers that correspond to the minimum and maximum nodes
            in a layer.
            </summary>
            <remarks>
            By default this will just call <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NaiveInitializeIndices"/>,
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstOutInitializeIndices"/>, or
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstInInitializeIndices"/>, as appropriate
            given the value of <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeOption"/>.
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NaiveInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            Uses a naive implementation that assigns indices to nodes as they
            are encountered in a sweep of the network.  Because of the way
            networks are stored, this has the effect of initialy placing all
            "artificial" nodes to the right of all "real" nodes.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstOutInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with 
            consecutive indices in left to right order.
            Uses a depth first "outward" (i.e., following links from "from-node" to "to-node")
            traversal of the network, assigning indices to nodes as they are discovered.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstOutInitializeIndicesVisit(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Assigns node the appropriate index and updates the indices array.
            Implements the recursive portion of a depth first search.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstInInitializeIndices">
            <summary>
            Assigns every node in the input network an index number,
            such that nodes in the same layer will be labeled with
            consecutive indices in left to right order.
            Uses a depth first "inward" (i.e., following links from "to-node" to "from-node")
            traversal of the network, assigning indices to nodes as they are discovered.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstInInitializeIndicesVisit(Northwoods.GoXam.Layout.LayeredDigraphVertex)">
            <summary>
            Assigns node the appropriate index and updates the indices array.
            Implements the recursive portion of a depth first search.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeColumns">
            <summary>
            Assigns every node in the input network a column number,
            such that nodes in the same layer will be labeled with
            increasing indices in left to right order.
            </summary>
            <remarks>
            In addition, a node U is assigned to a column such that
            2 * MinColumnSpace(U) + 1 columns are "allocated" to node U,
            and no two nodes have overlapping "allocations" of columns.
            All consecutive layout operations will preserve or update
            the columns.
            This method can be overridden to customize the layout algorithm.
            This method must not change the layer of any existing node, nor add or remove any layers.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ReduceCrossings">
            <summary>
            Reorders nodes within layers to reduce the total number of link
            crossings in the network.
            There are many, many possible implementations of this function.
            Basically, some iteration of MedianBarycenterCrossingReduction
            and AdjacentExchangeCrossingReductionBendStraighten
            sweeping back and forth over the layers is needed.
            The default implementation has performed favorably on a large number
            of networks, but other options are available.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.MedianBarycenterCrossingReduction(System.Int32,System.Int32)">
            <summary>
            Reorders nodes within the unfixedLayer to reduce the number of link crossings between
            the unfixedLayer and its adjacent layers.  The direction argument indicates which of the
            adjacent layers should be taken into consideration when reducing the number of crossings.
            <c>direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1</c>
            <c>direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)</c>
            <c>direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)</c>
            The idea is to calculate the median and barycenter for each node in the unfixedLayer,
            and to sort the nodes in the unfixedLayer by their median and barycenter values.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AdjacentExchangeCrossingReductionBendStraighten(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to simultaneously reduce the
            number of link crossings and the number of "bends" between the unfixedLayer and its
            adjacent layers between the unfixedLayer and its adjacent layers.
            The directionCR argument indicates which of the adjacent layers should be taken
            into consideration when reducing the number of link crossings.
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)
            </code>
            The directionBS argument indicates which of the adjacent layers should be taken
            into consideration when reducing the number of bends.
            <code>
            direction == 0  --  use unfixedLayer - 1 and unfixedLayer + 1
            direction > 0  --  use unfixedLayer - 1 (sweeping away from layer 0)
            direction &lt; 0  --  use unfixedLayer + 1 (sweepeing towards layer 0)
            </code>
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is to use a bubble-sort technique to exchange adjacent nodes whenever
            doing so reduces the number of link crossings or the number of bends.
            This function is used in both crossing reduction and bend straightening.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer">the layer to be reordered</param>
            <param name="directionCR">indicates which adjacent layers should be taken into consideration when calculating the crossing matrix</param>
            <param name="straighten">indicates whether or not to reorder to nodes to straighten links</param>
            <param name="directionBS">indicates which adjacent layers should be taken into consideration when calculating the bends of a link</param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which reduces
            the number of bends and is tightly packed.
            </summary>
            <remarks>
            The behavior is controlled by the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackOption"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.BendStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to reduce the number of "bends"
            between the unfixedLayer and its adjacent layers.  The direction argument indicates
            which of the adjacent layers should be taken into consideration when reducing the number
            of bends.
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is to iterate the ShiftBendStraighten and adjacentExchangeBendStraighten
            methods until no improvements are made.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if an improvement was made.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ShiftBendStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer to reduce the number of "bends"
            between the unfixedLayer and its adjacent layers.  The direction argument indicates
            which of the adjacent layers should be taken into consideration when reducing the number
            of bends.
            The "weighted bend" between a node U and a node V connected by link L is calculated by
            <c>abs((U.column + L.portFromColOffset) - (V.column + L.portToColOffset)) * LinkStraightenWeight(L)</c>
            The LinkStraightenWeight attempts to give higher priority to links between
            "artificial" nodes; i.e., long links in the final layout will be straighter.
            The idea is shift nodes to the left and to the right to reduce the bends
            ensuring that no two nodes have overlapping "allocations" of columns.
            Return true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Return true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.MedianStraighten(System.Int32,System.Int32)">
            <summary>
            Adjusts the columns of nodes within the unfixedLayer in order to move nodes towards
            their median columns.  The direction argument indicates which of the adjacent layers
            should be taken into consideration when computing the median column.
            The idea is shift nodes to the left and to the right to move nodes towards their
            median columns, ensuring that no two nodes have overlapping "allocations" of columns.
            Returns true if some change was made to the layer.
            </summary>
            <param name="unfixedLayer"></param>
            <param name="direction"></param>
            <returns>Returns true if some change was made to the layer and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.Pack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that columns which are "un-allocated" through all layers can be eliminated
            and the nodes can be shifted into that space.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to remove the argument column by shifting columns into from the argument direction.
              direction > 0 -- columns > argument column are shifted
              direction &lt; 0 -- columns &lt; argument column are shifted
            Returns true if the argument column was removed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was removed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.TightPack">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that two adjacent columns can be "merged" if each layer has at most one of
            the two columns "allocated" to a node.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.TightPackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to augment the argument column by merging columns into from the argument direction.
            direction > 0 -- columns > the argument column are shifted
            direction &lt; 0 -- columns &lt; the argument column are shifted
            Returns true if the argument column was changed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was changed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ComponentPack(System.Int32)">
            <summary>
            Adjusts the columns of nodes in the network to produce a layout which is tightly packed.
            The idea is that the network can be fragmented from a given column in the following way:
            all nodes "behind" the column are placed into a single component, and the remainder of
            the network is divided into connected components.  Each of these new components can be
            examined, and those that can be merged with the given column do so.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ComponentPackAux(System.Int32,System.Int32)">
            <summary>
            Attempts to augment the argument column by merging components into from the argument direction.
            direction > 0 -- columns > the argument column are shifted
            direction &lt; 0 -- columns &lt; the argument column are shifted
            Returns true if the argument column was changed.
            </summary>
            <param name="column"></param>
            <param name="direction"></param>
            <returns>Returns true if the argument column was changed and false otherwise.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks">
            <summary>
            Updates the physical location of "real" nodes and links to reflect
            the layout.
            </summary>
            <remarks>
            One reason to override this method would be to take advantage of
            added functionality of sub-classes of Link, for example, a sub-class
            that tracked bend points and allowed them to be repositioned
            by the application.
            See also <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodes"/>
            and <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodes">
            <summary>
            Lays out the nodes.  Called by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks"/>
            </summary>
            <remarks>
            See also <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks"/>
            and <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutLinks"/>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutLinks">
            <summary>
            Routes the links.  Called by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks"/>
            </summary>
            <remarks>
            See also <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodesAndLinks"/>
            and <seealso cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutNodes"/>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AvoidOrthogonalOverlaps">
            <summary>
            Try to avoid overlapping segments of Orthogonal links.
            </summary>
            <remarks>
            This is called as part of <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayerSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayerSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.ColumnSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.ColumnSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.DirectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Direction"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.CycleRemoveOptionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.CycleRemoveOption"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayeringOptionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayeringOption"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeOptionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeOption"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.IterationsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Iterations"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.AggressiveOptionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.AggressiveOption"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackOptionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackOption"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayout.SetsPortSpotsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.SetsPortSpots"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GetIndices">
            <summary>
            Returns the indices array.
            </summary>
            <value>
            The value must not be modified.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayerSpacing">
            <summary>
            Gets or sets the space between layers.
            </summary>
            <value>The value must be positive.  It defaults to 25.</value>
            <remarks>
            The spacing is in addition to the room taken up by the nodes,
            as determined by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NodeMinLayerSpace(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.ColumnSpacing">
            <summary>
            Gets or sets the size of each column
            </summary>
            <value>The value must be positive.  It defaults to 25.</value>
            <remarks>
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NodeMinColumnSpace(Northwoods.GoXam.Layout.LayeredDigraphVertex,System.Boolean)"/> returns a number that represents a multiple of this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Direction">
            <summary>
            Gets or sets which direction the graph grows toward.
            </summary>
            <value>
            0 is towards the right, 90 is downwards, 180 is towards the left, and 270 is upwards.
            The default value is zero.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.CycleRemoveOption">
            <summary>
            Gets or sets which cycle removal option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.LayeringOption">
            <summary>
            Gets or sets which layering option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeOption">
            <summary>
            Gets or sets which indices initialization option is being used.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Iterations">
            <summary>
            Gets or sets the number of iterations are to be done.
            </summary>
            <value>The value must be non-negative.  The default value is 4.</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.AggressiveOption">
            <summary>
            Gets or sets which Aggressive Option is being used to look for link crossings.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackOption">
            <summary>
            Gets or sets the options used by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/>.
            </summary>
            <value>is a bitwise combination of <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphPack"/> values</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.SetsPortSpots">
            <summary>
            Gets or sets whether the FromSpot and ToSpot of each link
            should be set to values appropriate for the given <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.Direction"/>.
            </summary>
            <value>The default value is true</value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.MaxLayer">
            <summary>
            Gets the largest layer value.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.MaxIndex">
            <summary>
            Gets the largest index value.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.MaxColumn">
            <summary>
            Gets the largest column value.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.MinIndexLayer">
            <summary>
            Gets the smallest index layer
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.MaxIndexLayer">
            <summary>
            Gets the largest index layer.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphCycleRemove">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.RemoveCycles"/> changes the graph
            to make sure it contains no cycles or loops.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphCycleRemove.DepthFirst">
            <summary>
            Remove cycles using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphCycleRemove.Greedy">
            <summary>
            Remove cycles using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemoval"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphLayering">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AssignLayers"/>
            assigns each node of the graph to a layer.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayering.OptimalLinkLength">
            <summary>
            Assign layers using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayering"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayering.LongestPathSink">
            <summary>
            Assign layers using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSinkLayering"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphLayering.LongestPathSource">
            <summary>
            Assign layers using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.LongestPathSourceLayering"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphInitIndices">
            <summary>
            This enumeration controls how <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeIndices"/>
            determines the array of indices for each layer.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphInitIndices.DepthFirstOut">
            <summary>
            Initialize using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstOutInitializeIndices"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphInitIndices.DepthFirstIn">
            <summary>
            Initialize using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstInInitializeIndices"/>
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphInitIndices.Naive">
            <summary>
            Initialize using <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.NaiveInitializeIndices"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphAggressive">
            <summary>
            This enumeration controls how much effort <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ReduceCrossings"/>
            puts into trying to look for link crossings.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphAggressive.None">
            <summary>
            The fastest, but poorest, crossing reduction algorithm
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphAggressive.Less">
            <summary>
            The faster, less agressive crossing reduction algorithm
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphAggressive.More">
            <summary>
            The slower, more agressive crossing reduction algorithm
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphPack">
            <summary>
            These enumerated values can be bitwise combined as values for
            the <see cref="P:Northwoods.GoXam.Layout.LayeredDigraphLayout.PackOption"/> property, which 
            controls how much and what kinds of effort <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/> makes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphPack.None">
            <summary>
            Do minimal work in <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphPack.Expand">
            <summary>
            This option gives more chances for <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/>
            to improve the layout of the network, but is very expensive in time for large networks.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphPack.Straighten">
            <summary>
            This option tries to have <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/>
            straighten many of the links that cross layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphPack.Median">
            <summary>
            This option tries to have <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/>
            center groups of nodes based on their relationships with nodes in other layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayeredDigraphPack.All">
            <summary>
            Enable all options for the <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.StraightenAndPack"/> method.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphNetwork">
            <summary>
            This provides an abstract view of a network (graph) of nodes and directed links.
            These nodes and links correspond to
            <see cref="T:Northwoods.GoXam.Part"/>s provided in the <see cref="T:Northwoods.GoXam.Diagram"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.LayeredDigraphNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphEdge">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.Valid">
            <summary>
            true if the link is part of the proper digraph; see <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.MakeProper"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.Rev">
            <summary>
            true if the link was reversed during cycle removal
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.Forest">
            <summary>
            true if the link is part of depth first forest; used in <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.PortFromPos">
            <summary>
            location of the port at the from node of the link; allows the crossing matrix to correctly calculate the crossings for nodes with multiple ports
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.PortToPos">
            <summary>
            location of the port at the to node of the link; allows the crossing matrix to correctly calculate the crossings for nodes with multiple ports
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.PortFromColOffset">
            <summary>
            approximate column offset of the from port of the link from the from node column used in straightening
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphEdge.PortToColOffset">
            <summary>
            approximate column offset of the to port of the link from the to node column used in straightening
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayeredDigraphVertex">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Layer">
            <summary>
            the layer to which the node is assigned; see <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.AssignLayers"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Column">
            <summary>
            the column to which the node is assigned; see <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeColumns"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Index">
            <summary>
            the index to which the node is assigned; see <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.InitializeIndices"/> for details
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Valid">
            <summary>
            a flag; used in <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.GreedyCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Discover">
            <summary>
            time of discovery in depth first search; used in
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Finish">
            <summary>
            time of finishing in depth first search; used in
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.DepthFirstSearchCycleRemoval"/>
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Component">
            <summary>
            the connected component to which the node is assigned; used by
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.OptimalLinkLengthLayering"/> and
            <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.ComponentPack(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.LayeredDigraphVertex.Near">
            <summary>
            another <see cref="T:Northwoods.GoXam.Layout.LayeredDigraphVertex"/> in the same layer
            that this node should be near; used by <see cref="M:Northwoods.GoXam.Layout.LayeredDigraphLayout.CrossingMatrix(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.MultiLayout">
            <summary>
            This <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> is a compound layout where
            each of the nested <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> works on a subset of the
            nodes and links that are this <c>MultiLayout</c>'s responsibility.
            </summary>
            <remarks>
            <para>
            The items in the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> collection must implement
            the <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> interface, and are normally
            instances of a <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/> class.
            Nesting of <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>s is probably not useful.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.MultiLayout.#ctor">
            <summary>
            Construct an empty <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>.
            </summary>
            <remarks>
            You will need to supply at least one <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/>
            in the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> collection before this <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>
            can do anything useful.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.MultiLayout.InvalidateLayout">
            <summary>
            Set the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.ValidLayout"/> property to false, and
            ask the diagram's <see cref="T:Northwoods.GoXam.LayoutManager"/> to perform layouts in the near future.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiLayout.IdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Id"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.MultiLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)">
            <summary>
            Declare that this layout may be invalid, for a given reason.
            </summary>
            <param name="reason">a <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> hint</param>
            <param name="part">the <see cref="T:Northwoods.GoXam.Part"/> that changed</param>
            <remarks>
            For each layout in <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> in which the given part participates,
            call <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> with the same arguments.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.MultiLayout.CanLayoutPart(Northwoods.GoXam.Part)">
            <summary>
            This predicate is true if <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/>
            is true for any of its <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/>.
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.MultiLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Actually perform all of the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> for the given nodes and links.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <remarks>
            This iterates over the layouts in <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/>.
            If the layout's <see cref="P:Northwoods.GoXam.Layout.IDiagramLayout.ValidLayout"/> is false,
            it gets the subsets of nodes and links that apply to that particular layout
            and then calls <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> on it.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiLayout.ArrangementOriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementOrigin"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiLayout.ArrangementProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Arrangement"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiLayout.ArrangementSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementSpacing"/> dependency property;
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.Diagram">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Diagram"/> that owns this layout.
            </summary>
            <value>
            This may be null if there are no <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/>.
            You should not need to set this property.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.Group">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Group"/> that owns this layout,
            if the layout is the value of a <see cref="P:Northwoods.GoXam.Group.Layout"/>.
            </summary>
            <value>
            This returns null if this layout is declared on the <see cref="T:Northwoods.GoXam.Diagram"/>
            or if there are no <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.Id">
            <summary>
            Gets or sets an identifier for a particular layout.
            </summary>
            <value>
            The default value is the empty string.
            </value>
            <remarks>
            This property is ignored -- <see cref="M:Northwoods.GoXam.Layout.MultiLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> just calls
            <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.CanLayoutPart(Northwoods.GoXam.Part)"/> of the nested layouts.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.ValidLayout">
            <summary>
            This layout is valid only if all of its <see cref="P:Northwoods.GoXam.Layout.MultiLayout.Layouts"/> are valid.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.Layouts">
            <summary>
            Gets the collection of <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> layouts that are
            managed by this <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>.
            </summary>
            <remarks>
            <para>
            Because this is a "Content" property, one can initialize an instance
            of <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/> in XAML just by creating nested elements
            that are themselves layouts.
            </para>
            <para>
            Nesting of <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>s is not supported,
            since it would probably not be useful.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementOrigin">
            <summary>
            Gets or sets the point of the top-left node.
            </summary>
            <value>
            The default value is the Point(0,0).
            </value>
            <remarks>
            Some kinds of layout may ignore this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.Arrangement">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoXam.Layout.MultiLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> should lay out the nested layouts.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.MultiArrangement.Vertical"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementSpacing">
            <summary>
            Gets or sets the space between which each nested layout will be positioned.
            </summary>
            <value>
            This defaults to the Size(20, 20).
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Layout.MultiArrangement">
            <summary>
            This enumeration specifies how to position the results of nested layouts of a <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiArrangement.None">
            <summary>
            Just use the natural positioning of each layout in the <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiArrangement.Vertical">
            <summary>
            Position each sublayout in a non-overlapping fashion by increasing Y coordinates,
            starting at the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.MultiArrangement.Horizontal">
            <summary>
            Position each sublayout in a non-overlapping fashion by increasing X coordinates,
            starting at the <see cref="P:Northwoods.GoXam.Layout.MultiLayout.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeLayout">
            <summary>
            Position nodes in a tree-like arrangement.
            </summary>
            <remarks>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.#ctor">
            <summary>
            Construct a layout with the default values.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.#ctor(Northwoods.GoXam.Layout.TreeLayout)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.GoXam.Layout.TreeLayout"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Network"/> and <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/>.
            </summary>
            <param name="layout"></param>
            <remarks>
            This copies the inheritable properties from the argument layout's
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/> and the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.NetworkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Network"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/> with the given nodes and links.
            </summary>
            <param name="nodes"></param>
            <param name="links"></param>
            <returns>a <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/></returns>
            <remarks>
            This does not include any nodes of category "Comment".
            Comment nodes are added by the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Do a tree layout.
            </summary>
            <remarks>
            <para>
            If you are re-using this <c>TreeLayout</c> with the same diagram,
            you should set <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Network"/> to null or a new <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/>.
            </para>
            <para>
            If you are re-using the same <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/> too,
            you should set the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> properties, either
            by clearing it and letting <see cref="M:Northwoods.GoXam.Layout.TreeLayout.FindRoots"/> do its job,
            or by specifying all the <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>es that
            are the roots of your trees.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.RootsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Roots"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.RootVertexesProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.PathProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.CreateTrees">
            <summary>
            This method is responsible for initializing all of the <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s,
            setting <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Initialized"/>, <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Level"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Parent"/>, and <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Children"/>,
            and making sure <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/>
            has at least one suitable <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in it.
            </summary>
            <remarks>
            This will call <see cref="M:Northwoods.GoXam.Layout.TreeLayout.FindRoots"/> if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> is empty.
            Then it will iterate over the roots, calling <see cref="M:Northwoods.GoXam.Layout.TreeLayout.WalkTree(Northwoods.GoXam.Layout.TreeVertex)"/> on each one.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.FindRoots">
            <summary>
            This method is responsible for finding all of the root nodes.
            </summary>
            <remarks>
            When you have not already added the roots to the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> collection, this will choose a root node.
            The choice might not be what you want, so we recommend that you specify the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.WalkTree(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Traverse the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Network"/> and assign the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Parent"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Level"/>, and <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Children"/> properties.
            </summary>
            <param name="v"></param>
            <remarks>
            This method should walk the tree recursively.
            The standard implementation gracefully handles shared nodes, including cyclical references.
            However, there can only be one <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Parent"/> per node.
            If a node is declared to be the child of multiple nodes, it is not guaranteed which
            node wins as the parent node.
            If any of the children of this node are in the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> collection,
            they are removed from that collection.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.TreeStyleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.TreeStyle"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Assign initial property values for a <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>.
            </summary>
            <param name="v"></param>
            <remarks>
            <para>
            The values may be inherited, so this method is called while
            propagating values from the root nodes.
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in a depth-first manner starting at a root.
            </para>
            <para>
            You probably do not need to override this method,
            but if you do you should call first either the base method
            or <see cref="M:Northwoods.GoXam.Layout.TreeVertex.CopyInheritedPropertiesFrom(Northwoods.GoXam.Layout.TreeVertex)"/>, since they
            assign most of the <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> property values
            used to influence the layout.
            Informational properties such as <see cref="P:Northwoods.GoXam.Layout.TreeVertex.DescendentCount"/>
            and <see cref="P:Northwoods.GoXam.Layout.TreeVertex.MaxGenerationCount"/> will not yet have been initialized
            by the time this method is called.
            It is more common to override <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> in order to
            modify a property or two to customize the layout at that node.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/> is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.BusBranching"/>,
            this will modify the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/> appropriately depending on which
            side of the bus the vertex is on.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Assign final property values for a <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>.
            </summary>
            <param name="v"></param>
            <remarks>
            <para>
            This method is commonly overidden in order to provide
            tree layout properties for particular nodes.
            This method is called after values have been inherited from other
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s, so you can examine and modify the
            values of related tree nodes.
            </para>
            <para>
            However, when <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/> is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.BusBranching"/>,
            <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SortTreeVertexChildren(Northwoods.GoXam.Layout.TreeVertex)"/> will be called before this method is called.
            In that case changing the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Sorting"/> or
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Comparer"/> properties in this method will have no effect.
            </para>
            <para>
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in a depth-first manner starting at a root.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.SortTreeVertexChildren(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Sort the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Children"/> of a node.
            </summary>
            <param name="v"></param>
            <remarks>
            <para>
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in a depth-first manner starting at a root.
            Normally this is called after all of the vertexes have had their values
            set by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </para>
            <para>
            However, if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/> is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.BusBranching"/>,
            this will be called before <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/>.
            The "BusBranching" alignment depends on inheriting the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>,
            which in turn depends on the sort order, hence sorting must be performed first.
            The difference is that when "BusBranching" the initialization pass has not yet finished,
            so informational properties have not yet been computed when this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Find associated objects to be positioned along with the
            <see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3"/>.<see cref="T:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex"/>.
            </summary>
            <param name="v"></param>
            <remarks>
            This looks for visible <see cref="T:Northwoods.GoXam.Node"/>s
            whose category is "Comment" and that refer to
            the tree vertex's <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/>.
            You may want to override this method in order to customize how
            any associated objects are found and how
            the node's <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Bounds"/>
            are set to reserve space for those associated objects.
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in an indeterminate order.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Position any <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Comments"/> around the vertex.
            </summary>
            <param name="v"></param>
            <remarks>
            This method should not walk the tree, since it is called for each
            <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> in an indeterminate order.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.LayoutTree(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Recursively lay out a subtree starting with the given parent node.
            </summary>
            <param name="v"></param>
            <remarks>
            This method should walk the tree recursively.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.ComputeBusNodeSpacing(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Get the amount of space to insert between a child vertex and its parent spine
            when the parent's <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/> is Bus or BusBranching.
            </summary>
            <param name="child"></param>
            <returns>By default this returns the parent's <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeSpacing"/>;
            a small value may result in unpleasant routing of links, a negative value may cause node overlaps</returns>
            <remarks>
            This function is called on each child vertex to determine the initial distance of a child vertex
            from the spine that connects to its parent vertex.
            This function is not called on the last odd child,
            because that vertex is place at the end of the spine rather than to either side.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.ComputeBusLastRowSpacing(Northwoods.GoXam.Layout.TreeVertex,System.Double)"/>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.ComputeBusLastRowSpacing(Northwoods.GoXam.Layout.TreeVertex,System.Double)">
            <summary>
            Get the amount of space to leave between the sibling child vertexes and this last odd vertex
            when the parent's <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/> is Bus or BusBranching.
            </summary>
            <param name="lastchild"></param>
            <param name="dist">the length of the central line (spine) separating the two sides, so far,
            excluding the initial <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeSpacing"/> that extends from the parent's spine</param>
            <returns>By default this returns the parent's <see cref="P:Northwoods.GoXam.Layout.TreeVertex.RowSpacing"/>;
            a negative value may cause node overlaps</returns>
            <remarks>
            This function is called only when there is an odd number of child vertexes and at least 3.
            This function is not called when the parent vertex only has one child.
            In that case there is no spine separating two columns of child vertexes.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Layout.TreeLayout.ComputeBusNodeSpacing(Northwoods.GoXam.Layout.TreeVertex)"/>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.ArrangementProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Arrangement"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.ArrangementSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ArrangementSpacing"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.ArrangeTrees">
            <summary>
            Position each separate tree.
            </summary>
            <remarks>
            This is called after each tree has been laid out and thus each subtree bounds are known.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.LayoutNodesAndLinks">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.CommitPosition"/> to position each node,
            call <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>, and then call
            <see cref="M:Northwoods.GoXam.Layout.TreeEdge.CommitPosition"/> to route the links.
            </summary>
            <remarks>
            This sets any port spots, as directed by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>,
            and then calls <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutNodes"/> and <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.LayoutNodes">
            <summary>
            Commit the position of all of the vertex nodes.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.LayoutLinks">
            <summary>
            Commit the position and routing of all of the edge links.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            Assign port spots for single-port nodes,
            if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsPortSpot"/> or <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsChildPortSpot"/>
            is true, according to the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/> or <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/>.
            </summary>
            <param name="v"></param>
            <remarks>
            This iterates over all of the <see cref="T:Northwoods.GoXam.Layout.TreeEdge"/>s in the network,
            finds the corresponding <see cref="T:System.Windows.FrameworkElement"/>, and assigns their FromSpot and/or
            ToSpot property if the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsPortSpot"/> and/or
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsChildPortSpot"/> properties are true,
            and if the port's node only has a single port.
            The spot values are given by <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/>
            and <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/> respectively, unless the value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.
            In the latter case the actual spot is determined by the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>
            of the parent node (the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.FromVertex"/>).
            For example, when the angle is zero, the tree grows deeper toward the right.
            So the FromSpot will be set to <c>Spot.MiddleRight</c>, and the
            ToSpot will be set to <c>Spot.MiddleLeft</c>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.SortingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Sorting"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.ComparerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Comparer"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AngleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Angle"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlignmentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.NodeIndentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.NodeIndentPastParentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndentPastParent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.NodeSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingParentOverlapProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingParentOverlap"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.CompactionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Compaction"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.BreadthLimitProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.BreadthLimit"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.RowSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.RowIndentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.CommentSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.CommentMarginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.SetsPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.SetsPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.PortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.SetsChildPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.SetsChildPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateSortingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSorting"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateComparerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateComparer"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateAngleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateAngle"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndentPastParentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndentPastParent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacingParentOverlapProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacingParentOverlap"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateCompactionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCompaction"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateBreadthLimitProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateBreadthLimit"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateRowSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndent"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentSpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentSpacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentMarginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternatePortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternatePortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsChildPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsChildPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeLayout.AlternateChildPortSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateChildPortSpot"/> dependency property.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Roots">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of root <see cref="T:Northwoods.GoXam.Node"/>s;
            this property is deprecated -- use <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> instead.
            </summary>
            <value>
            Initially this will be an empty collection.
            <see cref="M:Northwoods.GoXam.Layout.TreeLayout.FindRoots"/> can determine all of the tree roots by searching the whole network.
            If you have other nodes in mind as the tree roots, you should explicitly initialize the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes"/> collection.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.RootVertexes">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of root <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>es.
            </summary>
            <value>
            Initially this will be an empty collection.
            <see cref="M:Northwoods.GoXam.Layout.TreeLayout.FindRoots"/> can determine all of the tree roots by searching the whole network.
            If you have other vertexes in mind as the tree roots, you should explicitly initialize this collection.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Path">
            <summary>
            Gets or sets how the tree should be constructed from the
            <see cref="T:Northwoods.GoXam.Layout.TreeEdge"/>s connecting <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s.
            </summary>
            <value>
            A value of <see cref="F:Northwoods.GoXam.Layout.TreePath.Destination"/> assumes the edges go from the parent vertex to the child vertexes.
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreePath.Default"/>: use the value of the Diagram's <see cref="P:Northwoods.GoXam.Diagram.TreePath"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.TreeStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.TreeStyle"/> for the resulting trees.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeStyle.Layered"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Arrangement">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoXam.Layout.TreeLayout.ArrangeTrees"/> should lay out the separate trees.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeArrangement.Vertical"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.ArrangementSpacing">
            <summary>
            Gets or sets the space between which <see cref="M:Northwoods.GoXam.Layout.TreeLayout.ArrangeTrees"/> will position the trees.
            </summary>
            <value>
            This defaults to the Size(10, 10).
            </value>
            <remarks>
            This property is ignored if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Arrangement"/> is <see cref="F:Northwoods.GoXam.Layout.TreeArrangement.FixedRoots"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults">
            <summary>
            Gets or sets the object holding the default values for root <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s.
            </summary>
            <remarks>
            The values for the following inheritable properties are actually stored in this object:
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Sorting"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Comparer"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Angle"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndentPastParent"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeSpacing"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingParentOverlap"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Compaction"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.BreadthLimit"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentSpacing"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentMargin"/>,
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.SetsPortSpot"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.SetsChildPortSpot"/>, <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/>.
            The other properties of this <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> are ignored.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults">
            <summary>
            Gets or sets the object holding the default values for alternate layer <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s,
            used when the <see cref="T:System.Windows.Style"/> is <see cref="F:Northwoods.GoXam.Layout.TreeStyle.Alternating"/>
            or <see cref="F:Northwoods.GoXam.Layout.TreeStyle.LastParents"/>.
            </summary>
            <remarks>
            See the list of inheritable properties in the remarks for <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>.
            The other properties of this <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> are ignored.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Sorting">
            <summary>
            Gets or sets the default <see cref="T:Northwoods.GoXam.Layout.TreeSorting"/> policy.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.GoXam.Layout.TreeSorting.Forwards"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Comparer">
            <summary>
            Gets or sets the default <c>IComparer</c> used for sorting.
            </summary>
            <value>
            The default comparer compares the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/> Text values.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Angle">
            <summary>
            Gets or sets the default direction for tree growth.
            </summary>
            <value>
            The default value is 0; the value must be one of: 0, 90, 180, 270.
            These values are in degrees, where 0 is along the positive X axis,
            and where 90 is along the positive Y axis.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Alignment">
            <summary>
            Gets or sets the default alignment of parents relative to their children.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.CenterChildren"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent">
            <summary>
            Gets or sets the default indentation of the first child.
            </summary>
            <value>
            The default value is zero.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            Having a positive value is useful if you want to reserve space
            at the start of the row of children for some reason.
            For example, if you want to pretend the parent node is infinitely deep,
            you can set this to be the breadth of the parent node.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndentPastParent"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndentPastParent">
            <summary>
            Gets or sets the fraction of this node's breadth is added to <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>
            to determine any spacing at the start of the children.
            </summary>
            <value>
            The default value is 0.0 -- the only indentation is specified by <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>.
            When the value is 1.0, the children will be indented past the breadth of the parent node.
            </value>
            <remarks>
            <para>
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.NodeSpacing">
            <summary>
            Gets or sets the distance between child nodes.
            </summary>
            <value>
            The default value is 20.
            A negative value causes sibling nodes to overlap.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing">
            <summary>
            Gets or sets the distance between a parent node and its children.
            </summary>
            <value>
            The default value is 50.
            </value>
            <remarks>
            <para>
            This is the distance between a parent node and its first row
            of children, in case there are multiple rows of its children.
            The <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/> property determines the distance
            between rows of children.
            Negative values may cause children to overlap with the parent.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingParentOverlap"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacingParentOverlap">
            <summary>
            Gets or sets the fraction of the node's depth for which the children's layer starts overlapped with the parent's layer.
            </summary>
            <value>
            The default value is 0.0 -- there is overlap between layers only if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is negative.
            A value of 1.0 and a zero <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> will cause child nodes to completely overlap the parent.
            </value>
            <remarks>
            <para>
            A value greater than zero may still cause overlap between layers,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is large enough.
            A value of zero might still allow overlap between layers,
            if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is negative.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.Compaction">
            <summary>
            Gets or sets how closely to pack the child nodes of a subtree.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeCompaction.Block"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.BreadthLimit">
            <summary>
            Gets or sets a limit on how broad a tree should be.
            </summary>
            <value>
            A value of zero (the default) means there is no limit;
            a positive value specifies a limit.
            The default value is zero.
            </value>
            <remarks>
            <para>
            This property is just a suggested constraint on how
            broadly the tree will be laid out.
            When there isn't enough breadth for all of the children of a node,
            the children are placed in as many rows as needed to try to stay
            within the given breadth limit.
            If the value is too small, since this layout algorithm
            does not modify the size or shape of any node, the nodes will
            just be laid out in a line, one per row, and the breadth is
            determined by the broadest node.
            The distance between rows is specified by <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/>.
            To make room for the links that go around earlier rows to get to
            later rows, when the alignment is not a "center" alignment, the
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/> property specifies that space at the
            start of each row.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing">
            <summary>
            Gets or sets the distance between rows of children.
            </summary>
            <value>
            The default value is 25.
            </value>
            <remarks>
            <para>
            This property is only used when there is more than one
            row of children for a given parent node.
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> determines the distance between
            the parent node and its first row of child nodes.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.BreadthLimit"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent">
            <summary>
            Gets or sets the default indentation of the first child of each row,
            if the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/> is not a "Center" alignment.
            </summary>
            <value>
            The default value is 10.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This is used to leave room for the links that connect a parent node
            with the child nodes that are in additional rows.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.BreadthLimit"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.CommentSpacing">
            <summary>
            Gets or sets the distance between comments.
            </summary>
            <value>
            The default value is 10.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/> and <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentMargin"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.CommentMargin">
            <summary>
            Gets or sets the distance between a node and its comments.
            </summary>
            <value>
            The default value is 20.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/> and <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.CommentSpacing"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.SetsPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            FromSpot for this parent node port.
            </summary>
            <value>
            The default value is true -- this may modify the spot of the port of this node, the parent,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot">
            <summary>
            Gets or sets the spot that this node's port gets as its FromSpot.
            </summary>
            <value>The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a FromSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's ToSpot is set instead of the FromSpot.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.SetsChildPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            ToSpot for each child node port.
            </summary>
            <value>
            The default value is true -- this may modify the spots of the ports of the children nodes,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot">
            <summary>
            Gets or sets the spot that children nodes' ports get as their ToSpot.
            </summary>
            <value>The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a ToSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's FromSpot is set instead of the ToSpot.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSorting">
            <summary>
            Gets or sets the default <see cref="T:Northwoods.GoXam.Layout.TreeSorting"/> policy.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.GoXam.Layout.TreeSorting.Forwards"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateComparer">
            <summary>
            Gets or sets the default <c>IComparer</c> used for sorting.
            </summary>
            <value>
            The default comparer compares the <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.Node"/> Text values.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateAngle">
            <summary>
            Gets or sets the default direction for tree growth.
            </summary>
            <value>
            The default value is 0; the value must be one of: 0, 90, 180, 270.
            These values are in degrees, where 0 is along the positive X axis,
            and where 90 is along the positive Y axis.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateAlignment">
            <summary>
            Gets or sets the default alignment of parents relative to their children.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.CenterChildren"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndent">
            <summary>
            Gets or sets the default indentation of the first child.
            </summary>
            <value>
            The default value is zero.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            Having a positive value is useful if you want to reserve space
            at the start of the row of children for some reason.
            For example, if you want to pretend the parent node is infinitely deep,
            you can set this to be the breadth of the parent node.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndentPastParent"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndentPastParent">
            <summary>
            Gets or sets the fraction of this node's breadth is added to <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>
            to determine any spacing at the start of the children.
            </summary>
            <value>
            The default value is 0.0 -- the only indentation is specified by <see cref="P:Northwoods.GoXam.Layout.TreeLayout.NodeIndent"/>.
            When the value is 1.0, the children will be indented past the breadth of the parent node.
            </value>
            <remarks>
            <para>
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateNodeSpacing">
            <summary>
            Gets or sets the distance between child nodes.
            </summary>
            <value>
            The default value is 20.
            A negative value causes sibling nodes to overlap.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacing">
            <summary>
            Gets or sets the distance between a parent node and its children.
            </summary>
            <value>
            The default value is 50.
            </value>
            <remarks>
            <para>
            This is the distance between a parent node and its first row
            of children, in case there are multiple rows of its children.
            The <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/> property determines the distance
            between rows of children.
            Negative values may cause children to overlap with the parent.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacingParentOverlap"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateLayerSpacingParentOverlap">
            <summary>
            Gets or sets the fraction of the node's depth for which the children's layer starts overlapped with the parent's layer.
            </summary>
            <value>
            The default value is 0.0 -- there is overlap between layers only if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is negative.
            A value of 1.0 and a zero <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> will cause child nodes to completely overlap the parent.
            </value>
            <remarks>
            <para>
            A value greater than zero may still cause overlap between layers,
            unless the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is large enough.
            A value of zero might still allow overlap between layers,
            if <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> is negative.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCompaction">
            <summary>
            Gets or sets how closely to pack the child nodes of a subtree.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeCompaction.Block"/>.
            </value>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateBreadthLimit">
            <summary>
            Gets or sets a limit on how broad a tree should be.
            </summary>
            <value>
            A value of zero (the default) means there is no limit;
            a positive value specifies a limit.
            The default value is zero.
            </value>
            <remarks>
            <para>
            This property is just a suggested constraint on how
            broadly the tree will be laid out.
            When there isn't enough breadth for all of the children of a node,
            the children are placed in as many rows as needed to try to stay
            within the given breadth limit.
            If the value is too small, since this layout algorithm
            does not modify the size or shape of any node, the nodes will
            just be laid out in a line, one per row, and the breadth is
            determined by the broadest node.
            The distance between rows is specified by <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowSpacing"/>.
            To make room for the links that go around earlier rows to get to
            later rows, when the alignment is not a "center" alignment, the
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RowIndent"/> property specifies that space at the
            start of each row.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowSpacing">
            <summary>
            Gets or sets the distance between rows of children.
            </summary>
            <value>
            The default value is 25.
            </value>
            <remarks>
            <para>
            This property is only used when there is more than one
            row of children for a given parent node.
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.LayerSpacing"/> determines the distance between
            the parent node and its first row of child nodes.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateBreadthLimit"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndent">
            <summary>
            Gets or sets the default indentation of the first child of each row,
            if the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Alignment"/> is not a "Center" alignment.
            </summary>
            <value>
            The default value is 10.  The value should be non-negative.
            </value>
            <remarks>
            <para>
            This is used to leave room for the links that connect a parent node
            with the child nodes that are in additional rows.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateBreadthLimit"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateRowIndent"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentSpacing">
            <summary>
            Gets or sets the distance between comments.
            </summary>
            <value>
            The default value is 10.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/> and <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentMargin"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentMargin">
            <summary>
            Gets or sets the distance between a node and its comments.
            </summary>
            <value>
            The default value is 20.
            </value>
            <remarks>
            <para>
            This is used by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/> and <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutComments(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateCommentSpacing"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            FromSpot for this parent node port.
            </summary>
            <value>
            The default value is true -- this may modify the spot of the port of this node, the parent,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.PortSpot"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternatePortSpot">
            <summary>
            Gets or sets the spot that this node's port gets as its FromSpot.
            </summary>
            <value>The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a FromSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's ToSpot is set instead of the FromSpot.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateSetsChildPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            ToSpot for each child node port.
            </summary>
            <value>
            The default value is true -- this may modify the spots of the ports of the children nodes,
            if the node has only a single port.
            </value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeLayout.ChildPortSpot"/>.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeLayout.AlternateChildPortSpot">
            <summary>
            Gets or sets the spot that children nodes' ports get as their ToSpot.
            </summary>
            <value>The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.</value>
            <remarks>
            <para>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a ToSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's FromSpot is set instead of the ToSpot.
            </para>
            <para>
            This sets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>'s property of the same name.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreePath">
            <summary>
            This enumeration specifies how to build a tree from the <see cref="T:Northwoods.GoXam.Layout.TreeNetwork"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreePath.Default">
            <summary>
            This value for <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> uses the value of <see cref="P:Northwoods.GoXam.Diagram.TreePath"/>
            to determine whether edges go from the parent vertex to child vertexes or vice-versa.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreePath.Destination">
            <summary>
            The children of a <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> are its <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DestinationVertexes"/>,
            the collection of connected <see cref="T:Northwoods.GoXam.Layout.TreeEdge"/>.<see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.ToVertex"/>s.
            The tree roots are those <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s that have a zero <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.SourceEdgesCount"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreePath.Source">
            <summary>
            The children of a <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> are its <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.SourceVertexes"/>,
            the collection of connected <see cref="T:Northwoods.GoXam.Layout.TreeEdge"/>.<see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.FromVertex"/>s.
            The tree roots are those <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s that have a zero <see cref="P:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.DestinationEdgesCount"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeSorting">
            <summary>
            This enumeration specifies whether to sort the children of a node,
            and in what order to position them.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeSorting.Forwards">
            <summary>
            Lay out each child in the order in which they were found.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeSorting.Reverse">
            <summary>
            Lay out each child in reverse order from which they were found.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeSorting.Ascending">
            <summary>
            Lay out each child according to the sort order given by <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Comparer"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeSorting.Descending">
            <summary>
            Lay out each child in reverse sort order given by <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Comparer"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeAlignment">
            <summary>
            This enumeration specifies how to position a parent <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>
            relative to its children, or how to align children in a bus.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.CenterSubtrees">
            <summary>
            The parent is centered at the middle of the range of its child subtrees.
            When there is a breadth limit that causes there to be multiple rows,
            the links that extend from the parent to those children in rows past
            the first one may cross over the nodes that are in earlier rows.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.CenterChildren">
            <summary>
            The parent is centered at the middle of the range of its immediate child nodes.
            When there is a breadth limit that causes there to be multiple rows,
            the links that extend from the parent to those children in rows past
            the first one may cross over the nodes that are in earlier rows.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.Start">
            <summary>
            The parent is positioned near the first of its children.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.End">
            <summary>
            The parent is positioned near the last of its children.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.Bus">
            <summary>
            The children are positioned in a bus on both sides of an "aisle" where the links to them go,
            with the last odd child (if any) placed at the end of the aisle in the middle.
            The children, if they are themselves parents, continue at the same inherited angle;
            use <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.BusBranching"/> if you want grandchildren to proceed growing in
            the different angle as determined by the side.
            A bus does not take BreadthLimit into account.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.TopLeftBus">
            <summary>
            The children are positioned in a bus, only on the top or left side of the parent,
            A bus does not take BreadthLimit into account.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.BottomRightBus">
            <summary>
            The children are positioned in a bus, only on the bottom or right side of the parent.
            A bus does not take BreadthLimit into account.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeAlignment.BusBranching">
            <summary>
            Like <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Bus"/> with the children arranged on both sides of an "aisle"
            with any last odd child placed at the end of the aisle,
            but the children get an <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/> that depends on which side of the aisle
            they were placed.
            This only works well when the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.TreeStyle"/> is <see cref="F:Northwoods.GoXam.Layout.TreeStyle.Layered"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeCompaction">
            <summary>
            This enumeration specifies how closely packed the children of a node should be.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeCompaction.None">
            <summary>
            Only simple placement of children next to each other, as determined by their subtree breadth.
            For any node, there will not be another node at any depth occupying the same breadth position,
            unless there are multiple rows.  In other words, if there is no breadth limit resulting in
            multiple rows, with this compaction mode it is as if every node were infinitely deep.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeCompaction.Block">
            <summary>
            A simple fitting of subtrees.
            This mode produces more compact trees -- often nicer looking too.
            Nodes will not overlap each other, unless you have negative values
            for some of the spacing properties.
            However it is possible when the links are orthogonally styled that
            occasionally the subtrees will be placed so close together that some
            links may overlap the links or even the nodes of other subtrees.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeStyle">
            <summary>
            This enumeration identifies the general style in which the nodes are laid out.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeStyle.Layered">
            <summary>
            The normal tree style, where all of the children of each <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> are lined up
            horizontally or vertically.
            Each <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> gets its properties from its parent node.
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/> is used for all default <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> property values;
            <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/> is ignored.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeStyle.LastParents">
            <summary>
            Just like the standard layered style, except that the nodes with children but no grandchildren
            have alternate properties.
            Each <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> gets its properties from its parent node.
            However, for those nodes whose <see cref="P:Northwoods.GoXam.Layout.TreeVertex.MaxGenerationCount"/> is 1,
            in other words when it has children but no grandchildren,
            the properties are copied from the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>.
            If the tree only has two levels, the root node gets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeStyle.Alternating">
            <summary>
            Alternate layers of the tree have different properties, typically including the angle.
            Each <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/> gets its properties from its "grand-parent" node.
            The root nodes get their defaults from <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/>;
            the immediate children of root nodes get their defaults from <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/>.
            Depending on the properties used, it is possible for some link routes to cross over nodes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeStyle.RootOnly">
            <summary>
            All of the nodes get the alternate properties, except the root node gets the default properties.
            The root node gets the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.RootDefaults"/> properties,
            the root node's children get the <see cref="P:Northwoods.GoXam.Layout.TreeLayout.AlternateDefaults"/> properties,
            and all of the rest of the <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s get their properties from their parent node.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeArrangement">
            <summary>
            This enumeration specifies how to position the resulting trees in the document.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeArrangement.Vertical">
            <summary>
            Position each tree in a non-overlapping fashion by increasing Y coordinates,
            starting at the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeArrangement.Horizontal">
            <summary>
            Position each tree in a non-overlapping fashion by increasing X coordinates,
            starting at the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.ArrangementOrigin"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.TreeArrangement.FixedRoots">
            <summary>
            Do not move each root node, but position all of their descendents relative to their root.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeNetwork">
            <summary>
            This provides an abstract view of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a
            network (graph) of nodes and directed links.  These nodes and links correspond to
            <see cref="T:Northwoods.GoXam.Part"/>s provided in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeEdge">
            <summary>
            Holds auto-layout specific link data.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeEdge.CommitPosition">
            <summary>
            Commits the position of the link to the corresponding Link.
            </summary>
            <remarks>
            This routes the Link's Route.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeEdge.RelativePoint">
            <summary>
            Gets or sets a point, relative to the parent node,
            that may be useful in routing this link.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.TreeVertex">
            <summary>
            Holds auto-layout specific node data.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.TreeVertex.CopyInheritedPropertiesFrom(Northwoods.GoXam.Layout.TreeVertex)">
            <summary>
            This method just copies inheritable properties from
            another <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>.
            </summary>
            <param name="n"></param>
            <remarks>
            The properties include:
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Sorting"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Comparer"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeIndent"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeIndentPastParent"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeSpacing"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacing"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacingParentOverlap"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Compaction"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.BreadthLimit"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.RowSpacing"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.RowIndent"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.CommentSpacing"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.CommentMargin"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsPortSpot"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.PortSpot"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsChildPortSpot"/>
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.ChildPortSpot"/>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Initialized">
            <summary>
            Gets or sets whether this node has been initialized as part of <see cref="M:Northwoods.GoXam.Layout.TreeLayout.CreateTrees"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Parent">
            <summary>
            Gets or sets the logical parent for this node.
            </summary>
            <remarks>
            This structural property is computed in <see cref="M:Northwoods.GoXam.Layout.TreeLayout.WalkTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Children">
            <summary>
            Gets or sets the array of logical children for this node.
            </summary>
            <remarks>
            This structural property is computed in <see cref="M:Northwoods.GoXam.Layout.TreeLayout.WalkTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.ChildrenCount">
            <summary>
            Gets the number of immediate children that this node has.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.Children"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.DescendentCount"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Level">
            <summary>
            Gets the number of single-parent ancestors this node has.
            </summary>
            <remarks>
            This could also be interpreted as which layer this node is in.
            A root node will have a value of zero.
            This informational property is computed in <see cref="M:Northwoods.GoXam.Layout.TreeLayout.WalkTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.DescendentCount">
            <summary>
            Gets the number of descendents this node has.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.ChildrenCount"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.MaxChildrenCount">
            <summary>
            Gets the maximum number of children of any descendent of this node.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.MaxGenerationCount"/>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.ChildrenCount"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.MaxGenerationCount">
            <summary>
            Gets the maximum depth of the subtrees below this node.
            </summary>
            <remarks>
            For a leaf node, this will be zero.
            This informational property is computed as part of the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> pass.
            You probably should not be setting this property.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.MaxChildrenCount"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.RelativePosition">
            <summary>
            Gets or sets the position of this node relative to its parent node.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.SubtreeSize">
            <summary>
            Gets or sets the size of the subtree (including all descendents) parented by this node.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            Of course if there are no children, this is just the same as <see cref="T:System.Windows.Size"/>.
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.SubtreeOffset">
            <summary>
            Gets or sets the offset of this parent node relative to its whole subtree.
            </summary>
            <remarks>
            This informational property is computed by <see cref="M:Northwoods.GoXam.Layout.TreeLayout.LayoutTree(Northwoods.GoXam.Layout.TreeVertex)"/>.
            Of course if there are no children, this is just (0, 0).
            You probably should not be setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Comments">
            <summary>
            Gets or sets a collection of <see cref="T:Northwoods.GoXam.Node"/>s that will be
            positioned near the node.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            These objects should not have their own <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>s to be laid out.
            Typically these will be instances of <see cref="T:Northwoods.GoXam.Node"/>s
            whose <see cref="P:Northwoods.GoXam.Part.Category"/> is "Comment".
            This collection should be allocated and initialized in <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AddComments(Northwoods.GoXam.Layout.TreeVertex)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Sorting">
            <summary>
            Gets or sets whether and in what order the children should be sorted.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeSorting.Forwards"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Comparer">
            <summary>
            Gets or sets how the children should be sorted.
            </summary>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Angle">
            <summary>
            Gets or sets the actual absolute angle at which this node should grow.
            </summary>
            <value>
            The default value is zero, meaning that general tree growth should proceed rightwards along the X axis.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            By default this is the same as the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/> of the parent <see cref="T:Northwoods.GoXam.Layout.TreeVertex"/>.
            However, after the initial propagation of property values, perhaps in
            an override of <see cref="M:Northwoods.GoXam.Layout.TreeLayout.AssignTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/>,
            you could just set this property to specify the angle at which this node grows
            it subtrees.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Alignment">
            <summary>
            Gets or sets how this parent node should be aligned relative to its children.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.CenterChildren"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.NodeIndent">
            <summary>
            Gets or sets the distance the first child should be indented.
            </summary>
            <value>
            The default value is zero.  The value should be non-negative.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.NodeIndentPastParent">
            <summary>
            Gets or sets whether the first child should be indented past the parent node's breadth.
            </summary>
            <value>
            The default value is 0.0 -- the only start or end spacing is provided by <see cref="P:Northwoods.GoXam.Layout.TreeVertex.NodeIndent"/>.
            </value>
            <remarks>
            Values must range from 0.0 to 1.0, where 1.0 means the full breadth of this node.
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            This property is only sensible when the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Alignment"/>
            is <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.Start"/> or <see cref="F:Northwoods.GoXam.Layout.TreeAlignment.End"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.NodeSpacing">
            <summary>
            Gets or sets the distance between child nodes.
            </summary>
            <value>
            The default value is 20.
            A negative value causes sibling nodes to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacing">
            <summary>
            Gets or sets the distance there should be between this node and its layer of children.
            </summary>
            <value>
            The default value is 50.
            Negative values may cause children to overlap with the parent.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacingParentOverlap"/>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacingParentOverlap">
            <summary>
            Gets or sets the fraction of this node's depth that may overlap with the children's layer.
            </summary>
            <value>
            Values must range from 0.0 to 1.0, where 1.0 means the full depth of this node.
            The default value is 0.0 -- there is overlap only if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacing"/> is negative.
            </value>
            <remarks>
            When this value is greater than 0.0, there might not be overlap if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacing"/>
            is larger than the depth of this node times this fraction.
            Even when this value is 0.0, there may be overlap when <see cref="P:Northwoods.GoXam.Layout.TreeVertex.LayerSpacing"/> is negative.
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.Compaction">
            <summary>
            Gets or sets how the children of this node should be packed together.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.TreeCompaction.Block"/>.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.BreadthLimit">
            <summary>
            Gets or sets how broad a node and its descendents should be.
            </summary>
            <value>
            By default this is zero.  A value of zero imposes no limit;
            a positive value will specify a limit for the total width of this subtree.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.RowSpacing">
            <summary>
            Gets or sets the distance between rows within one layer, all sharing the same parent.
            </summary>
            <value>
            The default value is 25.
            Negative values may cause nodes to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.RowIndent">
            <summary>
            Gets or sets the distance the first child of each row should be indented.
            </summary>
            <value>
            The default value is 10.  The value should be non-negative.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            This property is only used when the <see cref="P:Northwoods.GoXam.Layout.TreeVertex.BreadthLimit"/> is positive,
            and some initial space needs to be reserved in each row of nodes for the links
            that are routed around those rows.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.CommentSpacing">
            <summary>
            Gets or sets the space to leave between consecutive comments.
            </summary>
            <value>
            The default value is 10.
            Negative values may cause comments to overlap.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.CommentMargin">
            <summary>
            Gets or sets the space to leave between the node and the comments.
            </summary>
            <value>
            The default value is 20.
            Negative values may cause comments to overlap with the node.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.SetsPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            FromSpot for this parent node port.
            </summary>
            <value>
            The default value is true -- this may modify the spot of the port of this node, the parent,
            if the node has only a single port.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeVertex.PortSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.PortSpot">
            <summary>
            Gets or sets the spot that this node's port gets as its FromSpot,
            if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsPortSpot"/> is true and the node has only a single port.
            </summary>
            <value>The default value is <c>Spot.Default</c>.</value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a FromSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's ToSpot is set instead of the FromSpot.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.SetsChildPortSpot">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/> should set the
            ToSpot for each child node port.
            </summary>
            <value>
            The default value is true -- this may modify the spots of the ports of the children nodes,
            if the node has only a single port.
            </value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            The spot used depends on the value of <see cref="P:Northwoods.GoXam.Layout.TreeVertex.ChildPortSpot"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.TreeVertex.ChildPortSpot">
            <summary>
            Gets or sets the spot that children nodes' ports get as their ToSpot,
            if <see cref="P:Northwoods.GoXam.Layout.TreeVertex.SetsChildPortSpot"/> is true and the node has only a single port.
            </summary>
            <value>The default value is <c>Spot.Default</c>.</value>
            <remarks>
            This inherited property is initialized in the <see cref="M:Northwoods.GoXam.Layout.TreeLayout.InitializeTreeVertexValues(Northwoods.GoXam.Layout.TreeVertex)"/> method.
            A value of <c>Spot.Default</c> will cause <see cref="M:Northwoods.GoXam.Layout.TreeLayout.SetPortSpots(Northwoods.GoXam.Layout.TreeVertex)"/>
            to assign a ToSpot based on the parent node's
            <see cref="P:Northwoods.GoXam.Layout.TreeVertex.Angle"/>.
            If the value is other than <c>NoSpot</c>, it is just assigned.
            When <see cref="P:Northwoods.GoXam.Layout.TreeLayout.Path"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            the port's FromSpot is set instead of the ToSpot.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularLayout">
            <summary>
            Position nodes in a circular arrangement.
            </summary>
            <remarks>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.#ctor">
            <summary>
            Construct a layout with the default values.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.#ctor(Northwoods.GoXam.Layout.CircularLayout)">
            <summary>
            Make a copy of a <see cref="T:Northwoods.GoXam.Layout.CircularLayout"/>, copying most of the
            important properties except for the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Network"/>.
            </summary>
            <param name="layout"></param>
            <remarks>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.RadiusProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.AspectRatioProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.AspectRatio"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.StartAngleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.StartAngle"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.SweepAngleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.SweepAngle"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.ArrangementProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Arrangement"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.DirectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Direction"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.SortingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Sorting"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.ComparerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Comparer"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.SpacingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.NodeDiameterFormulaProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.NodeDiameterFormula"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.RoutingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Routing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.NetworkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Network"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.CreateNetwork">
            <summary>
            Allocate a <see cref="T:Northwoods.GoXam.Layout.CircularNetwork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.MakeNetwork(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Create and initialize a <see cref="T:Northwoods.GoXam.Layout.CircularNetwork"/> with the given nodes and links.
            </summary>
            <param name="nodes">The nodes in the network</param>
            <param name="links">The links in the network</param>
            <returns>The <see cref="T:Northwoods.GoXam.Layout.CircularNetwork"/> created</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.SetEffectiveValues(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex}@,System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex}@,System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex}@)">
            <summary>
            Finds the effective values, which may differ from actual values
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.DoLayout(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})">
            <summary>
            Do a circular layout.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.AngleLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the angle between any item and
            an adjacent item is the same
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.SpacingLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the spacing between any item and
            an adjacent item is the same
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.DistanceLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the distance between any item and
            an adjacent item is the same
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.PackedLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the spacing between any item and
            an adjacent item is the same, but takes into account the assumption
            that the nodes are rectangular.
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.vertexarrangement">
            <summary>
            Keeps track of the best set of positions for the vertices (i.e., with the minimum overlap
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLayout.packediters">
            <summary>
            Keeps track of the number of iterations of the Packed layout
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.PackedLayoutFull(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the spacing between any item and
            an adjacent item is the same, but takes into account the assumption
            that the nodes are rectangular.  This one assumes 360 degree sweep
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.PackedLayoutSemi(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Arranges the items so the spacing between any item and
            an adjacent item is the same, but takes into account the assumption
            that the nodes are rectangular.  This one assumes partial sweep, i.e., <see cref="P:Northwoods.GoXam.Layout.CircularLayout.SweepAngle"/> is
            less than 360.
            </summary>
            <param name="vertices">The items to arrange</param>
            <param name="sweep">The range of the angles of the nodes (in radians)</param>
            <param name="start">The angle of the first node</param>
            <param name="dir">
            Specifies whether the nodes are arranged clockwise or counterclockwise.  Other
            values will be assumed to indicate clockwise (this function doesn't do bidirectionals - those
            are achieved by calling this function once for even nodes and again in the other direction for
            odd nodes.
            </param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.nexth(System.Double,System.Double,Northwoods.GoXam.Layout.CircularVertex[],System.Int32,System.Double@,System.Double@,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Finds the coords. of the next item in the <see cref="M:Northwoods.GoXam.Layout.CircularLayout.PackedLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)"/> if it's
            added horizontally.
            </summary>
            <param name="x">X coord. of previous node</param>
            <param name="y">Y coord. of previous node</param>
            <param name="verts">The list of all nodes</param>
            <param name="v">The index of the previous node in verts</param>
            <param name="newx">Returns the x coord. of the new node</param>
            <param name="newy">Returns the y coord. of the new node</param>
            <param name="dir">Whether the nodes are arranged Clockwise or Counterclockwise</param>
            <returns>true if a node can be added horizontally and still be on the ellipse</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.nextv(System.Double,System.Double,Northwoods.GoXam.Layout.CircularVertex[],System.Int32,System.Double@,System.Double@,Northwoods.GoXam.Layout.CircularDirection)">
            <summary>
            Finds the coords. of the next item in the <see cref="M:Northwoods.GoXam.Layout.CircularLayout.PackedLayout(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex},System.Double,System.Double,Northwoods.GoXam.Layout.CircularDirection)"/> if it's
            added vertically.
            </summary>
            <param name="x">X coord. of previous node</param>
            <param name="y">Y coord. of previous node</param>
            <param name="verts">The list of all nodes</param>
            <param name="v">The index of the previous node in verts</param>
            <param name="newx">Returns the x coord. of the new node</param>
            <param name="newy">Returns the y coord. of the new node</param>
            <param name="dir">Whether the nodes are arranged Clockwise or Counterclockwise</param>
            <returns>true if a node can be added vertically and still be on the ellipse</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.EllipsePerim(System.Double,System.Double)">
            <summary>
            Finds the perimeter of an ellipse with radii a and b
            </summary>
            <param name="a">One radius</param>
            <param name="b">The other radius</param>
            <returns>The circumference</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.EllipsePerim(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds the perimeter of an ellipse with radii a and b
            </summary>
            <param name="a">One radius</param>
            <param name="b">The other radius</param>
            <param name="theta0">The angle at which the arc begins</param>
            <param name="sweep">The sweep angle of the  arc.</param>
            <returns>The circumference</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.InverseEllipsePerim(System.Double,System.Double)">
            <summary>
            Returns X radius of ellipse with specified circumference and Aspect ratio
            </summary>
            <param name="circ">The perimeter of ellipse</param>
            <param name="asprat">The ellipse's aspect ratio</param>
            <returns>The X radius</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.InverseEllipsePerim(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns X radius of ellipse with specified circumference and Aspect ratio
            </summary>
            <param name="circ">The perimeter of ellipse</param>
            <param name="asprat">The ellipse's aspect ratio</param>
            <param name="theta0">The angle at which the arc begins</param>
            <param name="sweep">The sweep angle of the  arc.</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.EllipseAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the angle of an elliptical arc of specified length
            </summary>
            <param name="a">The X radius of the ellipse</param>
            <param name="b">The Y radius</param>
            <param name="theta0">The angle at which the arc begins</param>
            <param name="length">The length of the arc</param>
            <returns>The angle of the arc in radians.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.Sort(Northwoods.GoXam.Layout.CircularVertex[])">
            <summary>
            Sorts the vertexes based on whatever <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Sorting"/> specifies.
            </summary>
            <param name="vertexes">The vertexes to sort</param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.ConnectivityArrange(Northwoods.GoXam.Layout.CircularVertex[])">
            <summary>
            Sorts the nodes based on connectivity.  The oth node is the one with the highest
            connectivity, and each subsequent node it the one with the greatest number of links with nodes
            already in the list
            </summary>
            <param name="l">The nodes to sort</param>
            <returns>The sorted list</returns>
            <remarks>This is used for cross reduction before <see cref="M:Northwoods.GoXam.Layout.CircularLayout.Optimize(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})"/> is called because
            it makes the cross reduction much more effective.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.Optimize(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})">
            <summary>
            Sorts the nodes to avoid crossing links
            </summary>
            <param name="v">The nodes to sort</param>
            <returns>The sorted nodes</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.ConnectivityArrangeSubsets(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularLayout.Subset})">
            <summary>
            Arranges subsets based on connectivity the same was as <see cref="M:Northwoods.GoXam.Layout.CircularLayout.ConnectivityArrange(Northwoods.GoXam.Layout.CircularVertex[])"/>.
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.OptimizeSubsets(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularLayout.Subset})">
            <summary>
            Optimizes each <see cref="T:Northwoods.GoXam.Layout.CircularLayout.Subset"/> the way <see cref="M:Northwoods.GoXam.Layout.CircularLayout.Optimize(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})"/> does, and optimizes the
            nodes within each Subset
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.Subsets(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})">
            <summary>
            Divides the nodes into subsets
            </summary>
            <param name="l"></param>
            <returns>A list of Subsets</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.OptimizeGroup(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})">
            <summary>
            Optimizes nodes by dividing them into groups and optimizing each group.
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.Crossings(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32[],System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Finds the # of link crossings added when a node is inserted at a specified index
            </summary>
            <param name="newlinks">All the nodes to which the new node links</param>
            <param name="links1">One endpoint of all the existing links</param>
            <param name="links2">Other endpoint of all existing links</param>
            <param name="indexes">The indexes of each element in opt</param>
            <param name="node">The new node is inserted before this index (includes 0)</param>
            <param name="opt">the list of all the nodes currently in optimized list</param>
            <returns># of crossings</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.LayoutNodesAndLinks">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.Vertex.CommitPosition"/> to position each node,
            call LayoutComments, and then call
            <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.Edge.CommitPosition"/> to route the links.
            </summary>
            <remarks>
            This sets any port spots, as directed by SetPortSpots,
            and then calls <see cref="M:Northwoods.GoXam.Layout.CircularLayout.LayoutNodes"/> and <see cref="M:Northwoods.GoXam.Layout.CircularLayout.LayoutLinks"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.LayoutNodes">
            <summary>
            Commit the position of all of the vertex nodes.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.LayoutLinks">
            <summary>
            Commit the position and routing of all of the edge links.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Radius">
            <summary>
            Gets/sets the horizontal radius of the elliptical arrangement
            </summary>
            <value>
            The default value is <b>NaN</b>.
            <b>NaN</b> indicates that the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> will determing size of ring.
            If <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is also <b>NaN</b>, the effective spacing will be 6.
            If <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is a number, the effective radius will be &gt; Radius if and only if
            the spacing between elements would otherwise be less than spacing.
            The specified value for <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> will be ignored if <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Arrangement"/>==<see cref="F:Northwoods.GoXam.Layout.CircularArrangement.Packed"/>.
            This property must always be positive or <b>NaN</b>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.AspectRatio">
            <summary>
            Gets or sets the ratio of the arrangement's height to its width 
            (1 for a circle, &gt;1 for a vertically elongated ellipse).
            </summary>
            <value>
            This is 1 by default.
            The value must be a positive number.
            </value>
            <remarks>
            Modifying this value changes the height, but keeps the width and the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> constant.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.StartAngle">
            <summary>
            Gets or sets the angle (in degrees, clockwise from the positive side of the X axis) of the first element.
            </summary>
            <value>
            The default value is 0.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.SweepAngle">
            <summary>
            Gets or sets the absolute angle (in degrees) between the first and last node.
            </summary>
            <value>
            The default value is 360.
            The value must be greater than zero and less than or equal to 360.
            If it is not in this range, it will be automatically set to 360.
            </value>
            <remarks>
            Whether the arrangement is clockwise or counterclockwise does not depend on the sign of this value.
            The direction can be controlled by setting <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Direction"/>.
            If 360 is the specified value, the actual value will be less to keep the first and last
            elements from overlapping, and the spacing between the first and last nodes will be determined
            the same way as for all other adjacent nodes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Arrangement">
            <summary>
            Gets or sets how the nodes are spaced.
            If <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Arrangement"/> == <see cref="F:Northwoods.GoXam.Layout.CircularArrangement.Packed"/>,
            the specified <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> will be ignored
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.CircularArrangement.ConstantSpacing"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Direction">
            <summary>
            Gets or sets whether the nodes are arranged clockwise or counterclockwise.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Layout.CircularDirection.Clockwise"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Sorting">
            <summary>
            Gets or sets if and how the nodes are sorted.
            </summary>
            <value>
            <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Forwards"/> indicates that the nodes are arranged in the order the layout gets them.
            <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Reverse"/> indicates that the nodes are arranged in the reverse order that the layout gets them.
            <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Ascending"/> and <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Descending"/> indicate that the nodes
            will be sorted using the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Comparer"/>
            <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Optimized"/> indicates that the nodes will be arranged to minimize link crossings
            The default value is <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Optimized"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Comparer">
            <summary>
            Gets or sets the comparer which sorts the data when <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Sorting"/> is
            set to <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Ascending"/> or <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Descending"/>.
            </summary>
            <value>
            The default is null, meaning the vertices are not sorted (this is equivalent to specifying
            <see cref="F:Northwoods.GoXam.Layout.CircularSorting.Forwards"/> for the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Sorting"/> property.)
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Spacing">
            <summary>
            Gets or sets the distance between nodes (if <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> is <b>NaN</b>)
            or the minimum distance between nodes (if <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> is a number).
            </summary>
            <value>
            The default value is 6.
            The value may be <b>NaN</b>.
            </value>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is <b>NaN</b>, there is no minimum spacing, allowing nodes to overlap,
            unless <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> is <b>NaN</b>,
            in which case the effective spacing will be 6 to determine an effective radius.
            If <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is a number but <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> isn't,
            the effective spacing will be Spacing, and this will determine the effective radius.
            If both <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> and <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/> are numbers,
            the effective radius will be at least <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Radius"/>,
            but may be larger so that the minimum spacing between nodes is <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.NodeDiameterFormula">
            <summary>
            Specifies how the diameter of nodes will be calculated.
            When a node is not circular, it is not clear what its diameter is.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.GoXam.Layout.CircularNodeDiameterFormula.Pythagorean"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Routing">
            <summary>
            Specifies whether the links should be curved to avoid nodes.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.GoXam.Layout.CircularLinkRouting.Default"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.ActualXRadius">
            <summary>
            Gets the effective X Radius that may have been calculated by the layout.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.ActualYRadius">
            <summary>
            Gets the effective Y Radius that may have been calculated by the layout.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.ActualSpacing">
            <summary>
            Gets the effective Spacing that may have been calculated by the layout.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.ActualCenter">
            <summary>
            Returns the coordinates of the center of the laid-out ellipse.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularLayout.Network">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.CircularNetwork"/> that the layout will be performed on.
            </summary>
            <value>
            The initial value is null.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement">
            <summary>
            Represents positions for the vertices and the size of the gap they cause, so the Packed layout can keep
            track of which positions worked best
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.compare(System.Double,Northwoods.GoXam.Layout.CircularVertex[])">
            <summary>
            Compares a new gap with the current one.  If it's better, it updates <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.gap"/>, <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.xcoords"/>,and <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.ycoords"/>.
            This is for a partial sweep, where overshooting (gap less than 0) is worse than undershooting (gap &gt; 0) because it will cause nodes
            to overlap
            </summary>
            <param name="gap"></param>
            <param name="verts"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.compare2(System.Double,Northwoods.GoXam.Layout.CircularVertex[])">
            <summary>
            Compares a new gap with the current one.  If it's better, it updates <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.gap"/>, <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.xcoords"/>,and <see cref="F:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.ycoords"/>.
            This is for a partial sweep, where overshooting (gap less than 0) is no worse than undershooting (gap &gt; 0).
            </summary>
            <param name="gap"></param>
            <param name="verts"></param>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularLayout.VertexArrangement.commit(System.Collections.Generic.List{Northwoods.GoXam.Layout.CircularVertex})">
            <summary>
            Sets the vertices in verts to the correct positions
            </summary>
            <param name="verts">The vertices who's positions are set</param>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularLayout.Subset">
            <summary>
            Represents a single subset of nodes that can be treated as a single node when optimizing
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularNetwork">
            <summary>
            This provides an abstract view of a network (a graph) of nodes and directed links.
            These nodes and links correspond to
            <see cref="T:Northwoods.GoXam.Part"/>s provided in the <see cref="T:Northwoods.GoXam.Diagram"/>.
            This class provides a framework for manipulating the
            state of nodes and links without modifying the structure of the original document.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularNetwork.#ctor">
            <summary>
            Constructs an empty network.
            </summary>
            <remarks>
            Use this default constructor to create an empty network.
            Call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNodesAndLinks(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node},System.Collections.Generic.IEnumerable{Northwoods.GoXam.Link})"/> to automatically add
            network nodes and links, or call <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.AddNode(Northwoods.GoXam.Node)"/> and <see cref="M:Northwoods.GoXam.Layout.GenericNetwork`3.LinkVertexes(`0,`0,Northwoods.GoXam.Link)"/>
            explicitly to have more detailed control over the exact graph that is laid out.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularEdge">
            <summary>
            Holds auto-layout specific edge data.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularVertex">
            <summary>
            Holds auto-layout specific vertex data.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularVertex.ComputeDiameter(System.Double)">
            <summary>
            Finds the effective diameter of this CircularVertex, which may depend on the angle
            at which the ellipse is being filled
            </summary>
            <param name="angle">
            The angle at which the layout's being filled. This is
            only necessary if <see cref="P:Northwoods.GoXam.Layout.CircularLayout.NodeDiameterFormula"/> == <see cref="F:Northwoods.GoXam.Layout.CircularNodeDiameterFormula.Circular"/>
            </param>
            <returns>The diameter, or <b>NaN</b> if unable to compute it</returns>
        </member>
        <member name="M:Northwoods.GoXam.Layout.CircularVertex.ToString">
            <summary>
            Returns a string representing the CircularVertex
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularVertex.Diameter">
            <summary>
            Gets or sets the value used as the vertex's diameter
            </summary>
            <value>
            By default the value depends on the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Arrangement"/> property.
            Any computed value is cached, to avoid unnecessary expensive computations.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Layout.CircularVertex.ActualAngle">
            <summary>
            Gets the computed angle for this particular vertex, given its position on the ellipse.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularArrangement">
            <summary>
            Specifies how the nodes should be spaced in the ring for <see cref="T:Northwoods.GoXam.Layout.CircularLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularArrangement.ConstantSpacing">
            <summary>
            The spacing between the idealized boundaries of the nodes is constant
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularArrangement.ConstantDistance">
            <summary>
            The distance between the centers of the nodes is constant
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularArrangement.ConstantAngle">
            <summary>
            The angular distance between the nodes is constant
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularArrangement.Packed">
            <summary>
            The vertices are arranged as close together as possible considering the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/>,
            assuming the nodes are rectangular.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularDirection">
            <summary>
            Represents the direction in which the nodes fill the ring for <see cref="T:Northwoods.GoXam.Layout.CircularLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularDirection.Clockwise">
            <summary>
            Rings are filled clockwise
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularDirection.Counterclockwise">
            <summary>
            Rings are filled counterclockwise
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularDirection.BidirectionalLeft">
            <summary>
            The ring is filled by alternating sides; the second node is counterclockwise from first node.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularDirection.BidirectionalRight">
            <summary>
            The ring is filled by alternating sides; the second node is clockwise from first node.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularSorting">
            <summary>
            Specifies how to sort the nodes for <see cref="T:Northwoods.GoXam.Layout.CircularLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularSorting.Forwards">
            <summary>
            Nodes are arranged in the order given
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularSorting.Reverse">
            <summary>
            Nodes are arranged in the reverse of the order given
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularSorting.Ascending">
            <summary>
            Nodes are sorted using the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Comparer"/>, in ascending order
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularSorting.Descending">
            <summary>
            Nodes are sorted using the <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Comparer"/>, in reverse ascending order
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularSorting.Optimized">
            <summary>
            Nodes are ordered to reduce link crossings
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularNodeDiameterFormula">
            <summary>
            Specifies a method for finding the size of a node for <see cref="T:Northwoods.GoXam.Layout.CircularLayout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularNodeDiameterFormula.Pythagorean">
            <summary>
            The effective diameter is sqrt(width^2+height^2).
            The corners of square nodes will touch at 45 degrees when <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is 0.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularNodeDiameterFormula.Circular">
            <summary>
            The effective diameter is either the width or height of the node, whichever is larger.
            This will cause circular nodes to touch when <see cref="P:Northwoods.GoXam.Layout.CircularLayout.Spacing"/> is 0.
            This is ideal when the nodes are circular.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.CircularLinkRouting">
            <summary>
            Specifies how the links should be routed
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLinkRouting.Default">
            <summary>
            Default link routing
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.CircularLinkRouting.Curved">
            <summary>
            Links are curved to avoid nodes
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.NodePanel">
            <summary>
            This panel is useful for having a background shape as the primary object
            and positioning one or more child elements within that shape.
            </summary>
            <remarks>
            <para>
            A <c>NodePanel</c> is typically used as the implementation of a <see cref="T:Northwoods.GoXam.Node"/>'s <c>DataTemplate</c>
            when you want the node to basically be some shape (a "figure", but it can be any kind of <c>UIElement</c>)
            and you want to position and align additional elements within that primary shape.
            If you want elements such as text outside of that shape, we suggest you use a <c>Panel</c>
            such as <c>StackPanel</c> or <c>Grid</c> to arrange the node the way you want.
            </para>
            <para>
            The first child element of the panel is treated as the main object.
            It can have two attached property values, <c>NodePanel.Spot1</c> and <c>NodePanel.Spot2</c>,
            that denote the top-left and bottom-right corners of an area where the other child elements are placed.
            The default spot values will just cover the whole element.
            However, a <c>NodeShape</c> (WPF), or a <c>Path</c> (Silverlight),
            with a <c>NodeFigure</c> attached property is frequently used as the first element of a <c>NodePanel</c>.
            Such shapes have predefined <c>Spot1</c> and <c>Spot2</c> values in addition to having particular geometries.
            </para>
            <para>
            The layout will observe the <c>FrameworkElement.HorizontalAlignment</c> and
            <c>VerticalAlignment</c> properties of each child element after the first one.
            </para>
            <para>
            As an example, here is the definition of a simple template that displays a resizable rounded rectangle
            surrounding some text:
            <code>
              &lt;DataTemplate x:Key="ExampleNodeTemplate"&gt;
                &lt;go:NodePanel go:Node.Location="{Binding Path=Data.XY, Mode=TwoWay}"
                              go:Node.SelectionElementName="Shape" go:Node.Resizable="True"&gt;
                  &lt;go:NodeShape x:Name="Shape" go:NodePanel.Figure="RoundedRectangle" Width="50" Height="20"
                                Stroke="Gray" StrokeThickness="1" Fill="LightYellow" /&gt;
                  &lt;TextBlock Text="{Binding Path=Data.Name}" TextWrapping="Wrap" /&gt;
                &lt;/go:NodePanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            In WPF, you must use the <c>&lt;go:NodeShape&gt;</c> element instead of a <c>&lt;Path&gt;</c> element.
            In Silverlight, you may use either the <c>&lt;go:NodeShape&gt;</c> element or a <c>&lt;Path&gt;</c> element.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.SizingProperty">
            <summary>
            Defines how this panel should behave when it is resized.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.Spot1Property">
            <summary>
            Identifies the <c>Spot1</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.GetSpot1(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <c>Spot1</c> attached property.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <returns>
            This defaults to <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.SetSpot1(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <c>Spot1</c> attached property.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.Spot2Property">
            <summary>
            Identifies the <c>Spot2</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.GetSpot2(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <c>Spot2</c> attached property.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <returns>
            This defaults to <see cref="F:Northwoods.GoXam.Spot.BottomRight"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.SetSpot2(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <c>Spot2</c> attached property.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.FigureProperty">
            <summary>
            Identifies the <c>Figure</c> attached dependency property,
            for a <c>NodeShape</c> element (WPF) or <c>Path</c> element (Silverlight) inside a <see cref="T:Northwoods.GoXam.NodePanel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.GetFigure(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.SetFigure(System.Windows.DependencyObject,Northwoods.GoXam.NodeFigure)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.FigureParameter1Property">
            <summary>
            Identifies the <c>FigureParameter1</c> attached dependency property,
            for a <c>NodeShape</c> element (WPF) or <c>Path</c> element (Silverlight) inside a <see cref="T:Northwoods.GoXam.NodePanel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.GetFigureParameter1(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureParameter1Property"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.SetFigureParameter1(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureParameter1Property"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.NodePanel.FigureParameter2Property">
            <summary>
            Identifies the <c>FigureParameter2</c> attached dependency property,
            for a <c>NodeShape</c> element (WPF) or <c>Path</c> element (Silverlight) inside a <see cref="T:Northwoods.GoXam.NodePanel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.GetFigureParameter2(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureParameter2Property"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.SetFigureParameter2(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.NodePanel.FigureParameter2Property"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.FindLongestWord(System.String)">
            <summary>
            Calculates the longest word in <paramref name="input"/> and returns it.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.MeasureAuto(System.Windows.Size)">
            <summary>
            Measures the children according to the rules defined by NodePanelSizing.Auto.
            Resizes to fit its children and wraps text appropriately if requested.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.ArrangeAuto(System.Windows.Size)">
            <summary>
            Arranges the children according to the rules defined by NodePanelSizing.Auto.
            Resizes the first shape to fit around the other children and wraps text appropriately if requested.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.ArrangeFixed(System.Windows.Size)">
            <summary>
            Measures the children according to the rules defined by NodePanelSizing.Fixed.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure all of the children after the first one to fit within the
            rectangular area specified by <see cref="M:Northwoods.GoXam.NodePanel.GetSpot1(System.Windows.DependencyObject)"/> and <see cref="M:Northwoods.GoXam.NodePanel.GetSpot2(System.Windows.DependencyObject)"/>
            of the first child element.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Position all of the children after the first one to be within the
            rectangular area specified by <see cref="M:Northwoods.GoXam.NodePanel.GetSpot1(System.Windows.DependencyObject)"/> and <see cref="M:Northwoods.GoXam.NodePanel.GetSpot2(System.Windows.DependencyObject)"/>
            of the first child element.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
            <remarks>
            If the child is narrower than the <c>Spot1</c>-<c>Spot2</c> determined
            area of the first element, the child's <c>FrameworkElement.HorizontalAlignment</c> applies.
            Similarly, if the child is shorter than the <c>Spot1</c>-<c>Spot2</c> determined
            area of the first element, the child's <c>FrameworkElement.VerticalAlignment</c> applies.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.NodePanel.Sizing">
            <summary>
            Defines how this panel should behave when it is resized.
            Possible values are: Fixed (default) or Auto
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.NodePanelSizing">
            <summary>
            Defines how this <see cref="T:Northwoods.GoXam.NodePanel"/> will resize its children.
            </summary>
            <remarks>
            In each scenario, the first child is treated as a background object in the panel
            and all children are placed within the rectangular area defined by its
            <c>NodePanel.Spot1</c> and <c>NodePanel.Spot2</c> properties.
            The <see cref="T:Northwoods.GoXam.NodePanel"/> observes the <c>HorizontalAlignment</c>
            and <c>VerticalAlignment</c> properties on the other children.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.NodePanelSizing.Fixed">
            <summary>
            The <see cref="T:Northwoods.GoXam.NodePanel"/> takes the size of its first child.
            All other elements are placed within the bounds defined by the
            <c>NodePanel.Spot1</c> and <c>NodePanel.Spot2</c> properties of that first child.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodePanelSizing.Auto">
            <summary>
            The <see cref="T:Northwoods.GoXam.NodePanel"/> is automatically sized to fit all of its children.
            Basically, the first child (presumably a convex shape) will surround the
            second child, which in simple nodes is typically a <c>TextBlock</c>, but could
            be a more complicated element.
            If the child is a <c>TextBlock</c> with text wrapping set to true,
            it will be appropriately wrapped so that all of its text is visible.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.SelectionHandle">
            <summary>
            This <c>Shape</c> can be used only in the <c>DataTemplate</c> for an <see cref="T:Northwoods.GoXam.Adornment"/>
            indicating that another part is selected.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Northwoods.GoXam.SelectionHandle"/> takes the shape of the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/> that it adorns,
            but its <c>Stroke</c>, <c>StrokeThickness</c>, <c>Fill</c>, et al. must still be set.
            You should not set its <c>Width</c> or <c>Height</c>, because those will be determined
            by the size and shape of the adorned element.
            </para>
            <para>
            A simple example definition:
            <code>
              &lt;DataTemplate&gt;
                &lt;go:SelectionHandle Stroke="Red" StrokeThickness="2" /&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            <para>
            If a <c>SelectionHandle</c> is not the only element of the selection adornment template,
            it should be named as the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> for the whole adornment.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.SelectionHandle.#ctor">
            <summary>
            A <see cref="T:Northwoods.GoXam.SelectionHandle"/> takes the shape of the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/> that it adorns,
            but its <c>Stroke</c>, <c>StrokeThickness</c>, <c>Fill</c>, et al. must still be set.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.SelectionHandle.DefiningGeometry">
            <summary>
            This generates a <c>Geometry</c> based on the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.ToolHandle">
            <summary>
            This <c>Shape</c> can be used only in the <c>DataTemplate</c> for an <see cref="T:Northwoods.GoXam.Adornment"/>
            used by <see cref="T:Northwoods.GoXam.Tool.DiagramTool"/>s to allow the adorned part to be manipulated.
            </summary>
            <remarks>
            <para>
            You should set its <c>Stroke</c>, <c>StrokeThickness</c>, <c>Fill</c>, et al.
            as you would for any <c>Shape</c>, as well as its <c>Width</c> and <c>Height</c>.
            </para>
            <para>
            A <c>ToolHandle</c> is rectangular by default, but you can set or bind its <see cref="T:Northwoods.GoXam.NodeFigure"/>
            attached property to get different figures.
            You can specify a limited number of figure shapes for these handles:
            <see cref="F:Northwoods.GoXam.NodeFigure.Rectangle"/> (the default figure),
            <see cref="F:Northwoods.GoXam.NodeFigure.Ellipse"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.Diamond"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.TriangleRight"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.TriangleDown"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.TriangleLeft"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.TriangleUp"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.PlusLine"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.XLine"/>,
            <see cref="F:Northwoods.GoXam.NodeFigure.AsteriskLine"/>,
            </para>
            <para>
            A simple example definition:
            <code>
              &lt;DataTemplate&gt;
                &lt;go:SpotPanel&gt;
                  &lt;go:ToolHandle go:SpotPanel.Spot="Center" go:NodePanel.Figure="Ellipse"
                          Width="6" Height="6" Fill="Yellow" Stroke="Black" StrokeThickness="1" /&gt;
                &lt;/go:SpotPanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            <para>
            You can have many tool handles in a single <see cref="T:Northwoods.GoXam.Adornment"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.ToolHandle.#ctor">
            <summary>
            You still need to set its <c>Stroke</c>, <c>StrokeThickness</c>, <c>Fill</c>, et al, as with any <c>Shape</c>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.ToolHandle.DefiningGeometry">
            <summary>
            This generates a <c>Geometry</c> based on the value of the
            <see cref="F:Northwoods.GoXam.NodePanel.FigureProperty"/> attached property.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Adornment">
            <summary>
            An adornment is a special kind of <see cref="T:Northwoods.GoXam.Part"/> that is associated with another part,
            the <see cref="P:Northwoods.GoXam.Adornment.AdornedPart"/>.
            </summary>
            <remarks>
            <para>
            Adornments can be associated with a particular element in the adorned part --
            that is the value of <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/>.
            </para>
            <para>
            Adornments can be distinguished by their <see cref="P:Northwoods.GoXam.Part.Category"/>.
            This property can be an arbitrary string value determined by the code creating the adornment,
            typically a tool that wants to be able to tell various adornments apart from each other.
            Use the <see cref="T:Northwoods.GoXam.Part"/> method <see cref="M:Northwoods.GoXam.Part.GetAdornment(System.String)"/> to find an adornment
            for a part of a given category.
            </para>
            <para>
            For example, adornments created by <see cref="M:Northwoods.GoXam.Part.UpdateSelectionAdornment"/> have the
            <see cref="P:Northwoods.GoXam.Part.Category"/> of "Selection".
            Those created by <see cref="M:Northwoods.GoXam.Tool.ResizingTool.UpdateAdornments(Northwoods.GoXam.Part)"/>
            have a category of "Resize".
            </para>
            <para>
            Adornments are always unbound parts -- but if the <see cref="P:Northwoods.GoXam.Adornment.AdornedPart"/> is bound to data,
            the adornment's data bindings can refer to the same data.
            </para>
            <para>
            There cannot be any links connected to an adornment, nor can an adornment have members or be a member of a group.
            </para>
            <para>
            An adornment cannot have its own adornments.
            </para>
            <para>
            The template you use for a selection adornment will normally consist of either
            a Path (Silverlight) or SelectionHandle (WPF),
            or for nodes a <see cref="T:Northwoods.GoXam.SpotPanel"/>, which is treated specially within an <c>Adornment</c>,
            or for links a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            Although this element is normally the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            if it is surrounded by a panel or container or decorator, you need to make sure that it is the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>
            for the <c>Adornment</c> by naming it and supplying that name as the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>.
            </para>
            <para>
            The template you use for a tool adornment will normally consist of either
            a Path (Silverlight) or ToolHandle (WPF),
            or for nodes a <see cref="T:Northwoods.GoXam.SpotPanel"/> containing Paths (Silverlight) or ToolHandles (WPF),
            or for links a <see cref="T:Northwoods.GoXam.LinkPanel"/> containing Paths (Silverlight) or ToolHandles (WPF).
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Node">
            <summary>
            A <c>Node</c> is a <see cref="T:Northwoods.GoXam.Part"/> to which <see cref="T:Northwoods.GoXam.Link"/>s may connect
            and which may be a member of a <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
            <remarks>
            <para>
            Each <c>Node</c> has a <see cref="P:Northwoods.GoXam.Node.Location"/> property.
            By default this is the same as the <see cref="P:Northwoods.GoXam.Part.Bounds"/> X,Y position.
            However, you can set the <see cref="P:Northwoods.GoXam.Node.Location"/> property,
            whereas <see cref="P:Northwoods.GoXam.Part.Bounds"/> is a read-only property.
            </para>
            <para>
            Furthermore, the "location" need not be the same as the top-left point of the "bounds".
            Often there is a particular FrameworkElement in the node that is the featured element,
            and the "location" for the node is actually a point within that element.
            You can specify which element provides the node's location by setting the
            <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> property.
            By default the element name is the empty string, meaning to use the visual element of the node.
            You can specify which point on that element is the actual location point
            by setting the <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> property.
            By default the location spot is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>,
            meaning the top-left point of the location element.
            Therefore, the combination of the two default location-specifying properties
            result in the location of a node to be the top-left point of the bounds of the whole node,
            the same as the position of the <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            But it is moderately common to specify a particular shape or image as the location element name,
            and it is fairly common to use <see cref="F:Northwoods.GoXam.Spot.Center"/> as the location spot.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Node.Location"/> property is a CLR property implemented
            using the <see cref="F:Northwoods.GoXam.Node.LocationProperty"/> attached dependency property
            on the node's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            The reason that most of the node "properties" are implemented as attached dependency
            properties rather than regular CLR properties is that it allows for those property values to be data-bound.
            It is commonplace to specify the location using a data binding:
            <code>
            &lt;DataTemplate x:Key="MyNodeTemplate"&gt;
              &lt;Border ...
                    go:Node.Location="{Binding Path=Data.Location, Mode=TwoWay}"&gt;
                ...
              &lt;/Border&gt;
            &lt;/DataTemplate&gt;
            </code>
            This data-binds the node's location with a property on the node data named "Location".
            Data binding not only keeps FrameworkElement properties in synch with data properties,
            but also helps support a model-view architecture and undo/redo.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Node.MinLocation"/> and <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> properties help limit
            how far a node may be dragged.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Node.RotationAngle"/> property sets the angle of the node's <see cref="P:Northwoods.GoXam.Part.SelectionElement"/>.
            </para>
            <para>
            The most common relationship supported by nodes is a node-to-node link relationship.
            There are a number of properties that return collections of <c>Node</c>s that a given
            node is connected with, and there are a number of properties that return collections of
            <see cref="T:Northwoods.GoXam.Link"/>s that a given node connects with to other nodes.
            These properties are:
            <see cref="P:Northwoods.GoXam.Node.NodesConnected"/>, <see cref="P:Northwoods.GoXam.Node.NodesInto"/>, <see cref="P:Northwoods.GoXam.Node.NodesOutOf"/>,
            <see cref="P:Northwoods.GoXam.Node.LinksConnected"/>, <see cref="P:Northwoods.GoXam.Node.LinksInto"/>, and <see cref="P:Northwoods.GoXam.Node.LinksOutOf"/>.
            </para>
            <para>
            Creating new links is achieved by adding or modifying data in the diagram's model.
            The precise methods depend on whether the model is an
            <see cref="T:Northwoods.GoXam.Model.ILinksModel"/> or an <see cref="T:Northwoods.GoXam.Model.IConnectedModel"/> or an <see cref="T:Northwoods.GoXam.Model.ITreeModel"/>.
            </para>
            <para>
            Nodes also support the ability to provide logical and physical distinctions in the
            connection points that links use at a node, if the diagram's model supports it.
            These connections points are called "ports".
            Some models assume that there is only one port per node.
            By default that will be the node's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            However, one can set the <see cref="F:Northwoods.GoXam.Node.PortIdProperty"/> attached property
            on any visual element to cause that FrameworkElement to be treated as a "port".
            In the case of a single port for a node, you should set the <c>PortId</c> as an empty string:
            <code>
              ...
                &lt;... ... go:Node.PortId="" ... &gt;
              ...
            </code>
            You can get the FrameworkElement that is the default (single) port using the <see cref="P:Northwoods.GoXam.Node.Port"/> property.
            </para>
            <para>
            When a node has multiple ports, i.e. multiple FrameworkElements acting as
            separate connection points for links, you should set each port's <c>PortId</c>
            to a string value that is unique for the node.
            When there may be multiple ports on a node, you can get a collection of FrameworkElements
            representing ports using the <see cref="P:Northwoods.GoXam.Node.Ports"/> property.
            Use the <see cref="M:Northwoods.GoXam.Node.FindPort(System.String,System.Boolean)"/> method to find a particular port element by name.
            There are also methods for finding the collection of nodes or of links that are
            connected to a particular port element.
            </para>
            <para>
            There are also several attached properties that can be set to control how links
            connect to that FrameworkElement.  These include:
            <see cref="F:Northwoods.GoXam.Node.FromSpotProperty"/>, <see cref="F:Northwoods.GoXam.Node.ToSpotProperty"/>,
            <see cref="F:Northwoods.GoXam.Node.FromEndSegmentLengthProperty"/>, <see cref="F:Northwoods.GoXam.Node.ToEndSegmentLengthProperty"/>.
            There are also some attached properties that control whether users may
            create new links connecting to a port:
            <see cref="F:Northwoods.GoXam.Node.LinkableFromProperty"/>, <see cref="F:Northwoods.GoXam.Node.LinkableToProperty"/>,
            <see cref="F:Northwoods.GoXam.Node.LinkableSelfNodeProperty"/>, <see cref="F:Northwoods.GoXam.Node.LinkableDuplicatesProperty"/>,
            and <see cref="F:Northwoods.GoXam.Node.LinkableMaximumProperty"/>.
            </para>
            <para>
            Nodes also support the notion of group membership for models that implement
            <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>.
            The <see cref="P:Northwoods.GoXam.Node.ContainingSubGraph"/> property returns the <see cref="T:Northwoods.GoXam.Group"/> that
            a node is a member of, or null if there is no container group for that node.
            Changing the group membership of a node requires modifying the diagram's model.
            </para>
            <para>
            The <c>Node</c> class also supports the notion of expanding and collapsing a subtree
            starting at a given node.  There are two attached properties, <see cref="F:Northwoods.GoXam.Node.IsTreeExpandedProperty"/>
            and <see cref="F:Northwoods.GoXam.Node.WasTreeExpandedProperty"/>, that can be data-bound, as well as two methods,
            <see cref="M:Northwoods.GoXam.Node.CollapseTree"/> and <see cref="M:Northwoods.GoXam.Node.ExpandTree"/>.
            </para>
            <para>
            You may not apply any transforms to a <c>Node</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Part">
            <summary>
            A <c>Part</c> is an item in a <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s <see cref="T:Northwoods.GoXam.Layer"/>,
            corresponding to data representing a node or a link.
            </summary>
            <remarks>
            <para>
            There are two classes inheriting from this abstract class: <see cref="T:Northwoods.GoXam.Node"/> and <see cref="T:Northwoods.GoXam.Link"/>.
            </para>
            <para>
            Each <c>Part</c> can only be a child element of a <see cref="T:Northwoods.GoXam.Layer"/>: either a <see cref="T:Northwoods.GoXam.NodeLayer"/>
            or a <see cref="T:Northwoods.GoXam.LinkLayer"/>.  Parts cannot be nested in the visual tree.  However, a subclass of node,
            <see cref="T:Northwoods.GoXam.Group"/>, supports the logical nesting of nodes (and links) as members of a group.
            You can specify which layer a part should be in by setting its <see cref="P:Northwoods.GoXam.Part.LayerName"/> property.
            </para>
            <para>
            A <c>Part</c> is typically created by the <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>
            in response to the presence or addition of some data to the diagram's <see cref="P:Northwoods.GoXam.Diagram.Model"/>.
            The part manager creates the node or link, sets its <c>Content</c> property to the data (indirectly)
            and its <c>ContentTemplate</c> property to a <c>DataTemplate</c> based on the type of part and
            the part's <see cref="P:Northwoods.GoXam.Part.Category"/>.
            The <c>FrameworkElement</c> that results from the application of the template to the data
            is accessible as the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> property.
            </para>
            <para>
            Each part has a <see cref="P:Northwoods.GoXam.Part.Bounds"/> property that describes its position and size in model coordinates.
            This property is read-only.
            One can change the bounds of a <see cref="T:Northwoods.GoXam.Node"/> by setting its
            <see cref="P:Northwoods.GoXam.Node.Location"/> or <see cref="P:Northwoods.GoXam.Node.Position"/> property.
            </para>
            <para>
            A part can be selected or de-selected by setting its <see cref="P:Northwoods.GoXam.Part.IsSelected"/> property.
            </para>
            <para>
            Most of the properties pertinent to parts are attached dependency properties rather than regular
            dependency properties.
            Many are only to be used on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>, not on the part itself nor on nested
            elements in the part's visual tree.
            The reason for using attached properties is to make it easier to data bind those properties
            in the data template.
            </para>
            <para>
            An example is the <see cref="F:Northwoods.GoXam.Part.LayerNameProperty"/>.  Consider the following data template for nodes:
            <code>
              &lt;DataTemplate x:Key="ExampleTemplate"&gt;
                &lt;Border Background="White" BorderBrush="Blue" BorderThickness="2" CornerRadius="3" Padding="2,0,2,0"
                           go:Node.LayerName="{Binding Path=Data.LayerName}"&gt;
                  &lt;TextBlock Text="{Binding Path=Data.Name}" /&gt;
                &lt;/Border&gt;
              &lt;/DataTemplate&gt;
            </code>
            The example assumes that the node data to which each node is bound has at least two properties:
            one named "Name" holding the text to be displayed, and one named "LayerName" specifying the name
            of the <see cref="T:Northwoods.GoXam.Layer"/> that the node should be in.
            Note that setting the attribute for the layer name refers to the attached property qualified
            by the class name ("Node" in this case, in the XMLNS namespace referenced by "go").
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Part.LayerName"/> CLR property of <see cref="T:Northwoods.GoXam.Part"/> gets and sets the value of the
            <see cref="F:Northwoods.GoXam.Part.LayerNameProperty"/> on the part's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            Please be aware that such property getters will just return the default value for the property
            when the data template has not yet been applied, as will be the case when <see cref="P:Northwoods.GoXam.Part.VisualElement"/>
            is null.
            Such property setters will try applying the template if needed before actually setting
            the attached property on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </para>
            <para>
            Note that the data binding goes indirectly through a property named "Data":
            <code>
              &lt;TextBlock Text="{Binding Path=Data.Name}" /&gt;
            </code>
            This is because the part's <c>Content</c> is not the data itself but a simple data structure
            that includes the data as its <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Data"/> property.
            The other property refers to the <see cref="T:Northwoods.GoXam.Part"/> itself.  This permits bindings such as:
            <code>
              &lt;DataTrigger Binding="{Binding Path=Part.IsSelected}" Value="True" &gt;
                &lt;Setter Property="Border.BorderBrush" Value="Red" /&gt;
                &lt;Setter Property="go:Node.LayerName" Value="Foreground" /&gt;
              &lt;/DataTrigger&gt;
            </code>
            This results in the border's brush changing color when the node is selected,
            and in the node being moved to the foreground layer when it is selected.
            (This requires corresponding changes to the <c>Border</c> element, since the
            <c>BorderBrush</c> and <c>go:Node.LayerName</c> properties should not be set
            locally if they want to be modified in a style trigger.)
            (Also note that this example will not work in Silverlight.)
            </para>
            <para>
            There are many properties, named "...able", that control what operations the user
            may perform on this part.  These properties correspond to the same named
            properties on <see cref="T:Northwoods.GoXam.Diagram"/> and <see cref="T:Northwoods.GoXam.Layer"/> that govern the behavior
            for all parts in all layers or for all parts in the given layer.
            For example, the <see cref="P:Northwoods.GoXam.Part.Copyable"/> property corresponds to the properties
            <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> and
            <see cref="P:Northwoods.GoXam.Layer.AllowCopy"/>.
            </para>
            <para>
            For each of these "ability" properties there is a corresponding "Can..." predicate.
            For example, the <see cref="M:Northwoods.GoXam.Part.CanCopy"/> predicate is false if any of the three
            previously named properties is false.
            </para>
            <para>
            As previously mentioned, <see cref="T:Northwoods.GoXam.Diagram"/> supports the notion of selected parts.
            The part class also supports showing visual objects for a part when it gets selected.
            These visuals are typically used to show that the part is selected ("selection handles")
            or are used to allow the user to manipulate or modify the part with a tool ("tool handles").
            These handles are the visual elements of <see cref="T:Northwoods.GoXam.Adornment"/> nodes.
            The <see cref="M:Northwoods.GoXam.Part.UpdateAdornments"/> method is responsible for showing or hiding adornments,
            normally depending on whether the part is selected.
            </para>
            <para>
            When the <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> (attached) property is true, a selected part
            automatically gets an <see cref="T:Northwoods.GoXam.Adornment"/> node created for it.
            Such a node gets a <c>ContentTemplate</c> property that is the value of
            <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/>.
            (If the value is null, a default selection adornment template is used.)
            If the node is bound to data, the adornment is also bound to the same data.
            </para>
            <para>
            Tool handles are shown for those tools that need it.
            The process of updating adornments for a part will ask each mode-less tool
            to <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.UpdateAdornments(Northwoods.GoXam.Part)"/>.
            Most tools might not need special tool handles.  But, for example,
            <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/> naturally will want to
            create an adornment with eight resize handles positioned at the corners and
            at the middles of the sides of the selected node's visual element,
            if the node has <see cref="M:Northwoods.GoXam.Part.CanResize"/> returning true.
            </para>
            <para>
            However one does not always want the whole part to get the selection handle
            and any tool handles.  Sometimes one wants to emphasize selection by
            highlighting a particular element within the part's visual tree.
            This can be achieved by setting the <see cref="P:Northwoods.GoXam.Part.SelectionElementName"/> property,
            and making sure the desired element has the same <c>x:Name</c> attribute value.
            For example, the following node template causes resize handles to appear surrounding
            the <c>Rectangle</c> element, not around the whole node.
            <code>
              &lt;DataTemplate x:Key="ExampleTemplate"&gt;
                &lt;StackPanel go:Node.Resizable="True" go:Node.SelectionElementName="myIcon"&gt;
                  &lt;Rectangle x:Name="myIcon" Width="30" Height="30"
                             Fill="LightSalmon" Stroke="Maroon" StrokeThickness="2" /&gt;
                  &lt;TextBlock Text="{Binding Path=Data.Name}" HorizontalAlignment="Center" /&gt;
                &lt;/StackPanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            <para>
            There are some methods for finding and examining particular elements in the part's visual tree:
            <see cref="M:Northwoods.GoXam.Part.FindDescendant(System.Predicate{System.Windows.FrameworkElement})"/>, <see cref="M:Northwoods.GoXam.Part.FindNamedDescendant(System.String)"/>,
            <see cref="M:Northwoods.GoXam.Part.IsVisibleElement(System.Windows.UIElement)"/>, <see cref="M:Northwoods.GoXam.Part.GetRelativeElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>,
            <see cref="M:Northwoods.GoXam.Part.GetElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>, and <see cref="M:Northwoods.GoXam.Part.GetElementBounds(System.Windows.FrameworkElement)"/>.
            </para>
            <para>
            There are other methods and properties for looking at the relationships between parts:
            <see cref="P:Northwoods.GoXam.Part.IsTopLevel"/>, <see cref="M:Northwoods.GoXam.Part.FindTopLevelPart"/>, <see cref="M:Northwoods.GoXam.Part.IsContainedBy(Northwoods.GoXam.Part)"/>,
            <see cref="P:Northwoods.GoXam.Part.ContainingSubGraph"/>, and <see cref="M:Northwoods.GoXam.Part.FindCommonContainingSubGraph(Northwoods.GoXam.Part)"/>.
            </para>
            <para>
            You may not apply any transforms to a <c>Part</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Every <see cref="T:Northwoods.GoXam.Part"/>'s visual parent must be a <see cref="T:Northwoods.GoXam.Layer"/>, if it has any parent.
            </summary>
            <param name="oldParent"></param>
            <remarks>
            For example, this will detect a &lt;Node&gt; inside a &lt;DataTemplate&gt;.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.OnApplyTemplate">
            <summary>
            Initialize <c>Visibility</c> according to the value of <see cref="P:Northwoods.GoXam.Part.Visible"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Part.CategoryProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Category"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Part.BoundsProperty">
            <summary>
            Identifies the read-only <see cref="P:Northwoods.GoXam.Part.Bounds"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Part.IsSelectedProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.IsSelected"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.OnIsSelectedChanged">
            <summary>
            This virtual method is called whenever this part is added or removed from the
            collection of <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>.
            </summary>
            <remarks>
            By default this just calls <see cref="M:Northwoods.GoXam.Part.Remeasure"/>,
            which will eventually call <see cref="M:Northwoods.GoXam.Part.UpdateAdornments"/>.
            In Silverlight, if the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> is a <c>Control</c>,
            this will also call <c>VisualStateManager.GoToState</c> with a new state
            of either "Selected" or "Unselected".
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetAdornment(System.String)">
            <summary>
            Find an <see cref="T:Northwoods.GoXam.Adornment"/> associated with this part that has a particular category.
            </summary>
            <param name="category">this must be a non-null string</param>
            <returns>null if this no such adornment</returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetAdornment(System.String,Northwoods.GoXam.Adornment)">
            <summary>
            Associate an <see cref="T:Northwoods.GoXam.Adornment"/> with this part.
            </summary>
            <param name="category">this must be a non-null string</param>
            <param name="ad"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.MakeAdornment(System.Windows.FrameworkElement,System.Windows.DataTemplate)">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Adornment"/> for a particular <c>FrameworkElement</c>
            using a given <c>DataTemplate</c>.
            </summary>
            <param name="selelt">must not be null</param>
            <param name="templ">must not be null</param>
            <returns></returns>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Part.IsBoundToData"/> is true, the DataTemplate has access to this part's <see cref="P:Northwoods.GoXam.Part.Data"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.UpdateAdornments">
            <summary>
            Maybe create adornments if needed, or remove them if not.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Part.UpdateSelectionAdornment"/> and <see cref="M:Northwoods.GoXam.Part.UpdateToolAdornments"/>.
            This is called by <see cref="M:Northwoods.GoXam.Part.OnIsSelectedChanged"/>, among other places.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.UpdateSelectionAdornment">
            <summary>
            This is responsible for creating a selection adornment for this part
            if this part <see cref="P:Northwoods.GoXam.Part.IsSelected"/> and if <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> is true.
            </summary>
            <remarks>
            <para>
            This also removes any selection adornment if this part is no longer selected,
            not visible, or if <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> is false.
            </para>
            <para>
            To create the selection adornment this calls <see cref="M:Northwoods.GoXam.Part.MakeAdornment(System.Windows.FrameworkElement,System.Windows.DataTemplate)"/>
            with the <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> and the <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/>.
            If there is no <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/> for this part,
            the template defaults to the <c>DataTemplate</c> named "DefaultSelectionAdornmentTemplate".
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.UpdateToolAdornments">
            <summary>
            This is responsible for creating any tool adornments for this part.
            </summary>
            <remarks>
            This delegates the responsibility to each tool in
            <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>
            and <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>
            by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.UpdateAdornments(Northwoods.GoXam.Part)"/> on each tool.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Part.LayerNameProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.LayerName"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetLayerName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.LayerName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetLayerName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.LayerName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.CopyableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Copyable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetCopyable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Copyable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetCopyable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Copyable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanCopy">
            <summary>
            This predicate is true if the user may copy
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Copyable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowCopy"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.DeletableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Deletable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDeletable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Deletable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDeletable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Deletable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanDelete">
            <summary>
            This predicate is true if the user may delete
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Deletable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowDelete"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowDelete"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.EditableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Editable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetEditable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Editable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetEditable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Editable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanEdit">
            <summary>
            This predicate is true if the user may in-place edit the text of
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Editable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowEdit"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowEdit"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.GroupableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Groupable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetGroupable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Groupable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetGroupable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Groupable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanGroup">
            <summary>
            This predicate is true if the user may group
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Groupable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowGroup"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowGroup"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.MovableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Movable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetMovable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Movable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetMovable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Movable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanMove">
            <summary>
            This predicate is true if the user may move
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Movable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowMove"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowMove"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.PrintableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Printable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetPrintable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Printable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetPrintable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Printable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanPrint">
            <summary>
            This predicate is true if the user may print
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Printable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowPrint"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowPrint"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.ReshapableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Reshapable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetReshapable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Reshapable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetReshapable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Reshapable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanReshape">
            <summary>
            This predicate is true if the user may reshape
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Reshapable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowReshape"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowReshape"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.ResizableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Resizable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetResizable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Resizable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetResizable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Resizable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanResize">
            <summary>
            This predicate is true if the user may resize
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Resizable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowResize"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowResize"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.RotatableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Rotatable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetRotatable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Rotatable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetRotatable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Rotatable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanRotate">
            <summary>
            This predicate is true if the user may rotate
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Rotatable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowRotate"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowRotate"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.VisibleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Visible"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetVisible(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Visible"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Visible"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.SelectableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Selectable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetSelectable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Selectable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetSelectable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Selectable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.CanSelect">
            <summary>
            This predicate is true if the user may select
            this part.
            </summary>
            <returns>
            Return true if this part is <see cref="P:Northwoods.GoXam.Part.Selectable"/>,
            if this part's layer's <see cref="P:Northwoods.GoXam.Layer.AllowSelect"/> is true,
            and if this part's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowSelect"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Part.SelectionElementNameProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.SelectionElementName"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetSelectionElementName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetSelectionElementName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.SelectionAdornedProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetSelectionAdorned(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetSelectionAdorned(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionAdorned"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.SelectionAdornmentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetSelectionAdornmentTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetSelectionAdornmentTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.ResizeAdornmentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.ResizeAdornmentTemplate"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetResizeAdornmentTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetResizeAdornmentTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.RotateAdornmentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.RotateAdornmentTemplate"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetRotateAdornmentTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.RotateAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetRotateAdornmentTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.RotateAdornmentTemplate"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.TextEditableProperty">
            <summary>
            Identifies the <c>TextEditable</c> attached dependency property
            that may be on any <c>TextBlock</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetTextEditable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditableProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <returns>By default this returns false</returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetTextEditable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditableProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.TextEditAdornmentTemplateProperty">
            <summary>
            Identifies the <c>TextEditAdornmentTemplate</c> attached dependency property
            that may be on any <c>TextBlock</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetTextEditAdornmentTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditAdornmentTemplateProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <returns>
            A <c>DataTemplate</c>, by default null.
            A null value causes the <see cref="T:Northwoods.GoXam.Tool.TextEditingTool"/>
            to use a default template that uses a <c>TextBox</c>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetTextEditAdornmentTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditAdornmentTemplateProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.TextEditorProperty">
            <summary>
            Identifies the <c>TextEditor</c> attached dependency property
            that may be on any <c>TextBlock</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetTextEditor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditorProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <returns>
            An <see cref="T:Northwoods.GoXam.Tool.ITextEditor"/>.
            By default this returns null, which causes the <see cref="T:Northwoods.GoXam.Tool.TextEditingTool"/>
            to use an editor that works with the default <see cref="M:Northwoods.GoXam.Part.GetTextEditAdornmentTemplate(System.Windows.DependencyObject)"/> that uses a <c>TextBox</c>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetTextEditor(System.Windows.DependencyObject,Northwoods.GoXam.Tool.ITextEditor)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Part.TextEditorProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <param name="v">an <see cref="T:Northwoods.GoXam.Tool.ITextEditor"/></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.TextAspectRatioProperty">
            <summary>
            Identifies the <c>TextAspectRatio</c> attached dependency property
            that may be on any <c>TextBlock</c>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetTextAspectRatio(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Part.TextAspectRatioProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <returns>By default this returns 1.5</returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetTextAspectRatio(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Part.TextAspectRatioProperty"/> attached dependency property.
            </summary>
            <param name="d">any <c>TextBlock</c> within the visual tree of the part</param>
            <param name="v">a positive value that is the desired ratio of width to height</param>
        </member>
        <member name="F:Northwoods.GoXam.Part.DragOverSnapEnabledProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDragOverSnapEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDragOverSnapEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.DragOverSnapCellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDragOverSnapCellSize(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDragOverSnapCellSize(System.Windows.DependencyObject,System.Windows.Size)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.DragOverSnapCellSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSpot"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDragOverSnapCellSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSpot"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDragOverSnapCellSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSpot"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.DragOverSnapOriginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.DragOverSnapOrigin"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDragOverSnapOrigin(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapOrigin"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDragOverSnapOrigin(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.DragOverSnapOrigin"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.DropOntoBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetDropOntoBehavior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetDropOntoBehavior(System.Windows.DependencyObject,Northwoods.GoXam.DropOntoBehavior)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.IsDropOntoAcceptedProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.IsDropOntoAccepted"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.OnIsDropOntoAcceptedChanged">
            <summary>
            This virtual method is called whenever the value of <see cref="P:Northwoods.GoXam.Part.IsDropOntoAccepted"/> has changed.
            </summary>
            <remarks>
            In Silverlight, if the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> is a <c>Control</c>,
            this will also call <c>VisualStateManager.GoToState</c> with a new state
            of either "DraggedOver" or "Normal".
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Part.ResizeElementNameProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.ResizeElementName"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetResizeElementName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetResizeElementName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.ResizeCellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetResizeCellSize(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetResizeCellSize(System.Windows.DependencyObject,System.Windows.Size)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.TextProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.Text"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetText(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.Text"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetText(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.Text"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.InDiagramBoundsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.InDiagramBounds"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetInDiagramBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.InDiagramBounds"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetInDiagramBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.InDiagramBounds"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Part.LayoutIdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Part.LayoutId"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetLayoutId(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Part.LayoutId"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetLayoutId(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Part.LayoutId"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Part.Remeasure">
            <summary>
            Re-measure and re-arrange this part in the near future.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.RemeasureNow">
            <summary>
            Re-measure and re-arrange this part right now, even if it's not ready.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.InvalidateRelationships">
            <summary>
            Declare that this part and any links connected to this node or any groups related to this part
            are now invalid and should be re-computed, re-measured, and re-arranged.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Part.FindDescendant(System.Predicate{System.Windows.FrameworkElement})">
            <summary>
            Search the visual tree for this part and return the first one for 
            which the given predicate <paramref name="pred"/> is true.
            </summary>
            <param name="pred">a predicate of type <c>Predicate&lt;FrameworkElement&gt;</c></param>
            <returns>a <c>FrameworkElement</c> or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.FindNamedDescendant(System.String)">
            <summary>
            Search the visual tree for this part and return the first one that has a <c>Name</c>
            exactly matching the given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns>a <c>FrameworkElement</c>, or null</returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.FindAncestor``1(System.Windows.Media.Visual)">
            <summary>
            This static method takes an element and walks up the visual tree
            looking for an element of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">frequently <c>typeof(Node)</c></typeparam>
            <param name="elt"></param>
            <returns>
            the <paramref name="elt"/> if it is of type <typeparamref name="T"/>,
            or else one of its parent visuals of that type,
            or else null if no such element was found
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.IsVisibleElement(System.Windows.UIElement)">
            <summary>
            This static predicate is true if the given <paramref name="elt"/>'s
            <c>Visibility</c> is <c>Visible</c> and each of its visual parents
            are also visible elements, up to the containing <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <param name="elt"></param>
            <returns></returns>
            <remarks>
            This predicate ignores the actual location or appearance (except Visibility) of the
            part that the given element is part of, as well as ignoring all
            properties of the <see cref="P:Northwoods.GoXam.Part.Layer"/>, <see cref="P:Northwoods.GoXam.Part.Panel"/>, or <see cref="P:Northwoods.GoXam.Part.Diagram"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.FindTopLevelPart">
            <summary>
            Find the top-level <see cref="T:Northwoods.GoXam.Part"/> for this part.
            </summary>
            <returns>
            This may often return itself, and should not return null.
            </returns>
            <remarks>
            If this part is a member of a group, return that group's top-level part.
            If this part is a label node for a link, return that link's top-level part.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.IsContainedBy(Northwoods.GoXam.Part)">
            <summary>
            This predicate is true if this part is a member of the given <paramref name="part"/>.
            </summary>
            <param name="part"></param>
            <returns></returns>
            <remarks>
            If this part is a member of a group, this predicate is true if the group is the same as <paramref name="part"/>.
            Otherwise see if the group is contained by <paramref name="part"/>.
            If this part is a label for a link, see if the link is contained by <paramref name="part"/>.
            A part cannot be contained by itself.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.FindCommonContainingSubGraph(Northwoods.GoXam.Part)">
            <summary>
            Find the group that contains both this part and another one.
            </summary>
            <param name="other"></param>
            <returns>
            This returns null if the two parts are unrelated in the hierarchy of part membership.
            If non-null, the result is a <see cref="T:Northwoods.GoXam.Group"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetRelativeElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)">
            <summary>
            Compute the point of a <paramref name="spot"/> in
            a <c>FrameworkElement</c> that is within the visual tree of this part,
            relative to the top-left corner of this part.
            </summary>
            <param name="elt">a <c>FrameworkElement</c> within this part</param>
            <param name="spot">
            a <see cref="T:Northwoods.GoXam.Spot"/>;
            if the spot <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> assume <see cref="F:Northwoods.GoXam.Spot.Center"/> instead.
            </param>
            <returns>a <c>Point</c> in model coordinates, taking any transforms into account, assuming the bounds are at (0,0)</returns>
            <remarks>
            This can produce a useful value even when the part has not yet been positioned,
            i.e. with its (X,Y) being (NaN, NaN), if the part is in the rooted visual tree.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Part.GetElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>
            <seealso cref="M:Northwoods.GoXam.Part.GetElementBounds(System.Windows.FrameworkElement)"/>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetEffectiveSize(System.Windows.FrameworkElement)">
            <summary>
            Get the actual size of an element, or its desired size if it hasn't been arranged yet,
            without measuring or arranging the element.
            </summary>
            <param name="e">an element that is in the visual tree of this part</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)">
            <summary>
            Compute the point in model coordinates of a <paramref name="spot"/> in
            a <c>FrameworkElement</c> that is within the visual tree of this part.
            </summary>
            <param name="elt">a <c>FrameworkElement</c> within this part</param>
            <param name="spot">
            a <see cref="T:Northwoods.GoXam.Spot"/>;
            if the spot <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> assume <see cref="F:Northwoods.GoXam.Spot.Center"/> instead.
            </param>
            <returns>
            a <c>Point</c> in model coordinates, taking any transforms into account;
            if the part has not yet been positioned, the (X,Y) position will be (NaN, NaN).
            </returns>
            <seealso cref="M:Northwoods.GoXam.Part.GetRelativeElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>
            <seealso cref="M:Northwoods.GoXam.Part.GetElementBounds(System.Windows.FrameworkElement)"/>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetElementBounds(System.Windows.FrameworkElement)">
            <summary>
            Compute the bounds in model coordinates of a <c>FrameworkElement</c>
            that is within the visual tree of this part.
            </summary>
            <param name="elt">a <c>FrameworkElement</c> within this part</param>
            <returns>
            a <c>Rect</c> in model coordinates, taking any transforms into account;
            if the part has not yet been positioned, the (X,Y) position will be (NaN, NaN).
            </returns>
            <seealso cref="M:Northwoods.GoXam.Part.GetElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>
            <seealso cref="M:Northwoods.GoXam.Part.GetRelativeElementPoint(System.Windows.FrameworkElement,Northwoods.GoXam.Spot)"/>
        </member>
        <member name="M:Northwoods.GoXam.Part.GetAngle(System.Windows.UIElement)">
            <summary>
            Get the angle of an element in the visual tree of this part.
            </summary>
            <param name="elt">a <c>UIElement</c>, an element in the visual tree of this <c>Part</c></param>
            <returns>an angle in degrees, starting at zero in the direction of the positive X axis</returns>
            <remarks>
            At the present time this just looks at any <c>RenderTransform</c> that the element has.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetAngle(System.Windows.UIElement,System.Double,Northwoods.GoXam.Spot)">
            <summary>
            Set the angle of an element in the visual tree of this part by
            creating or modifying a transform on that element.
            </summary>
            <param name="elt">the <c>UIElement</c> to be rotated, an element in the visual tree of this <c>Part</c></param>
            <param name="angle">a double between 0 and 360 degrees</param>
            <param name="focus">the spot of the rotation point; normally <c>Spot.Center</c>; any offset is ignored</param>
            <remarks>
            At the present time this just modifies any <c>RenderTransform</c> that the element has,
            and gives it a new <c>RotateTransform</c> if needed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Part.SetAngle(System.Windows.UIElement,System.Double)">
            <summary>
            This calls <see cref="M:Northwoods.GoXam.Part.SetAngle(System.Windows.UIElement,System.Double,Northwoods.GoXam.Spot)"/>
            to rotate the given element about its <see cref="P:Northwoods.GoXam.Node.RotationSpot"/>,
            or about the center of the element if this is not a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="elt">any <c>UIElement</c> within the visual tree of this <see cref="T:Northwoods.GoXam.Part"/></param>
            <param name="angle">a double between 0 and 360 degrees</param>
        </member>
        <member name="P:Northwoods.GoXam.Part.Data">
            <summary>
            Gets or sets the data that this part is bound to.
            </summary>
            <value>
            For parts for which <see cref="P:Northwoods.GoXam.Part.IsBoundToData"/> is true, this returns the data.
            You can also set this property to rebind the <c>Content</c> of this part.
            For parts that are not bound to data, this will return the <see cref="T:Northwoods.GoXam.Part"/> itself.
            You cannot set a value that is a <c>UIElement</c>, including parts such as
            <see cref="T:Northwoods.GoXam.Node"/>s or <see cref="T:Northwoods.GoXam.Link"/>s.
            </value>
            <remarks>
            This is overridden by <see cref="T:Northwoods.GoXam.Adornment"/> to always be null.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.IsBoundToData">
            <summary>
            This is true if this part is bound to data.
            </summary>
            <value>
            This will be false for <see cref="T:Northwoods.GoXam.Adornment"/>s, for parts 
            that are defined as XAML children of a diagram, or for other parts
            held by a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.Model">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/> that holds this part's data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Part.VisualElement">
            <summary>
            Get the root visual element used in the rendering of this part.
            </summary>
            <value>
            the visual tree child of this part
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> that this part is in.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Part.Panel"/>
            <seealso cref="P:Northwoods.GoXam.Part.Layer"/>
        </member>
        <member name="P:Northwoods.GoXam.Part.Panel">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.DiagramPanel"/> that this part is in.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Part.Diagram"/>
            <seealso cref="P:Northwoods.GoXam.Part.Layer"/>
        </member>
        <member name="P:Northwoods.GoXam.Part.Layer">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Layer"/> that this part is in.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Part.Diagram"/>
            <seealso cref="P:Northwoods.GoXam.Part.Panel"/>
        </member>
        <member name="P:Northwoods.GoXam.Part.Category">
            <summary>
            Gets a string identifying the kind of <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Group"/> or <see cref="T:Northwoods.GoXam.Link"/> or the purpose of the <see cref="T:Northwoods.GoXam.Adornment"/>.
            </summary>
            <value>
            <para>
            The default value is an empty string.
            You cannot change this value once the Part has been added to a Diagram.
            </para>
            <para>
            If you want to replace the <c>DataTemplate</c> used by a Part,
            you would normally set the <c>Category</c> property of your bound data.
            This would be reflected via the model in the <see cref="T:Northwoods.GoXam.PartManager"/>,
            which handles <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategory"/>
            by removing the Node from the Diagram and then adding it back again.
            The same is true for Links when <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkCategory"/>.
            </para>
            <para>
            But if you are not using a <c>Category</c> property on your data,
            because you have overridden <see cref="M:Northwoods.GoXam.PartManager.FindCategoryForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean)"/>
            or <see cref="M:Northwoods.GoXam.PartManager.FindTemplateForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String)"/>,
            you will need to call <see cref="M:Northwoods.GoXam.PartManager.RemoveNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            and <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> yourself.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.Bounds">
            <summary>
            Gets the bounding rectangle of this object, in model coordinates.
            </summary>
            <value>
            The <c>X</c> and <c>Y</c> values may be <c>Double.NaN</c> if the
            part has not yet been positioned, for example, if it is a <see cref="T:Northwoods.GoXam.Node"/>
            and the node's <see cref="P:Northwoods.GoXam.Node.Location"/> has not been set.
            This property is read-only -- the <c>Width</c> and <c>Height</c>
            are determined by the actual size of the part.
            </value>
            <seealso cref="P:Northwoods.GoXam.Node.Location"/>
        </member>
        <member name="P:Northwoods.GoXam.Part.IsSelected">
            <summary>
            Gets or sets whether this part is selected.
            </summary>
            <value>
            The default value is false.
            Setting this property to true will cause this part to be added to
            the diagram's <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> collection.
            Setting this property to false will cause this part to be removed
            from that collection.
            </value>
            <remarks>
            If <see cref="M:Northwoods.GoXam.Part.CanSelect"/> is false, one cannot set this property to true.
            Also, the number of selected parts is limited by the value of
            <see cref="P:Northwoods.GoXam.Diagram.MaximumSelectionCount"/>, so this
            part cannot be selected if that would violate that limit.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Adornments">
            <summary>
            Get the collection of <see cref="T:Northwoods.GoXam.Adornment"/>s associated with this part.
            </summary>
            <remarks>
            Each adornment will have a <see cref="P:Northwoods.GoXam.Part.Category"/> that is unique for this part.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.LayerName">
            <summary>
            Gets or sets the name of the <see cref="T:Northwoods.GoXam.Layer"/> that this part should be in.
            </summary>
            <value>
            The default value is an empty string.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            This value is used to find the <see cref="T:Northwoods.GoXam.Layer"/>
            with the <see cref="P:Northwoods.GoXam.Layer.Id"/> of the same value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Copyable">
            <summary>
            Gets or sets whether the user may copy this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanCopy"/> to see
            if a particular part is copyable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Deletable">
            <summary>
            Gets or sets whether the user may remove this part from the diagram.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanDelete"/> to see
            if a particular part is deletable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Editable">
            <summary>
            Gets or sets whether the user may in-place text edit this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanEdit"/> to see
            if a particular part is editable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Groupable">
            <summary>
            Gets or sets whether the user may group this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanGroup"/> to see
            if a particular part is groupable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Movable">
            <summary>
            Gets or sets whether the user may move this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanMove"/> to see
            if a particular part is movable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Printable">
            <summary>
            Gets or sets whether the user may print this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanPrint"/> to see
            if a particular part is printable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Reshapable">
            <summary>
            Gets or sets whether the user may reshape this part.
            </summary>
            <value>
            The default value is false.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanReshape"/> to see
            if a particular part is reshapable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Resizable">
            <summary>
            Gets or sets whether the user may resize this part.
            </summary>
            <value>
            The default value is false.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanResize"/> to see
            if a particular part is resizable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Rotatable">
            <summary>
            Gets or sets whether the user may rotate this part.
            </summary>
            <value>
            The default value is false.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanRotate"/> to see
            if a particular part is rotatable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Visible">
            <summary>
            Gets or sets whether the user may see or pick this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            <para>
            Setting this property also sets the <c>Part.Visibility</c> property to either <c>Visibility.Visible</c>
            or <c>Visibility.Collapsed</c>.
            </para>
            <para>
            This dependency property is set by <see cref="T:Northwoods.GoXam.Node"/> methods for collapsing/expanding subtrees,
            by <see cref="T:Northwoods.GoXam.Group"/> methods for collapsing/expanding subgraphs, and by the
            <see cref="T:Northwoods.GoXam.PartManager"/> as the model changes.
            Therefore one-way data-bindings of this attached dependency property to updated source properties
            may not get updated values when there are collapsed subtrees or collapsed subgraphs.
            </para>
            <para>
            Caution: because the <c>UIElement.Visibility</c> of the <see cref="T:Northwoods.GoXam.Part"/> may be set
            independently of this property, the value of this property may not reflect the value of <c>Part.Visibility</c>.
            This property is most useful in data templates for setting the initial value of <c>Visibility</c> for the part.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.Selectable">
            <summary>
            Gets or sets whether the user may select this part.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Part.CanSelect"/> to see
            if a particular part is selectable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.SelectionElementName">
            <summary>
            Gets or sets the name of the element that gets any selection adornment
            when selected and that may be resized/reshaped/rotated.
            </summary>
            <value>
            The default value is an empty string,
            which means <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> will be the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            i.e. the whole part.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            This is used to find the element that is this part's <see cref="P:Northwoods.GoXam.Part.SelectionElement"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.SelectionElement">
            <summary>
            Gets the <c>FrameworkElement</c> that gets a selection adornment
            when selected and that may be resized/reshaped/rotated.
            </summary>
            <remarks>
            If no element is named by <see cref="P:Northwoods.GoXam.Part.SelectionElementName"/>,
            this returns the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.SelectionAdorned">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> gets a
            selection adornment when this part is selected.
            </summary>
            <value>
            The default value is false.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            When this value is false there might not be any visual indication that a part
            is selected unless the part changes its appearance.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.SelectionAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to create the selection adornment
            for this part when it is selected.
            </summary>
            <value>
            The default value is null.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            This value is used by <see cref="M:Northwoods.GoXam.Part.UpdateSelectionAdornment"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.ResizeAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by the <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/>
            when this part is selected.
            </summary>
            <value>
            The default value is null.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.RotateAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by the <see cref="T:Northwoods.GoXam.Tool.RotatingTool"/>
            when this part is selected.
            </summary>
            <value>
            The default value is null.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.DragOverSnapEnabled">
            <summary>
            Gets or sets whether dragging any parts over this part causes their position to be snapped to grid points.
            </summary>
            <value>
            The default value is false.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.DragOverSnapCellSize">
            <summary>
            Gets or sets the size of the grid cell used when snapping during a drag.
            </summary>
            <value>
            The default <c>Size</c> is 10x10 in model units.
            Any new width or height value must be positive but non-infinite numbers.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.DragOverSnapCellSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> that specifies what point in the grid cell dragged parts snap to.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>,
            which means parts get snapped directly to the grid points.
            A new value must be a specific spot: <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> must be true for any new value.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.DragOverSnapOrigin">
            <summary>
            Gets or sets the snapping grid's coordinates origin or offset.
            </summary>
            <value>
            The default value is <c>Point(0, 0)</c>,
            which means that the grid starts at the same point as the position
            of the node's <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            The value must have numbers that are not infinite.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.DropOntoBehavior">
            <summary>
            Gets or sets the behavior when the <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>
            drops the selection after a move or copy.
            </summary>
            <value>
            <para>
            The default value is <see cref="F:Northwoods.GoXam.DropOntoBehavior.None"/>.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </para>
            <para>
            For this property to have an effect you must enable the <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>
            by setting <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> to true.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.IsDropOntoAccepted">
            <summary>
            Gets or sets whether the mouse is over this part during a <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/> drag
            and <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Part.ResizeElementName">
            <summary>
            Gets or sets the name of the element that gets a resize adornment when selected.
            </summary>
            <value>
            The default value is null,
            which means the <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/> will use the <see cref="P:Northwoods.GoXam.Part.SelectionElement"/>.
            A string value will cause the resizing tool to use the element with that name in the visual tree of the node.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            This is used to find the element that the <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/> will allow the user to resize.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.ResizeCellSize">
            <summary>
            Gets or sets the multiple used to resize.
            </summary>
            <value>
            The default <c>Size</c> is NaNxNaN in model units.
            A value of NaN means that that the resize width or height multiple is taken from
            the <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/> or from a node behind it that has <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/>
            (the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/>)
            or from the diagram if it has <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/>
            (the <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/>).
            Any new width or height value must be a positive non-infinite number or NaN.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.Text">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Part.Text"/> string representing this part.
            </summary>
            <value>
            The default value is an empty string.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.InDiagramBounds">
            <summary>
            Gets or sets whether this part is included or is ignored in the computation of the diagram bounds,
            by <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            You might set this to false for some kinds of background objects.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.LayoutId">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Id"/> which identifies
            the layout(s) in a <see cref="T:Northwoods.GoXam.Layout.MultiLayout"/> in which this part participates.
            </summary>
            <value>
            The default value is the empty string, which is the <see cref="P:Northwoods.GoXam.Layer.Id"/> of the default layer.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            Set this to the special value "None" to cause all <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>s to ignore this Part.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Part.IsTopLevel">
            <summary>
            This property is true when this part is not member of any group node
            nor is it a label node for a link.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Part.ContainingGroups">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Group"/>s of which this part is a member.
            </summary>
            <remarks>
            This property is useful when the model is an <see cref="T:Northwoods.GoXam.Model.IGroupsModel"/>,
            including any <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Part.ContainingSubGraph">
            <summary>
            Get the one <see cref="T:Northwoods.GoXam.Group"/> (a "subgraph") that this part is a member of, if any.
            </summary>
            <remarks>
            This property is only useful when the model is an <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Node.#ctor">
            <summary>
            Constructs a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.ToString">
            <summary>
            For convenience in debugging,
            this returns the the <see cref="P:Northwoods.GoXam.Part.Text"/> value if non-empty,
            or else <see cref="P:Northwoods.GoXam.Node.Id"/> if it is non-null,
            or else just this <c>ToString()</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.OnApplyTemplate">
            <summary>
            Initialize <see cref="P:Northwoods.GoXam.Node.IsExpandedTree"/> with the possibly bound value of <see cref="M:Northwoods.GoXam.Node.GetIsTreeExpanded(System.Windows.DependencyObject)"/>
            on this node's root visual element, and initialize the node's <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Node.IsLinkLabelProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.IsLinkLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Node.IdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.Id"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Node.PartsModelContainingSubGraphProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.PartsModelContainingSubGraph"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Node.IsExpandedTreeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.IsExpandedTree"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.OnIsExpandedTreeChanged">
            <summary>
            This virtual method is called whenever the value of <see cref="P:Northwoods.GoXam.Node.IsExpandedTree"/> changes.
            </summary>
            <remarks>
            <para>
            By default this will call <see cref="M:Northwoods.GoXam.Node.ExpandTree"/> if <see cref="P:Northwoods.GoXam.Node.IsExpandedTree"/>
            has become true, else it will call <see cref="M:Northwoods.GoXam.Node.CollapseTree"/>.
            </para>
            <para>
            In Silverlight, if the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> is a <c>Control</c>,
            this will also call <c>VisualStateManager.GoToState</c> with a new state
            of either "Expanded" or "Collapsed".
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Node.LocationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.Location"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLocation(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.Location"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLocation(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.Location"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v">neither coordinate may be Double.NaN</param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LocationElementNameProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLocationElementName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLocationElementName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LocationSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLocationSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLocationSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.MinLocationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.MinLocation"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetMinLocation(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.MinLocation"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetMinLocation(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.MinLocation"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.MaxLocationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetMaxLocation(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetMaxLocation(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Node.Move(System.Windows.Point,System.Boolean)">
            <summary>
            Move a node to a new position, perhaps with animation.
            </summary>
            <param name="newpos">a new <see cref="P:Northwoods.GoXam.Node.Position"/> in model coordinates; not a new <see cref="P:Northwoods.GoXam.Node.Location"/></param>
            <param name="animated">whether the movement is animated by the diagram's <see cref="T:Northwoods.GoXam.LayoutManager"/></param>
            <remarks>
            Call this method in implementations of <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>
            in order to get animated layouts.
            When <paramref name="animated"/> is false, this just sets the <see cref="P:Northwoods.GoXam.Node.Position"/> to the <paramref name="newpos"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Node.ZOrderProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.ZOrder"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetZOrder(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.ZOrder"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetZOrder(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.ZOrder"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.AvoidableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.Avoidable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetAvoidable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.Avoidable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetAvoidable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.Avoidable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.AvoidableMarginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.AvoidableMargin"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetAvoidableMargin(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.AvoidableMargin"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetAvoidableMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.AvoidableMargin"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.RotationAngleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetRotationAngle(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetRotationAngle(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.RotationSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Node.RotationSpot"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetRotationSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Node.RotationSpot"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetRotationSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Node.RotationSpot"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.IsTreeExpandedProperty">
            <summary>
            Identifies the <c>IsTreeExpanded</c> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetIsTreeExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.IsTreeExpandedProperty"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetIsTreeExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.IsTreeExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
            <remarks>
            Changing this attached property toggles the <see cref="P:Northwoods.GoXam.Part.Visible"/> property of
            outbound links and their "to" nodes.
            Setting this attached property also sets the <see cref="P:Northwoods.GoXam.Node.IsExpandedTree"/> dependency property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Node.WasTreeExpandedProperty">
            <summary>
            Identifies the <c>WasTreeExpanded</c> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetWasTreeExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.WasTreeExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetWasTreeExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.WasTreeExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.PortIdProperty">
            <summary>
            Identifies the <c>PortId</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/> acting as a port.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.PortIdProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns>
            If the element is acting as a "port", this returns the port's "name".
            By default this returns null, indicating that the element is not a port,
            unless it is the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetPortId(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.PortIdProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v">
            null to indicate that the element is not a "port";
            the empty string to indicate that the element is the default port for the <see cref="T:Northwoods.GoXam.Node"/>;
            a non-empty string to uniquely identify the port within the <see cref="T:Northwoods.GoXam.Node"/>
            </param>
        </member>
        <member name="F:Northwoods.GoXam.Node.FromSpotProperty">
            <summary>
            Identifies the <c>FromSpot</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/> acting as a port.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetFromSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.FromSpotProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetFromSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.FromSpotProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.ToSpotProperty">
            <summary>
            Identifies the <c>ToSpot</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/> acting as a port.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetToSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.ToSpotProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetToSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.ToSpotProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.FromEndSegmentLengthProperty">
            <summary>
            Identifies the <c>FromEndSegmentLength</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetFromEndSegmentLength(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.FromEndSegmentLengthProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetFromEndSegmentLength(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.FromEndSegmentLengthProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.ToEndSegmentLengthProperty">
            <summary>
            Identifies the <c>ToEndSegmentLength</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetToEndSegmentLength(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.ToEndSegmentLengthProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetToEndSegmentLength(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.ToEndSegmentLengthProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LinkableFromProperty">
            <summary>
            Identifies the <c>LinkableFrom</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLinkableFrom(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableFromProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLinkableFrom(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableFromProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LinkableToProperty">
            <summary>
            Identifies the <c>LinkableTo</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLinkableTo(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableToProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLinkableTo(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableToProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LinkableSelfNodeProperty">
            <summary>
            Identifies the <c>LinkableSelfNode</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLinkableSelfNode(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableSelfNodeProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLinkableSelfNode(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableSelfNodeProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LinkableDuplicatesProperty">
            <summary>
            Identifies the <c>LinkableDuplicates</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLinkableDuplicates(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableDuplicatesProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLinkableDuplicates(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableDuplicatesProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Node.LinkableMaximumProperty">
            <summary>
            Identifies the <c>LinkableMaximum</c> attached dependency property,
            for an element inside a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetLinkableMaximum(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableMaximumProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.SetLinkableMaximum(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Node.LinkableMaximumProperty"/> attached dependency property.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindPort(System.String,System.Boolean)">
            <summary>
            Find the <c>FrameworkElement</c> in this node whose <c>Node.PortId</c>
            attached property matches a given port parameter value.
            </summary>
            <param name="portid">
            This treats null as an empty string.
            The method returns the element whose <see cref="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)"/> value equals that string.
            If there is no such child element, it searches for an element whose
            <see cref="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)"/> value is the empty string.
            Finally, when failing to find a port with either the given name or the empty string,
            this method returns the root visual element for the node.
            </param>
            <param name="from"></param>
            <returns>a <c>FrameworkElement</c>, or null if no matching element is found</returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.GetPortName(System.Windows.FrameworkElement)">
            <summary>
            Get the port parameter value for a particular <c>FrameworkElement</c>.
            </summary>
            <param name="port">a <c>FrameworkElement</c> in this node's visual tree</param>
            <returns>
            the value of <see cref="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)"/>, if it is a non-empty string;
            otherwise it returns null
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindLinksConnectedWithPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Link"/>s that are connected to a particular port
            in either direction.
            </summary>
            <param name="portid">
            When this argument is null, this just returns <see cref="P:Northwoods.GoXam.Node.LinksConnected"/>.
            Otherwise it returns those links where either the <see cref="P:Northwoods.GoXam.Link.FromPortId"/>
            or the <see cref="P:Northwoods.GoXam.Link.ToPortId"/> match the <paramref name="portid"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindLinksIntoPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Link"/>s that come into a particular port.
            </summary>
            <param name="portid">
            When this argument is null, this just returns <see cref="P:Northwoods.GoXam.Node.LinksInto"/>.
            Otherwise it returns those links where the <see cref="P:Northwoods.GoXam.Link.FromPortId"/>
            matches the <paramref name="portid"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindLinksOutOfPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Link"/>s that go out of a particular port.
            </summary>
            <param name="portid">
            When this argument is null, this just returns <see cref="P:Northwoods.GoXam.Node.LinksOutOf"/>.
            Otherwise it returns those links where the <see cref="P:Northwoods.GoXam.Link.ToPortId"/>
            matches the <paramref name="portid"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindNodesConnectedWithPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Node"/>s that are connected to this node
            via links that are connected to a particular port in either direction.
            </summary>
            <param name="portid">
            a port description that is passed to <see cref="M:Northwoods.GoXam.Node.FindLinksConnectedWithPort(System.String)"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindNodesIntoPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Node"/>s that are connected to this node via links that come into a particular port.
            </summary>
            <param name="portid">
            a port description that is passed to <see cref="M:Northwoods.GoXam.Node.FindLinksIntoPort(System.String)"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindNodesOutOfPort(System.String)">
            <summary>
            Returns a collection of <see cref="T:Northwoods.GoXam.Node"/>s that are connected to this node via links that go out of a particular port.
            </summary>
            <param name="portid">
            a port description that is passed to <see cref="M:Northwoods.GoXam.Node.FindLinksOutOfPort(System.String)"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Node.FindTreeParts(Northwoods.GoXam.Tool.EffectiveCollectionInclusions)">
            <summary>
            Return a collection of <see cref="T:Northwoods.GoXam.Part"/>s that are all of the nodes and links
            reachable out of this node, including this <see cref="T:Northwoods.GoXam.Node"/> itself.
            </summary>
            <param name="inclusions">
            this should be <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree"/>
            </param>
            <remarks>
            For nodes that are <see cref="T:Northwoods.GoXam.Group"/>s, this will include its members.
            For links that have a <see cref="P:Northwoods.GoXam.Link.LabelNode"/>, this will include the label nodes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Node.CollapseTree">
            <summary>
            Make not visible each child node and the link connecting with the child node,
            and recursively collapse each child node.
            </summary>
            <remarks>
            <para>
            Links are assumed to go from the parent node to the children nodes,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is set to "Source".
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Node.SetIsTreeExpanded(System.Windows.DependencyObject,System.Boolean)"/> to set that attached property,
            and <see cref="M:Northwoods.GoXam.Node.SetWasTreeExpanded(System.Windows.DependencyObject,System.Boolean)"/> to remember whether a tree child node had been expanded,
            to support data binding the state of the tree node.
            </para>
            <para>
            This operation is performed within a "Collapse Tree" transaction.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Node.ExpandTree">
            <summary>
            Make visible each child node and the link to the child node,
            and perhaps recursively expand their nodes.
            </summary>
            <remarks>
            <para>
            Links are assumed to go from the parent node to the children nodes,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is set to "Source".
            </para>
            <para>
            This will expand a tree child node only if its <see cref="M:Northwoods.GoXam.Node.GetWasTreeExpanded(System.Windows.DependencyObject)"/> was true.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Node.SetIsTreeExpanded(System.Windows.DependencyObject,System.Boolean)"/> to set that attached property,
            and if appropriate <see cref="M:Northwoods.GoXam.Node.SetWasTreeExpanded(System.Windows.DependencyObject,System.Boolean)"/>,
            to support data binding whether the tree is expanded.
            </para>
            <para>
            This operation is performed within an "Expand Tree" transaction.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.IsLinkLabel">
            <summary>
            Gets whether this node represents a label node for a link.
            </summary>
            <value>
            The default value is false.
            You cannot change this value once the Node has been added to a Diagram.
            </value>
            <remarks>
            For nodes that are bound to data, this is set automatically by the <see cref="T:Northwoods.GoXam.PartManager"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.Id">
            <summary>
            Gets or sets the string identifier used by the <see cref="T:Northwoods.GoXam.Model.PartsModel"/> to resolve
            references from other parts in the <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
            <value>
            The default value is null.
            If this node is in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>,
            such as when defined as nested elements of a <see cref="T:Northwoods.GoXam.Diagram"/> element in XAML,
            and if you want to refer to this node from other links or nodes,
            you will need to provide a unique value for this property.
            </value>
            <remarks>
            This property is only used by unbound nodes that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.PartsModelContainingSubGraph">
            <summary>
            Gets or sets the identifier naming the containing group node in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
            <value>
            The default value is null, indicating that this node is not member of any group.
            </value>
            <remarks>
            This property is only used by unbound nodes that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.IsExpandedTree">
            <summary>
            Gets or sets whether this node is considered "expanded"
            with respect to showing/hiding nodes that it connects to.
            </summary>
            <value>
            The default value is true.
            Changing this value calls either <see cref="M:Northwoods.GoXam.Node.ExpandTree"/> or <see cref="M:Northwoods.GoXam.Node.CollapseTree"/>.
            </value>
            <remarks>
            If you want to data bind whether this node (subtree) is expanded,
            bind the <see cref="F:Northwoods.GoXam.Node.IsTreeExpandedProperty"/> and <see cref="F:Northwoods.GoXam.Node.WasTreeExpandedProperty"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.Location">
            <summary>
            Gets or sets the position of this node based on its <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            </summary>
            <value>
            The <c>Point</c> is in model coordinates.
            The value is related to <see cref="P:Northwoods.GoXam.Node.Position"/>.
            It may have a different value than <see cref="P:Northwoods.GoXam.Node.Position"/> depending on the values of <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> and <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            <para>
            It is common to set the <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> to <see cref="F:Northwoods.GoXam.Spot.Center"/>,
            so that the location of the node is always the coordinates of the center point of the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            The <see cref="P:Northwoods.GoXam.Node.Position"/> always refers to the top-left corner point of the <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            Setting the <see cref="P:Northwoods.GoXam.Node.Position"/> will also update this <see cref="P:Northwoods.GoXam.Node.Location"/>.
            </para>
            <para>
            Grid snapping, for example, will normally locate node <c>Location</c>s to be on grid points.
            (But you can change that by setting <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSpot"/>.)
            By setting the node's <see cref="P:Northwoods.GoXam.Node.LocationSpot"/> to be the center of one of the node's elements,
            by default the whole node, the element will be centered at the location.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Node.MinLocation"/> and <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> also operate on the node's location, not its position.
            </para>
            <para>
            However, the <see cref="M:Northwoods.GoXam.Node.Move(System.Windows.Point,System.Boolean)"/> method takes a position, not a location.
            </para>
            <para>
            This attached dependency property is set by various tools and layouts.
            Therefore one-way data-bindings of this attached dependency property to changing source properties
            may not get updated values.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.LocationElementName">
            <summary>
            Gets or sets the name of the element whose position defines the location for this node.
            </summary>
            <value>
            The default value is an empty string,
            which means <see cref="P:Northwoods.GoXam.Node.LocationElement"/> will be the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            i.e. the whole node.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            This is used to find the element that is this node's <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.LocationElement">
            <summary>
            Gets the <c>FrameworkElement</c> that determines the location of this node.
            </summary>
            <remarks>
            If no element is named by <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>,
            this returns the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.LocationSpot">
            <summary>
            Gets or sets the spot in the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>
            that is this node's location point.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>.
            The value must be a specific <see cref="T:Northwoods.GoXam.Spot"/> -- i.e. one for which <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            <para>
            When the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> is the default value (an empty string) or when it explicitly refers to the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            and when this <c>LocationSpot</c> property is <see cref="F:Northwoods.GoXam.Spot.TopLeft"/>,
            the <see cref="P:Northwoods.GoXam.Node.Location"/> will be the same as the <see cref="P:Northwoods.GoXam.Node.Position"/>.
            </para>
            <para>
            However, it is common to set this to <see cref="F:Northwoods.GoXam.Spot.Center"/>, so that the <see cref="P:Northwoods.GoXam.Node.Location"/>
            has a value corresponding to the point at the center of the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            (The <see cref="P:Northwoods.GoXam.Node.Position"/> always refers to the top-left corner point of the <see cref="P:Northwoods.GoXam.Part.Bounds"/>.)
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.MinLocation">
            <summary>
            Gets or sets the minimum location for this node allowed by <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>.
            </summary>
            <value>
            The default value is (-Infinity, -Infinity), thereby imposing no position constraint.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.MaxLocation">
            <summary>
            Gets or sets the maximum location for this node allowed by <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>.
            </summary>
            <value>
            The default value is (+Infinity, +Infinity), thereby imposing no position constraint.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.Position">
            <summary>
            The Position of a <see cref="T:Northwoods.GoXam.Node"/> is the point at the top-left corner of the <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            </summary>
            <value>
            Setting this property just changes the value of <see cref="P:Northwoods.GoXam.Node.Location"/>,
            offset to account for any difference between <see cref="P:Northwoods.GoXam.Node.Location"/> and <see cref="P:Northwoods.GoXam.Node.Position"/>.
            </value>
            <remarks>
            <para>
            This is only a CLR property, so this property cannot be data-bound.
            It is common to data-bind the <see cref="P:Northwoods.GoXam.Node.Location"/> property.
            </para>
            <para>
            Most operations work with the node's location, not the position.
            One exception is the <see cref="M:Northwoods.GoXam.Node.Move(System.Windows.Point,System.Boolean)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.ZOrder">
            <summary>
            Gets or sets the Z-ordering position of this node within its layer.
            </summary>
            <value>
            <para>
            Within the same layer, nodes with larger ZOrder values are placed in front of nodes with smaller ZOrder values.
            When the value is NaN the ordering is not specified.
            The default value is NaN.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </para>
            <para>
            When a <see cref="T:Northwoods.GoXam.Group"/> has a ZOrder value of NaN, it is automatically placed behind its member nodes and links
            that also have no ZOrder.
            Such automatic ordering is not guaranteed if any nodes including the groups have a numeric ZOrder.
            If you do want to specify the ZOrder of nodes, you should also specify the ZOrder of their containing groups.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.Avoidable">
            <summary>
            Gets or sets whether this node should be avoided when routing orthogonal links that have
            <see cref="P:Northwoods.GoXam.Route.Routing"/> is <see cref="F:Northwoods.GoXam.LinkRouting.AvoidsNodes"/>.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            The default value is true, except that it should be false for nodes for which <see cref="P:Northwoods.GoXam.Node.IsLinkLabel"/> is true
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.AvoidableMargin">
            <summary>
            Gets or sets the margin around this node that should be reserved when routing orthogonal links that have
            <see cref="P:Northwoods.GoXam.Route.Routing"/> is <see cref="F:Northwoods.GoXam.LinkRouting.AvoidsNodes"/>.
            </summary>
            <value>
            The default value is 2 on all four sides.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.RotationAngle">
            <summary>
            Gets or sets the angle of the node's <see cref="P:Northwoods.GoXam.Part.SelectionElement"/>, in degrees.
            </summary>
            <value>
            The default value is 0.0 degrees.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            <para>
            Angles start with zero being rightwards, in the direction of the positive X axis, and increase clockwise.
            90 degrees, for example, goes downwards, in the direction of the positive Y axis.
            </para>
            <para>
            It is the <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> that is rotated, not necessarily the whole node.
            Often one wants to rotate the principal element(s) of the node, but not the text or other decorations.
            </para>
            <para>
            You can enable user-controlled rotation of nodes by setting <see cref="P:Northwoods.GoXam.Part.Rotatable"/> to true.
            That makes use of the <see cref="T:Northwoods.GoXam.Tool.RotatingTool"/>, which may set this dependency property.
            Therefore one-way data-bindings of this attached dependency property to updated source properties
            may not get updated values when this property has been set.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.RotationSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> about which the node's <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> will rotate.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.Center"/>.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Node.LinksConnected">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Link"/>s that are connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.LinksInto">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Link"/>s that come into this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.LinksOutOf">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Link"/>s that go out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.NodesConnected">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Node"/>s that have links connected to this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.NodesInto">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Node"/>s that have links coming into this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.NodesOutOf">
            <summary>
            Gets a collection of <see cref="T:Northwoods.GoXam.Node"/>s that have links going out of this node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.Ports">
            <summary>
            Gets a collection of <c>FrameworkElement</c>s that have a non-null <see cref="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)"/> value.
            </summary>
            <value>
            This will include <see cref="P:Northwoods.GoXam.Part.VisualElement"/> itself,
            which might not even have a <c>Node.PortId</c> attached property value,
            if there aren't any elements with a non-null <c>Node.PortId</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.Port">
            <summary>
            Gets the primary <c>FrameworkElement</c> representing a port.
            </summary>
            <value>
            If there is a <c>FrameworkElement</c> in the visual tree whose <see cref="M:Northwoods.GoXam.Node.GetPortId(System.Windows.DependencyObject)"/>
            is the empty string, return it.
            Otherwise return the first element with a non-null <c>Node.PortId</c>.
            If there is no such element, just return the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Node.ContainingGroups">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Group"/>s of which this part is a member.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.ContainingSubGraph">
            <summary>
            Get the group <see cref="T:Northwoods.GoXam.Group"/> that this part is a member of, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Node.LabeledLink">
            <summary>
            If this node is a label for a link, return that <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Adornment.#ctor">
            <summary>
            Each <see cref="T:Northwoods.GoXam.Adornment"/> has a <see cref="P:Northwoods.GoXam.Part.LayerName"/> of "Adornment".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Adornment.AdornedElementProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Adornment.MakeAdornment(System.Windows.FrameworkElement,System.Windows.DataTemplate)">
            <summary>
            Assume adornments can't have their own adornments.
            </summary>
            <param name="selelt"></param>
            <param name="templ"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Adornment.UpdateAdornments">
            <summary>
            Assume adornments don't have any adornments that need to be updated.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Adornment.MeasureOverride(System.Windows.Size)">
            <summary>
            Before measuring this adornment, make sure we invalidate any <see cref="T:Northwoods.GoXam.SpotPanel"/>
            or <see cref="T:Northwoods.GoXam.SelectionHandle"/> that is the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.AdornedElement">
            <summary>
            Gets or sets the <c>FrameworkElement</c> that this adornment is associated with.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.AdornedPart">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Part"/> that this adornment is associated with.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.Data">
            <summary>
            Adornments are always unbound, so this property is always null
            and cannot be set.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.IsBoundToData">
            <summary>
            Adornments are never bound to data, so this property is always false.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.ContainingGroups">
            <summary>
            An Adornment is never a member of any group.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Adornment.ContainingSubGraph">
            <summary>
            An Adornment is never a member of any group.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.DiagramModel">
            <summary>
            The common base class for all predefined model classes.
            </summary>
            <remarks>
            <para>
            This class is not a generic class, unlike the predefined model classes
            (<see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>,
            <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>,
            <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>).
            </para>
            <para>
            This class defines several kinds of members:
            <list type="bullet">
            <item>
            a few properties:
            <see cref="P:Northwoods.GoXam.Model.DiagramModel.Name"/>, <see cref="P:Northwoods.GoXam.Model.DiagramModel.DataFormat"/>, <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/>
            </item>
            <item>
            the <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event and some methods for raising that event
            </item>
            <item>
            the <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> property and some methods
            for executing state changes due to an undo or redo
            </item>
            <item>
            some methods for starting and finishing edits (i.e. groups of state changes)
            </item>
            <item>
            the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.IDiagramModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.#ctor">
            <summary>
            The constructor is protected because this class is abstract.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.Reinitialize">
            <summary>
            Reset the fields that should not be shared from a copy created by <see cref="M:System.Object.MemberwiseClone"/>.
            </summary>
            <remarks>
            If you override this method because you have added some fields,
            be sure to call the base method too.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            </summary>
            <param name="e">an edit describing the change that just happened</param>
            <remarks>
            If you override this method, be sure to call the base method first.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event, given a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>.
            </summary>
            <param name="e">an edit describing the change that just happened</param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>.
            This method is public because it is part of the implementation of <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.RaisePropertyChanged(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event, given before and after values for a particular property.
            </summary>
            <param name="propname">a property name</param>
            <param name="data">the object whose property has just changed</param>
            <param name="oldval">the previous value for the property</param>
            <param name="newval">the new value for the property</param>
            <remarks>
            This is the mostly commonly used way to notify about changes to the model or to the model's data.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.RaisePropertyChanged(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.RaisePropertyChanged(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event for a property change.
            </summary>
            <param name="propname">a property name</param>
            <param name="data">the object whose property has just changed</param>
            <param name="oldval">the previous value for the property</param>
            <param name="oldparam">additional information for the old value</param>
            <param name="newval">the new value for the property</param>
            <param name="newparam">additional information for the new value</param>
            <remarks>
            This is not used as frequently as <see cref="M:Northwoods.GoXam.Model.DiagramModel.RaisePropertyChanged(System.String,System.Object,System.Object,System.Object)"/>.
            Typically the parameter values are used as indexes into the <paramref name="data"/>,
            to identify the particular value that was changed.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.RaisePropertyChanged(System.String,System.Object,System.Object,System.Object)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during an Undo or a Redo to actually make state
            changes to this model or to this model's data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            <para>
            When <paramref name="e"/>'s <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Change"/>
            value is <see cref="F:Northwoods.GoXam.Model.ModelChange.Property"/>,
            this calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeModelValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>
            if the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/> is this model,
            or else it calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </para>
            <para>
            This method handles all other <see cref="T:Northwoods.GoXam.Model.ModelChange"/> cases,
            since they are all predefined.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.ChangeModelValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to this model.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            You will want to override this method to handle properties that you
            have added to your derived model class.
            </para>
            <para>
            By default this uses reflection to set the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
            to the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue"/> or the
            <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewValue"/>, depending on the value of <paramref name="undo"/>.
            </para>
            <para>
            If you override this method, remember to call the base method for all
            cases that your override method does not handle.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to model data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            You will want to override this method to handle properties that you
            have added to your model data classes.
            Or you can have your data classes implement <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/>
            to achieve the same effect.
            </para>
            <para>
            By default this just calls <see cref="M:Northwoods.GoXam.Model.IChangeDataValue.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>
            if the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/> implements <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/>.
            Otherwise this uses reflection to set the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
            to the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue"/> or the
            <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewValue"/>, depending on the value of <paramref name="undo"/>.
            </para>
            <para>
            If you override this method, remember to call the base method for all
            cases that your override method does not handle.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.StartTransaction(System.String)">
            <summary>
            Call the UndoManager's StartTransaction method.
            </summary>
            <param name="tname">a String describing the transaction</param>
            <returns>the value of the call to StartTransaction</returns>
            <remarks>
            Transactions may be nested, e.g. Start, Start, Commit, Commit.
            <see cref="M:Northwoods.GoXam.Model.UndoManager.StartTransaction(System.String)"/>
            will raise a Changed event with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.StartedTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.CommitTransaction(System.String)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.CommitTransaction(System.String)">
            <summary>
            Call the UndoManager's CommitTransaction method.
            </summary>
            <param name="tname">a String describing the transaction</param>
            <returns>the value of the call to CommitTransaction</returns>
            <remarks>
            <see cref="M:Northwoods.GoXam.Model.UndoManager.CommitTransaction(System.String)"/>
            will raise a Changed event with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.CommittedTransaction"/>,
            and with a <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/>
            that is the <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>
            that was the value of <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/>
            before calling <see cref="M:Northwoods.GoXam.Model.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.StartTransaction(System.String)"/>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.RollbackTransaction"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.DiagramModel.RollbackTransaction">
            <summary>
            Call the UndoManager's RollbackTransaction method.
            </summary>
            <returns>the value of the call to RollbackTransaction</returns>
            <remarks>
            After calling <see cref="M:Northwoods.GoXam.Model.UndoManager.RollbackTransaction"/>,
            if that call returned true, this raises a Changed event with a hint of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RolledBackTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.DiagramModel.CommitTransaction(System.String)"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.Initializing">
            <summary>
            Gets or sets whether the model is being constructed or re-constructed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.Name">
            <summary>
            A name for this model.
            </summary>
            <value>
            By default this is an empty string.
            The value must not be null.
            </value>
            <remarks>
            This is mostly used to help distinguish between different models of the same type.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.DataFormat">
            <summary>
            Gets or sets the format of this model's data.
            </summary>
            <value>
            By default this is the fully qualified name of this model type.
            This property cannot be set to null.
            </value>
            <remarks>
            This string is used by clipboard and drag-and-drop operations to distinguish
            between different and presumably incompatible data sources.
            You may wish to provide different values in order to prevent data
            from being transferred to other applications that are using the same model class.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.Modifiable">
            <summary>
            Gets or sets whether various model-changing methods are enabled.
            </summary>
            <value>
            By default this value is false.
            </value>
            <remarks>
            <para>
            When false, this property disables methods named "Add...", "Modify...", or "Remove...".
            </para>
            <para>
            But note that this property does not and cannot affect the "modifiability"
            or "read-only"-ness of model data, since the data classes may have no knowledge
            about this model class and this property.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.DiagramModel.Changed">
            <summary>
            The Changed event is raised whenever the model is modified.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>
            <seealso cref="T:Northwoods.GoXam.Model.ModelChange"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.UndoManager">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> for this model.
            </summary>
            <value>
            This value may be null, when there is no <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>.
            By default this value is null.
            If this value is null, it is automatically set to a new <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>
            when <see cref="P:Northwoods.GoXam.Model.DiagramModel.HasUndoManager"/> is changed to be true.
            </value>
            <remarks>
            Of course, when there is no UndoManager, the user cannot perform an Undo or a Redo.
            Setting this property does not raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            Setting this property may also change the value of <see cref="P:Northwoods.GoXam.Model.DiagramModel.HasUndoManager"/>.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.DiagramModel.HasUndoManager"/>
            <seealso cref="P:Northwoods.GoXam.Model.DiagramModel.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.HasUndoManager">
            <summary>
            Gets or sets a flag that enables or disables support for undo and redo.
            </summary>
            <value>
            Initially this property is false.
            Changing it to true will create a new undo/redo manager and set the
            <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> property,
            if there is not already a value for that property.
            Changing it to false will remove any undo/redo manager.
            </value>
            <remarks>
            <para>
            This is just a more convenient way to enable undo/redo support,
            instead of creating an <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> and setting the
            property in XAML using property element syntax.
            </para>
            <para>
            Setting this property does not raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            Setting this property may also change the value of <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.SkipsUndoManager">
            <summary>
            Gets or sets a flag that tells <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> whether it
            should notify any <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> that a change has occurred.
            </summary>
            <value>
            This is normally false and should be set to true only transiently.
            Typically you may want to temporarily set this to true in order to avoid
            recording temporary changes to the model.
            </value>
            <remarks>
            Setting this property does not raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            Do not use this property to disable the <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> --
            instead remove the <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.IsChangingModel">
            <summary>
            This property is true during a call to <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>,
            indicating a change happening due to an undo or a redo.
            </summary>
            <remarks>
            Setting this property does not raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.IsInTransaction">
            <summary>
            This property is true after a <see cref="M:Northwoods.GoXam.Model.DiagramModel.StartTransaction(System.String)"/>
            and before a corresponding <see cref="M:Northwoods.GoXam.Model.DiagramModel.CommitTransaction(System.String)"/> or <see cref="M:Northwoods.GoXam.Model.DiagramModel.RollbackTransaction"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.DiagramModel.IsModified">
            <summary>
            Gets or sets whether this model is considered changed from an earlier state.
            </summary>
            <value>
            true if this model has been marked as having been modified,
            if the <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/> has recorded any changes, or
            if an undo has been performed without a corresponding redo.
            </value>
            <remarks>
            <para>
            This property is set to true in <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>.
            Setting this property does not raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event.
            </para>
            <para>
            Although you can set this property at any time, the value of
            <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> will continue to be true as long as
            there have been changes made to the model and you are using an
            <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            Any modifications to a model or one of its parts will result
            in setting <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> to true and in adding fromport
            <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> to the
            <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/> list,
            which holds all of the changes for undo/redo.
            </para>
            <para>
            When using an UndoManager, you should be making all changes within a transaction.
            After finishing or rolling back a transaction, you can set <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/>
            to false, and then it will remain false until another change is made to the model.
            </para>
            <para>
            When there is no <see cref="P:Northwoods.GoXam.Model.DiagramModel.UndoManager"/>, this property is
            implemented as only a simple boolean state variable.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.ValidCycle">
            <summary>
            Specifies what kinds of cycles may be made by a valid link from a port.
            </summary>
            <remarks>
            This provides values for the properties <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle"/>
            and <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ValidCycle"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.All">
            <summary>
            No restrictions on cycles.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.NotDirected">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.NotDirectedFast">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph,
            assuming there are no directed cycles anywhere accessible from either port.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.NotUndirected">
            <summary>
            A valid link from a port will not produce an undirected cycle in the graph.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.DestinationTree">
            <summary>
            Any number of destination links may go out of a port, but at most one
            source link may come into a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidCycle.SourceTree">
            <summary>
            Any number of source links may come into a port, but at most one
            destination link may go out of a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.Predicate`2">
            <summary>
            A generic delegate describing a two argument function returning a boolean value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns>a boolean</returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.Predicate`3">
            <summary>
            A generic delegate describing a three argument function returning a boolean value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns>a boolean</returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.Predicate`4">
            <summary>
            A generic delegate describing a four argument function returning a boolean value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns>a boolean</returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.Predicate`5">
            <summary>
            A generic delegate describing a five argument function returning a boolean value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns>a boolean</returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.Predicate`6">
            <summary>
            A generic delegate describing a six argument function returning a boolean value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <returns>a boolean</returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.TreeModelNodeData`1">
             <summary>
             A simple representation of node data for <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
             that supports property change notification, copying, and undo
             via the <c>INotifyPropertyChanged</c>, <c>ICloneable</c>, and <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interfaces.
             </summary>
             <typeparam name="NodeKey">the Type of a value uniquely identifying a node data in the model</typeparam>
             <remarks>
             <para>
             This provides a standard implementation of
             <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
             data that represents nodes and includes a property for
             referring to the "parent" node, and a property for holding a list of
             "children" nodes.
             You can use this class if you do not already have your own application class
             holding information about nodes and if you want to inherit from an existing
             class so that you can just add your own properties.  Here's a simple example:
             </para>
             <para>
             <code>
              [Serializable]
              public class MyData : TreeModelNodeData&lt;String&gt; {
                public MyData() { }
            
                public String Name {
                  get { return _Name; }
                  set { if (_Name != value) { String old = _Name; _Name = value; RaisePropertyChanged("Name", old, value); } }
                }
                private String _Name;
            
                public String Address {
                  get { return _Address; }
                  set { if (_Address != value) { String old = _Address; _Address = value; RaisePropertyChanged("Address", old, value); } }
                }
                private String _Address;
              }
             </code>
             </para>
             <para>
             Note that property setters need to raise the model's Changed event,
             so that the model knows about changes in the data and can then update the diagram.
             You should call <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)"/> only when the value has actually changed,
             and you should pass both the previous and the new values, in order to support undo/redo.
             </para>
             <para>
             For both Silverlight and WPF you should override the <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.Clone"/> method
             if the fields contain data that should not be shared between copies.
             For WPF the properties that you define should also be serializable,
             in order for the data to be copiable, especially to and from the clipboard.
             </para>
             <para>
             If you add properties to this node data class, and if you are using the
             <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
             <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
             you should override the <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/> and <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>
             methods to add new attributes and/or elements as needed,
             </para>
             <para>
             Normally, each <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.GoXam.Model.TreeModel`2.MakeNodeKeyUnique(`0)"/>
             method.  The override (or the setting of the same-named delegate in
             <see cref="P:Northwoods.GoXam.Model.TreeModel`2.Delegates"/>)
             is required if nodes might be copied within the model.
             </para>
             <para>
             If you want each node to keep a reference to its "parent" node,
             you can use the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ParentKey"/> property.
             If you want each node to keep a list of reference to its "children" nodes,
             you can use the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ChildKeys"/> property, which is a list of node keys.
             You can use both <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ParentKey"/> and <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ChildKeys"/> at the same time.
             </para>
             </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.IChangeDataValue">
            <summary>
            Implement this interface on your node data or link data classes
            to support undo and redo functionality.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModelNodeData`1"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModelNodeData`1"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModelNodeData`1"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IChangeDataValue.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This method is called during an undo or a redo to modify the state
            of the data object implementing the <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interface.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.#ctor">
            <summary>
            The default constructor produces an empty object.
            </summary>
            <remarks>
            If the <i>NodeKey</i> is <c>Guid</c>, this automatically assigns the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key"/> to be a new <c>Guid</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.#ctor(`0)">
            <summary>
            This constructor also initializes the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key"/> property.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            When you add your own state in a subclass, and when you expect to be able to copy the data,
            you should override this method in your derived class when it has some fields that are object references.
            Your override method should first call <c>base.Clone()</c> to get the newly copied object.
            The result should be the object you return,
            after performing any other deeper copying of referenced objects that you deem necessary,
            and after removing references that should not be shared (such as to cached data structures).
            </para>
            <para>
            The standard implementation of this method is to do a shallow copy, by <c>Object.MemberwiseClone()</c>,
            and reinitialize the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ParentKey"/> and <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ChildKeys"/> properties.
            You do not need to override this method if you have only added some fields/properties
            that are values or are references to intentionally shared objects.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.OnPropertyChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.Model.TreeModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Call this method from property setters to raise the <see cref="E:Northwoods.GoXam.Model.TreeModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="pname">the property name</param>
            <param name="oldval">the value before the property was set</param>
            <param name="newval">the new value</param>
            <remarks>
            Only call this method when the property value actually changes.
            The <paramref name="oldval"/> and <paramref name="newval"/> values are needed
            to support undo/redo.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ToString">
            <summary>
            For debugging, use the <see cref="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key"/> property as this object's default text rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This method implements the <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interface,
            used to perform state changes for undo and redo.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            Unless you override this method to explicitly handle each property that you define,
            this implementation uses reflection to set the property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.MakeXElement(System.Xml.Linq.XName)">
            <summary>
            Constructs a Linq for XML <c>XElement</c> holding the data of this node.
            </summary>
            <param name="n">the name of the new <c>XElement</c></param>
            <returns>an initialized <c>XElement</c></returns>
            <remarks>
            <para>
            This constructs a new <c>XElement</c> and adds an <c>XAttribute</c> for each simple property
            that has a value different from its default value.
            For each property that is a collection, it adds an <c>XElement</c> with nested item elements.
            This does not add an element if the collection is empty.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ConvertNodeKeyToString(`0)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual XElement MakeXElement(XName n) {
              XElement e = new XElement(n);
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("Key", this.Key, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Category", this.Category, ""));
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("ParentKey", this.ParentKey, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Elements&lt;NodeKey&gt;("ChildKeys", "Key", this.ChildKeys, ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("IsTreeExpanded", this.IsTreeExpanded, true));
              e.Add(XHelper.Attribute("WasTreeExpanded", this.WasTreeExpanded, false));
              e.Add(XHelper.Attribute("Location", this.Location, new Point(Double.NaN, Double.NaN)));
              e.Add(XHelper.Attribute("Text", this.Text, ""));
              return e;
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)">
            <summary>
            Initialize this node data with data held in a Linq for XML <c>XElement</c>.
            </summary>
            <param name="e">the <c>XElement</c></param>
            <remarks>
            <para>
            This sets this node data's properties by reading the data from attributes and nested elements
            of the given <c>XElement</c>.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ConvertStringToNodeKey(System.String)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual void LoadFromXElement(XElement e) {
              this.Key = XHelper.Read&lt;NodeKey&gt;("Key", e, default(NodeKey), ConvertStringToNodeKey);
              this.Category = XHelper.Read("Category", e, "");
              this.ParentKey = XHelper.Read&lt;NodeKey&gt;("ParentKey", e, default(NodeKey), ConvertStringToNodeKey);
              this.ChildKeys = (IList&lt;NodeKey&gt;)XHelper.ReadElements&lt;NodeKey&gt;(e.Element("ChildKeys"), "Key", new ObservableCollection&lt;NodeKey&gt;(), ConvertStringToNodeKey);
              this.IsTreeExpanded = XHelper.Read("IsTreeExpanded", e, true);
              this.WasTreeExpanded = XHelper.Read("WasTreeExpanded", e, false);
              this.Location = XHelper.Read("Location", e, new Point(Double.NaN, Double.NaN));
              this.Text = XHelper.Read("Text", e, "");
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ConvertNodeKeyToString(`0)">
            <summary>
            Convert a <typeparamref name="NodeKey"/> key value to a string.
            </summary>
            <param name="key"></param>
            <returns>a String from which <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ConvertStringToNodeKey(System.String)"/> can recover the original key value</returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModelNodeData`1.ConvertStringToNodeKey(System.String)">
            <summary>
            Convert a string to a <typeparamref name="NodeKey"/> key value.
            </summary>
            <param name="s"></param>
            <returns>a <typeparamref name="NodeKey"/></returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.TreeModelNodeData`1.PropertyChanged">
            <summary>
            This event implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface,
            so that both the model and the dependency object system can be informed
            of changes to property values.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Key">
            <summary>
            Gets or sets the key property for this node data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="NodeKey"/>,
            which must be compatible with and should the same as the NodeKey type parameter
            used for the model, <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Category">
            <summary>
            Gets or sets a <c>String</c> that names the category to which the node data belongs.
            </summary>
            <value>
            <para>
            The default value is an empty string.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ParentKey">
            <summary>
            Gets or sets the key property referring to the "parent" node, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.ChildKeys">
            <summary>
            Gets or sets the list of keys identifying the "children" nodes.
            </summary>
            <value>
            By default this is an empty <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            Usually you will not need to set this, but if you do, you may want to make sure the
            new value also implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.IsTreeExpanded">
            <summary>
            Gets or sets whether this node is in the "expanded" state.
            </summary>
            <value>
            By default this is true.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.WasTreeExpanded">
            <summary>
            Gets or sets whether this node had been "expanded" when its parent node was "collapsed".
            </summary>
            <value>
            By default this is true.  This is meaningful only when the subtree is not expanded.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Location">
            <summary>
            Gets or sets a <c>Point</c> that is the location of the node in model coordinates.
            </summary>
            <value>
            The default value is (NaN, NaN).
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModelNodeData`1.Text">
            <summary>
            Gets or sets a <c>String</c> that is associated with the node.
            </summary>
            <value>
            The default value is an empty string.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphModelNodeData`1">
             <summary>
             A simple representation of node data for <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
             that supports property change notification, copying, and undo
             via the <c>INotifyPropertyChanged</c>, <c>ICloneable</c>, and <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interfaces.
             </summary>
             <typeparam name="NodeKey">the Type of a value uniquely identifying a node data in the model</typeparam>
             <remarks>
             <para>
             This provides a standard implementation of
             <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
             data that represents nodes and includes properties for
             collections of adjacent node keys, in either direction,
             and includes properties for specifying the containing subgraph node key
             and/or the collection of member node keys.
             You can use this class if you do not already have your own application class
             holding information about nodes and if you want to inherit from an existing
             class so that you can just add your own properties.  Here's a simple example:
             </para>
             <para>
             <code>
              [Serializable]
              public class MyData : GraphModelNodeData&lt;String&gt; {
                public MyData() { }
            
                public String Name {
                  get { return _Name; }
                  set { if (_Name != value) { String old = _Name; _Name = value; RaisePropertyChanged("Name", old, value); } }
                }
                private String _Name;
            
                public String Address {
                  get { return _Address; }
                  set { if (_Address != value) { String old = _Address; _Address = value; RaisePropertyChanged("Address", old, value); } }
                }
                private String _Address;
              }
             </code>
             </para>
             <para>
             Note that property setters need to raise the model's Changed event,
             so that the model knows about changes in the data and can then update the diagram.
             You should call <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)"/> only when the value has actually changed,
             and you should pass both the previous and the new values, in order to support undo/redo.
             </para>
             <para>
             For both Silverlight and WPF you should override the <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.Clone"/> method
             if the fields contain data that should not be shared between copies.
             For WPF the properties that you define should also be serializable,
             in order for the data to be copiable, especially to and from the clipboard.
             </para>
             <para>
             If you add properties to this node data class, and if you are using the
             <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
             <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
             you should override the <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/> and <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>
             methods to add new attributes and/or elements as needed,
             </para>
             <para>
             Normally, each <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.GoXam.Model.GraphModel`2.MakeNodeKeyUnique(`0)"/>
             method.  The override (or the setting of the same-named delegate in
             <see cref="P:Northwoods.GoXam.Model.GraphModel`2.Delegates"/>)
             is required if nodes might be copied within the model.
             </para>
             <para>
             If you want each node to keep a list of nodes for which there are links
             to those nodes coming out of this node data,
             you can use the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.ToKeys"/> property, which is a list of node keys.
             If you want each node to keep a list of nodes from which there are links
             coming into this node data,
             you can use the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.FromKeys"/> property, which is a list of node keys.
             You can use both lists at the same time.
             </para>
             <para>
             If you want each node to keep a "reference" to the containing ("parent") group,
             you can use the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.SubGraphKey"/> property.
             If you want subgraph data to keep a list of "references" to the contained
             ("children") nodes, you can use the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.MemberKeys"/> property.
             You can use both properties at the same time.
             </para>
             </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.#ctor">
            <summary>
            The default constructor produces an empty object.
            </summary>
            <remarks>
            If the <i>NodeKey</i> is <c>Guid</c>, this automatically assigns the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key"/> to be a new <c>Guid</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.#ctor(`0)">
            <summary>
            This constructor also initializes the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key"/> property.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            When you add your own state in a subclass, and when you expect to be able to copy the data,
            you should override this method in your derived class when it has some fields that are object references.
            Your override method should first call <c>base.Clone()</c> to get the newly copied object.
            The result should be the object you return,
            after performing any other deeper copying of referenced objects that you deem necessary,
            and after removing references that should not be shared (such as to cached data structures).
            </para>
            <para>
            The standard implementation of this method is to do a shallow copy, by <c>Object.MemberwiseClone()</c>,
            and reinitialize the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.FromKeys"/>, <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.ToKeys"/>, and <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.MemberKeys"/> properties.
            You do not need to override this method if you have only added some fields/properties
            that are values or are references to intentionally shared objects.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.OnPropertyChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.Model.GraphModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Call this method from property setters to raise the <see cref="E:Northwoods.GoXam.Model.GraphModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="pname">the property name</param>
            <param name="oldval">the value before the property was set</param>
            <param name="newval">the new value</param>
            <remarks>
            Only call this method when the property value actually changes.
            The <paramref name="oldval"/> and <paramref name="newval"/> values are needed
            to support undo/redo.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ToString">
            <summary>
            For debugging, use the <see cref="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key"/> property as this object's default text rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This method implements the <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interface,
            used to perform state changes for undo and redo.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            Unless you override this method to explicitly handle each property that you define,
            this implementation uses reflection to set the property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.MakeXElement(System.Xml.Linq.XName)">
            <summary>
            Constructs a Linq for XML <c>XElement</c> holding the data of this node.
            </summary>
            <param name="n">the name of the new <c>XElement</c></param>
            <returns>an initialized <c>XElement</c></returns>
            <remarks>
            <para>
            This constructs a new <c>XElement</c> and adds an <c>XAttribute</c> for each simple property
            that has a value different from its default value.
            For each property that is a collection, it adds an <c>XElement</c> with nested item elements.
            This does not add an element if the collection is empty.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ConvertNodeKeyToString(`0)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual XElement MakeXElement(XName n) {
              XElement e = new XElement(n);
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("Key", this.Key, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Category", this.Category, ""));
              e.Add(XHelper.Elements&lt;NodeKey&gt;("FromKeys", "Key", this.FromKeys, ConvertNodeKeyToString));
              e.Add(XHelper.Elements&lt;NodeKey&gt;("ToKeys", "Key", this.ToKeys, ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("IsSubGraph", this.IsSubGraph, false));
              e.Add(XHelper.Attribute("IsSubGraphExpanded", this.IsSubGraphExpanded, true));
              e.Add(XHelper.Attribute("WasSubGraphExpanded", this.WasSubGraphExpanded, false));
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("SubGraphKey", this.SubGraphKey, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Elements&lt;NodeKey&gt;("MemberKeys", "Key", this.MemberKeys, ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Location", this.Location, new Point(Double.NaN, Double.NaN)));
              e.Add(XHelper.Attribute("Text", this.Text, ""));
              return e;
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)">
            <summary>
            Initialize this node data with data held in a Linq for XML <c>XElement</c>.
            </summary>
            <param name="e">the <c>XElement</c></param>
            <remarks>
            <para>
            This sets this node data's properties by reading the data from attributes and nested elements
            of the given <c>XElement</c>.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ConvertStringToNodeKey(System.String)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual void LoadFromXElement(XElement e) {
              this.Key = XHelper.Read&lt;NodeKey&gt;("Key", e, default(NodeKey), ConvertStringToNodeKey);
              this.Category = XHelper.Read("Category", e, "");
              this.FromKeys = (IList&lt;NodeKey&gt;)XHelper.ReadElements&lt;NodeKey&gt;(e.Element("FromKeys"), "Key", new ObservableCollection&lt;NodeKey&gt;(), ConvertStringToNodeKey);
              this.ToKeys = (IList&lt;NodeKey&gt;)XHelper.ReadElements&lt;NodeKey&gt;(e.Element("ToKeys"), "Key", new ObservableCollection&lt;NodeKey&gt;(), ConvertStringToNodeKey);
              this.IsSubGraph = XHelper.Read("IsSubGraph", e, false);
              this.IsSubGraphExpanded = XHelper.Read("IsSubGraphExpanded", e, true);
              this.WasSubGraphExpanded = XHelper.Read("WasSubGraphExpanded", e, false);
              this.SubGraphKey = XHelper.Read&lt;NodeKey&gt;("SubGraphKey", e, default(NodeKey), ConvertStringToNodeKey);
              this.MemberKeys = (IList&lt;NodeKey&gt;)XHelper.ReadElements&lt;NodeKey&gt;(e.Element("MemberKeys"), "Key", new ObservableCollection&lt;NodeKey&gt;(), ConvertStringToNodeKey);
              this.Location = XHelper.Read("Location", e, new Point(Double.NaN, Double.NaN));
              this.Text = XHelper.Read("Text", e, "");
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ConvertNodeKeyToString(`0)">
            <summary>
            Convert a <typeparamref name="NodeKey"/> key value to a string.
            </summary>
            <param name="key"></param>
            <returns>a String from which <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ConvertStringToNodeKey(System.String)"/> can recover the original key value</returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModelNodeData`1.ConvertStringToNodeKey(System.String)">
            <summary>
            Convert a string to a <typeparamref name="NodeKey"/> key value.
            </summary>
            <param name="s"></param>
            <returns>a <typeparamref name="NodeKey"/></returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.GraphModelNodeData`1.PropertyChanged">
            <summary>
            This event implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface,
            so that both the model and the dependency object system can be informed
            of changes to property values.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Key">
            <summary>
            Gets or sets the key property for this node data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="NodeKey"/>,
            which must be compatible with and should the same as the NodeKey type parameter
            used for the model, <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Category">
            <summary>
            Gets or sets a <c>String</c> that names the category to which the node data belongs.
            </summary>
            <value>
            <para>
            The default value is an empty string.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.FromKeys">
            <summary>
            Gets or sets the list of keys identifying nodes from which links come to this node data.
            </summary>
            <value>
            By default this is an empty <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            Usually you will not need to set this, but if you do, you may want to make sure the
            new value also implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.ToKeys">
            <summary>
            Gets or sets the list of keys identifying nodes to which links go from this node data.
            </summary>
            <value>
            By default this is an empty <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            Usually you will not need to set this, but if you do, you may want to make sure the
            new value also implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.IsSubGraph">
            <summary>
            Gets or sets whether this node data represents a group or "subgraph"
            instead of a normal "atomic" node.
            </summary>
            <value>
            By default this is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.SubGraphKey">
            <summary>
            Gets or sets a reference to the containing subgraph node, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.MemberKeys">
            <summary>
            Gets or sets a list of references to member nodes.
            </summary>
            <value>
            By default this is an empty <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.IsSubGraphExpanded">
            <summary>
            Gets or sets whether this node is in the "expanded" state.
            </summary>
            <value>
            By default this is true.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.WasSubGraphExpanded">
            <summary>
            Gets or sets whether this node had been "expanded" when its containing group was "collapsed".
            </summary>
            <value>
            By default this is true.  This is meaningful only when the container subgraph is not expanded.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Location">
            <summary>
            Gets or sets a <c>Point</c> that is the location of the node in model coordinates.
            </summary>
            <value>
            The default value is (NaN, NaN).
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModelNodeData`1.Text">
            <summary>
            Gets or sets a <c>String</c> that is associated with the node.
            </summary>
            <value>
            The default value is an empty string.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphLinksModelNodeData`1">
             <summary>
             A simple representation of node data for <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
             that supports property change notification, copying, and undo
             via the <c>INotifyPropertyChanged</c>, <c>ICloneable</c>, and <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interfaces.
             </summary>
             <typeparam name="NodeKey">the Type of a value uniquely identifying a node data in the model</typeparam>
             <remarks>
             <para>
             This provides a standard implementation of
             <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
             data that represents nodes with support for subgraphs,
             including properties for specifying the containing subgraph node key
             and/or the collection of member node keys.
             You can use this class if you do not already have your own application class
             holding information about nodes and if you want to inherit from an existing
             class so that you can just add your own properties.  Here's a simple example:
             </para>
             <para>
             <code>
              [Serializable]
              public class MyData : GraphLinksModelNodeData&lt;String&gt; {
                public MyData() { }
            
                public String Color {
                  get { return _Color; }
                  set { if (_Color != value) { String old = _Color; _Color = value; RaisePropertyChanged("Color", old, value); } }
                }
                private String _Color = "White";
            
                public String Name {
                  get { return _Name; }
                  set { if (_Name != value) { String old = _Name; _Name = value; RaisePropertyChanged("Name", old, value); } }
                }
                private String _Name;
            
                public String Address {
                  get { return _Address; }
                  set { if (_Address != value) { String old = _Address; _Address = value; RaisePropertyChanged("Address", old, value); } }
                }
                private String _Address;
              }
             </code>
             Then you can bind to these data properties in the <c>DataTemplate</c> for your nodes:
             <code>
             &lt;DataTemplate x:Key="NodeTemplate"&gt;
               &lt;Border BorderBrush="Black" BorderThickness="1" CornerRadius="5" Padding="5"
                       Background="{Binding Path=Data.Color, Converter={StaticResource theColorConverter}}"
                       go:Node.Location="{Binding Path=Data.Location, Mode=TwoWay}"&gt;
                 &lt;StackPanel&gt;
                   &lt;TextBlock Text="{Binding Path=Data.Name}" HorizontalAlignment="Left" /&gt;
                   &lt;TextBlock Text="{Binding Path=Data.Address}" HorizontalAlignment="Left" /&gt;
                 &lt;/StackPanel&gt;
               &lt;/Border&gt;
             &lt;/DataTemplate&gt;
             </code>
             </para>
             <para>
             Note that property setters need to raise the model's Changed event,
             so that the model knows about changes in the data and can then update the diagram.
             You should call <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)"/> only when the value has actually changed,
             and you should pass both the previous and the new values, in order to support undo/redo.
             </para>
             <para>
             For both Silverlight and WPF you should override the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Clone"/> method
             if the fields contain data that should not be shared between copies.
             For WPF the properties that you define should also be serializable,
             in order for the data to be copiable, especially to and from the clipboard.
             </para>
             <para>
             If you add properties to this node data class, and if you are using the
             <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
             <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> methods,
             you should override the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/> and <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>
             methods to add new attributes and/or elements as needed,
             </para>
             <para>
             Normally, each <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key"/> should have a unique value within the model.
             You can maintain that yourself, by setting the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key"/> to unique values
             before adding the node data to the model's collection of nodes.
             Or you can ensure this by overriding the
             <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.MakeNodeKeyUnique(`0)"/>
             method.  The override (or the setting of the same-named delegate in
             <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.Delegates"/>)
             is required if nodes might be copied within the model.
             </para>
             <para>
             If you want each node to keep a "reference" to the containing ("parent") group,
             you can use the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.SubGraphKey"/> property.
             If you want subgraph data to keep a list of "references" to the contained
             ("children") nodes, you can use the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MemberKeys"/> property.
             You can use both properties at the same time.
             </para>
             <para>
             This class is not useful with <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/> or <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>.
             </para>
             </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.#ctor">
            <summary>
            The default constructor produces an empty object.
            </summary>
            <remarks>
            If the <i>NodeKey</i> is <c>Guid</c>, this automatically assigns the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key"/> to be a new <c>Guid</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.#ctor(`0)">
            <summary>
            This constructor also initializes the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key"/> property.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            When you add your own state in a subclass, and when you expect to be able to copy the data,
            you should override this method in your derived class when it has some fields that are object references.
            Your override method should first call <c>base.Clone()</c> to get the newly copied object.
            The result should be the object you return,
            after performing any other deeper copying of referenced objects that you deem necessary,
            and after removing references that should not be shared (such as to cached data structures).
            </para>
            <para>
            The standard implementation of this method is to do a shallow copy, by <c>Object.MemberwiseClone()</c>,
            and reinitialize the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.SubGraphKey"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MemberKeys"/> properties.
            You do not need to override this method if you have only added some fields/properties
            that are values or are references to intentionally shared objects.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.OnPropertyChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Call this method from property setters to raise the <see cref="E:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.PropertyChanged"/> event.
            </summary>
            <param name="pname">the property name</param>
            <param name="oldval">the value before the property was set</param>
            <param name="newval">the new value</param>
            <remarks>
            Only call this method when the property value actually changes.
            The <paramref name="oldval"/> and <paramref name="newval"/> values are needed
            to support undo/redo.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ToString">
            <summary>
            For debugging, use the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key"/> property as this object's default text rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This method implements the <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interface,
            used to perform state changes for undo and redo.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            Unless you override this method to explicitly handle each property that you define,
            this implementation uses reflection to set the property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MakeXElement(System.Xml.Linq.XName)">
            <summary>
            Constructs a Linq for XML <c>XElement</c> holding the data of this node.
            </summary>
            <param name="n">the name of the new <c>XElement</c></param>
            <returns>an initialized <c>XElement</c></returns>
            <remarks>
            <para>
            This constructs a new <c>XElement</c> and adds an <c>XAttribute</c> for each simple property
            that has a value different from its default value.
            For each property that is a collection, it adds an <c>XElement</c> with nested item elements.
            This does not add an element if the collection is empty.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ConvertNodeKeyToString(`0)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual XElement MakeXElement(XName n) {
              XElement e = new XElement(n);
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("Key", this.Key, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Category", this.Category, ""));
              e.Add(XHelper.Attribute("IsLinkLabel", this.IsLinkLabel, false));
              e.Add(XHelper.Attribute("IsSubGraph", this.IsSubGraph, false));
              e.Add(XHelper.Attribute("IsSubGraphExpanded", this.IsSubGraphExpanded, true));
              e.Add(XHelper.Attribute("WasSubGraphExpanded", this.WasSubGraphExpanded, false));
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("SubGraphKey", this.SubGraphKey, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Elements&lt;NodeKey&gt;("MemberKeys", "Key", this.MemberKeys, ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Location", this.Location, new Point(Double.NaN, Double.NaN)));
              e.Add(XHelper.Attribute("Text", this.Text, ""));
              return e;
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)">
            <summary>
            Initialize this node data with data held in a Linq for XML <c>XElement</c>.
            </summary>
            <param name="e">the <c>XElement</c></param>
            <remarks>
            <para>
            This sets this node data's properties by reading the data from attributes and nested elements
            of the given <c>XElement</c>.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ConvertStringToNodeKey(System.String)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual void LoadFromXElement(XElement e) {
              this.Key = XHelper.Read&lt;NodeKey&gt;("Key", e, default(NodeKey), ConvertStringToNodeKey);
              this.Category = XHelper.Read("Category", e, "");
              this.IsLinkLabel = XHelper.Read("IsLinkLabel", e, false);
              this.IsSubGraph = XHelper.Read("IsSubGraph", e, false);
              this.IsSubGraphExpanded = XHelper.Read("IsSubGraphExpanded", e, true);
              this.WasSubGraphExpanded = XHelper.Read("WasSubGraphExpanded", e, false);
              this.SubGraphKey = XHelper.Read&lt;NodeKey&gt;("SubGraphKey", e, default(NodeKey), ConvertStringToNodeKey);
              this.MemberKeys = (IList&lt;NodeKey&gt;)XHelper.ReadElements&lt;NodeKey&gt;(e.Element("MemberKeys"), "Key", new ObservableCollection&lt;NodeKey&gt;(), ConvertStringToNodeKey);
              this.Location = XHelper.Read("Location", e, new Point(Double.NaN, Double.NaN));
              this.Text = XHelper.Read("Text", e, "");
            }
            </code>
            </para>
            <para>
            If you add properties to this node data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MakeXElement(System.Xml.Linq.XName)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ConvertNodeKeyToString(`0)">
            <summary>
            Convert a <typeparamref name="NodeKey"/> key value to a string.
            </summary>
            <param name="key"></param>
            <returns>a String from which <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ConvertStringToNodeKey(System.String)"/> can recover the original key value</returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.ConvertStringToNodeKey(System.String)">
            <summary>
            Convert a string to a <typeparamref name="NodeKey"/> key value.
            </summary>
            <param name="s"></param>
            <returns>a <typeparamref name="NodeKey"/></returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, Double,
            DateTime, TimeSpan, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.PropertyChanged">
            <summary>
            This event implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface,
            so that both the model and the dependency object system can be informed
            of changes to property values.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Key">
            <summary>
            Gets or sets the key property for this node data.
            </summary>
            <value>
            The type is the parameterized type <typeparamref name="NodeKey"/>,
            which must be compatible with and should the same as the NodeKey type parameter
            used for the model, <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Category">
            <summary>
            Gets or sets a <c>String</c> that names the category to which the node data belongs.
            </summary>
            <value>
            <para>
            The default value is an empty string.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.IsLinkLabel">
            <summary>
            Gets or sets whether this node data represents a "label" on a link instead of a simple node.
            </summary>
            <value>
            By default this is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.IsSubGraph">
            <summary>
            Gets or sets whether this node data represents a group or "subgraph"
            instead of a normal "atomic" node.
            </summary>
            <value>
            By default this is false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.SubGraphKey">
            <summary>
            Gets or sets a reference to the containing subgraph node, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.MemberKeys">
            <summary>
            Gets or sets a list of references to member nodes.
            </summary>
            <value>
            By default this is an empty <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.IsSubGraphExpanded">
            <summary>
            Gets or sets whether this node is in the "expanded" state.
            </summary>
            <value>
            By default this is true.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.WasSubGraphExpanded">
            <summary>
            Gets or sets whether this node had been "expanded" when its containing group was "collapsed".
            </summary>
            <value>
            By default this is false.  This is meaningful only when the container subgraph is not expanded.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Location">
            <summary>
            Gets or sets a <c>Point</c> that is the location of the node in model coordinates.
            </summary>
            <value>
            The default value is (NaN, NaN).
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.Text">
            <summary>
            Gets or sets a <c>String</c> that is associated with the node.
            </summary>
            <value>
            The default value is an empty string.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2">
            <summary>
            A simple representation of link data
            that supports property change notification, copying, and undo
            via the <c>INotifyPropertyChanged</c>, <c>ICloneable</c>, and <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interfaces.
            </summary>
            <typeparam name="NodeKey">the Type of a value uniquely identifying a node data in the model</typeparam>
            <typeparam name="PortKey">the Type of an optional value that helps distinguish different "ports" on a node</typeparam>
            <remarks>
            <para>
            This provides a standard implementation of
            <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
            data that represents links,
            including properties that are "references" to the two nodes at each end
            of the link and optional "port" parameter information at both ends.
            You can use this class if you do not already have your own application class
            holding information about links and if you want to inherit from an existing
            class so that you can just add your own properties.  Here's a simple example:
            </para>
            <para>
            <code>
             [Serializable]
             public class MyLinkData : GraphLinksModelLinkData&lt;String, String&gt; {
               public double Cost {
                 get { return _Cost; }
                 set { if (_Cost != value) { double old = _Cost; _Cost = value; RaisePropertyChanged("Cost", old, value); } }
               }
               private double _Cost;
             }
            </code>
            This associates a number with each link so that you can bind values to this property in a <c>DataTemplate</c>.
            For example, look at the <c>TextBlock</c>'s binding of <c>Text</c> in this template:
            <code>
            &lt;DataTemplate x:Key="LinkTemplate"&gt;
              &lt;go:LinkPanel go:Part.SelectionElementName="Path" go:Part.SelectionAdorned="True"&gt;
                &lt;go:LinkShape x:Name="Path" go:LinkPanel.IsLinkShape="True" Stroke="Black" StrokeThickness="1" /&gt;
                &lt;Path Fill="Black" go:LinkPanel.ToArrow="Standard" /&gt;
                &lt;TextBlock Text="{Binding Path=Data.Cost}" /&gt;
              &lt;/go:LinkPanel&gt;
            &lt;/DataTemplate&gt;
            </code>
            (In Silverlight, replace the <c>go:LinkShape</c> with <c>Path</c>.)
            </para>
            <para>
            Note that property setters need to raise the model's Changed event,
            so that the model knows about changes in the data and can then update the diagram.
            You should call <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.RaisePropertyChanged(System.String,System.Object,System.Object)"/> only when the value has actually changed,
            and you should pass both the previous and the new values, in order to support undo/redo.
            </para>
            <para>
            For WPF the properties that you define should also be serializable,
            in order for the data to be copiable, especially to and from the clipboard.
            For both Silverlight and WPF you should override the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Clone"/> method.
            </para>
            <para>
            In the sample above,
            the <typeparamref name="NodeKey"/> is declared to be a string,
            which is used as the way to uniquely refer to node data.
            The <typeparamref name="PortKey"/> is declared to be a string,
            which is useful if you want to distinguish between multiple "ports" on a single node.
            However, if your nodes only have a single port, you can ignore the port
            parameter information, and the <typeparamref name="PortKey"/> type does not really matter,
            although <c>string</c> is recommended for compatibility with the implementation of <see cref="T:Northwoods.GoXam.Node"/>
            methods that deal with ports.
            </para>
            <para>
            This class is not useful with <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/> or <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.#ctor">
            <summary>
            The default constructor produces an empty object with no references to nodes.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.#ctor(`0,`0)">
            <summary>
            This constructor initializes the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/> properties.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.#ctor(`0,`1,`0,`1)">
            <summary>
            This constructor initializes the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/> properties.
            </summary>
            <param name="from">a node key identifying the node data from which the link comes</param>
            <param name="fromport">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="to">a node key identify the node data to which the link goes</param>
            <param name="toport">an optional value identifying which port on the "to" node the link is connected to</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Clone">
            <summary>
            Create a copy of this data; this implements the <c>ICloneable</c> interface.
            </summary>
            <returns></returns>
            <remarks>
            When you add your own state in a subclass, and when you expect to be able to copy the data,
            you must override this method and make sure the additional state is copied to the
            newly cloned object returned by calling the base method.
            This reinitializes the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/> properties.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.OnPropertyChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Call this method from property setters to raise the <see cref="E:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.PropertyChanged"/> event.
            </summary>
            <param name="pname">the property name</param>
            <param name="oldval">the value before the property was set</param>
            <param name="newval">the new value</param>
            <remarks>
            Only call this method when the property value actually changes.
            The <paramref name="oldval"/> and <paramref name="newval"/> values are needed
            to support undo/redo.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ToString">
            <summary>
            For debugging, use the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/> properties
            as this object's default text rendering.
            </summary>
            <returns>a String like "Node1 --&gt; Node2"</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This method implements the <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/> interface,
            used to perform state changes for undo and redo.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
            <remarks>
            Unless you override this method to explicitly handle each property that you define,
            this implementation uses reflection to set the property.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.MakeXElement(System.Xml.Linq.XName)">
            <summary>
            Constructs a Linq for XML <c>XElement</c> holding the data of this link.
            </summary>
            <param name="n">the name of the new <c>XElement</c></param>
            <returns>an initialized <c>XElement</c></returns>
            <remarks>
            <para>
            This constructs a new <c>XElement</c> and adds an <c>XAttribute</c> for each simple property
            that has a value different from its default value.
            For each property that is a collection, it adds an <c>XElement</c> with nested item elements.
            This does not add an element if the collection is empty.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertNodeKeyToString(`0)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual XElement MakeXElement(XName n) {
              XElement e = new XElement(n);
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("From", this.From, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("To", this.To, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute&lt;PortKey&gt;("FromPort", this.FromPort, default(PortKey), ConvertPortKeyToString));
              e.Add(XHelper.Attribute&lt;PortKey&gt;("ToPort", this.ToPort, default(PortKey), ConvertPortKeyToString));
              e.Add(XHelper.Attribute&lt;NodeKey&gt;("LabelNode", this.LabelNode, default(NodeKey), ConvertNodeKeyToString));
              e.Add(XHelper.Attribute("Category", this.Category, ""));
              e.Add(XHelper.Attribute("Text", this.Text, ""));
              e.Add(XHelper.Attribute("Points", this.Points, null));
              return e;
            }
            </code>
            </para>
            <para>
            If you add properties to this link data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.LoadFromXElement(System.Xml.Linq.XElement)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.LoadFromXElement(System.Xml.Linq.XElement)">
            <summary>
            Initialize this link data with data held in a Linq for XML <c>XElement</c>.
            </summary>
            <param name="e">the <c>XElement</c></param>
            <remarks>
            <para>
            This sets this link data's properties by reading the data from attributes and nested elements
            of the given <c>XElement</c>.
            </para>
            <para>
            Because the <typeparamref name="NodeKey"/> type might be a type for which we have an implementation
            to convert to and from strings for XML, this calls the <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertStringToNodeKey(System.String)"/> method,
            which you can override.
            </para>
            <para>
            This is implemented as:
            <code>
            public virtual void LoadFromXElement(XElement e) {
              this.From = XHelper.Read&lt;NodeKey&gt;("From", e, default(NodeKey), ConvertStringToNodeKey);
              this.To = XHelper.Read&lt;NodeKey&gt;("To", e, default(NodeKey), ConvertStringToNodeKey);
              this.FromPort = XHelper.Read&lt;PortKey&gt;("FromPort", e, default(PortKey), ConvertStringToPortKey);
              this.ToPort = XHelper.Read&lt;PortKey&gt;("ToPort", e, default(PortKey), ConvertStringToPortKey);
              this.LabelNode = XHelper.Read&lt;NodeKey&gt;("LabelNode", e, default(NodeKey), ConvertStringToNodeKey);
              this.Category = XHelper.Read("Category", e, "");
              this.Text = XHelper.Read("Text", e, "");
              this.Points = XHelper.Read("Points", e, (IEnumerable&lt;Point&gt;)null);
            }
            </code>
            </para>
            <para>
            If you add properties to this link data class, and if you are using the
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> and
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)"/> methods,
            you should override this method to add new attributes and/or elements as needed,
            and you should override <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.MakeXElement(System.Xml.Linq.XName)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertNodeKeyToString(`0)">
            <summary>
            Convert a <typeparamref name="NodeKey"/> key value to a string.
            </summary>
            <param name="key"></param>
            <returns>a String from which <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertStringToNodeKey(System.String)"/> can recover the original key value</returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertPortKeyToString(`1)">
            <summary>
            Convert a <typeparamref name="PortKey"/> key value to a string.
            </summary>
            <param name="key"></param>
            <returns>a String from which <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertStringToPortKey(System.String)"/> can recover the original key value</returns>
            <remarks>
            Currently this handles PortKey types that are String, Int32, or Guid.
            Override this method to handle additional types.
            However, the PortKey is almost always a String, so the need to override this method is rare.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertStringToNodeKey(System.String)">
            <summary>
            Convert a string to a <typeparamref name="NodeKey"/> key value.
            </summary>
            <param name="s"></param>
            <returns>a <typeparamref name="NodeKey"/></returns>
            <remarks>
            Currently this handles NodeKey types that are String, Int32, or Guid.
            Override this method to handle additional types.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ConvertStringToPortKey(System.String)">
            <summary>
            Convert a string to a <typeparamref name="PortKey"/> key value.
            </summary>
            <param name="s"></param>
            <returns>a <typeparamref name="PortKey"/></returns>
            <remarks>
            Currently this handles PortKey types that are String, Int32, or Guid.
            Override this method to handle additional types.
            However, the PortKey is almost always a String, so the need to override this method is rare.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.PropertyChanged">
            <summary>
            This event implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface,
            so that both the model and the dependency object system can be informed
            of changes to property values.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Category">
            <summary>
            Gets or sets a <c>String</c> that names the category to which the link data belongs.
            </summary>
            <value>
            <para>
            The default value is an empty string.
            </para>
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From">
            <summary>
            Gets or sets the key value of the node from which this link comes.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To">
            <summary>
            Gets or sets the key value of the node to which this link goes.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.FromPort">
            <summary>
            Gets or sets the optional parameter information for the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/> node's port.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ToPort">
            <summary>
            Gets or sets the optional parameter information for the <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/> node's port.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.LabelNode">
            <summary>
            Gets or sets the key value of the node which is on this link acting as if it were a label.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Text">
            <summary>
            Gets or sets a string that can be used for a text label on a link.
            </summary>
            <value>
            The default value is an empty string.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Points">
            <summary>
            Gets or sets a collection of <c>Point</c>s used to define the path of the link.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            Although this data property is defined for your convenience, the model does not know about this property.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.UniversalLinkData">
            <summary>
            This simple class is handy with many <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>s
            or with <see cref="T:Northwoods.GoXam.Model.UniversalGraphLinksModel"/>, so that for many cases you do not need to define
            your own link data class inheriting from <see cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/>.
            </summary>
            <remarks>
            <para>
            The node data type can be any <c>Object</c>; the (optional) port parameter information is assumed
            to be of type <c>String</c>.
            There are constructors for most of the common uses.
            </para>
            <para>
            For reasons of both compile-time type checking and run-time efficiency,
            we recommend defining your own data class derived from <see cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/>.
            Doing so also permits the addition of application-specific properties.
            </para>
            <para>
            This class is not useful with <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/> or <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalLinkData.#ctor">
            <summary>
            The default constructor produces link-representing data that needs to be initialized.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalLinkData.#ctor(System.Object,System.Object)">
            <summary>
            This constructor produces a link-representing data that connects two nodes, identified by their node data keys.
            </summary>
            <param name="fromnodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/></param>
            <param name="tonodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalLinkData.#ctor(System.Object,System.Object,System.String)">
            <summary>
            This constructor produces a link-representing data that connects two nodes,
            identified by their node data keys, and the text for a label annotation.
            </summary>
            <param name="fromnodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/></param>
            <param name="tonodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/></param>
            <param name="labeltext">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Text"/></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalLinkData.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            This constructor produces a link-representing data that connects two nodes and also provides port-identifying information at each node.
            </summary>
            <param name="fromnodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/></param>
            <param name="fromport">the initial string value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.FromPort"/></param>
            <param name="tonodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/></param>
            <param name="toport">the initial string value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ToPort"/></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalLinkData.#ctor(System.Object,System.String,System.Object,System.String,System.String)">
            <summary>
            This constructor produces a link-representing data that connects two nodes and
            also provides port-identifying information at each node and the text for a label annotation.
            </summary>
            <param name="fromnodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.From"/></param>
            <param name="fromport">the initial string value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.FromPort"/></param>
            <param name="tonodekey">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.To"/></param>
            <param name="toport">the initial string value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.ToPort"/></param>
            <param name="labeltext">the initial value for <see cref="P:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.Text"/></param>
        </member>
        <member name="T:Northwoods.GoXam.NodeShape">
            <summary>
            This <c>Shape</c> can be used in a <see cref="T:Northwoods.GoXam.NodePanel"/>
            as the background for text and/or other elements.
            </summary>
            <remarks>
            <para>
            You will need to set the <c>NodePanel.Figure</c> attached property (see cref="NodePanel.SetFigure"/&gt;)
            to give the shape a predefined geometry.
            The geometry of some figures can be customized by setting parameters
            (also <see cref="T:Northwoods.GoXam.NodePanel"/> attached properties).
            </para>
            <para>
            In addition to setting the usual properties of the <c>Shape</c> such as <c>Fill</c>,
            <c>Stroke</c>, <c>StrokeThickness</c>, et al., remember to set the <c>Width</c> and <c>Height</c>,
            unless this shape is the first child of a <see cref="T:Northwoods.GoXam.NodePanel"/> with a <see cref="P:Northwoods.GoXam.NodePanel.Sizing"/>
            other than <see cref="F:Northwoods.GoXam.NodePanelSizing.Fixed"/>, in which case the <see cref="T:Northwoods.GoXam.NodePanel"/>
            will size this shape appropriately.
            </para>
            <para>
            The <see cref="T:Northwoods.GoXam.NodePanel"/> uses the <c>NodePanel.Spot1</c> and <c>NodePanel.Spot2</c>
            attached properties to control where in the shape the text element(s) should be placed.
            </para>
            <para>
            A typical usage:
            <code>
              &lt;DataTemplate x:Key="ExampleNodeTemplate"&gt;
                &lt;go:NodePanel go:Node.Location="{Binding Path=Data.XY, Mode=TwoWay}"
                              go:Node.SelectionElementName="Shape" go:Node.Resizable="True"&gt;
                  &lt;go:NodeShape x:Name="Shape" go:NodePanel.Figure="RoundedRectangle" Width="50" Height="20"
                                Stroke="Gray" StrokeThickness="1" Fill="LightYellow" /&gt;
                  &lt;TextBlock Text="{Binding Path=Data.Name}" TextWrapping="Wrap" /&gt;
                &lt;/go:NodePanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            In WPF, you must use the <c>&lt;go:NodeShape&gt;</c> element instead of a <c>&lt;Path&gt;</c> element.
            In Silverlight, you may use either the <c>&lt;go:NodeShape&gt;</c> element or a <c>&lt;Path&gt;</c> element.
            But in Silverlight, the element must be a child of a <see cref="T:Northwoods.GoXam.NodePanel"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.NodeShape.#ctor">
            <summary>
            Construct a <see cref="T:Northwoods.GoXam.NodeShape"/> with no particular figure or size or fill or outline.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.NodeShape.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <summary>
            This override is necessary to avoid a bug in WPF.
            </summary>
            <param name="hitTestParameters"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.NodeShape.DefiningGeometry">
            <summary>
            This generates a <c>Geometry</c> based on the value of <see cref="M:Northwoods.GoXam.NodePanel.GetFigure(System.Windows.DependencyObject)"/>, and
            on the values of <see cref="M:Northwoods.GoXam.NodePanel.GetFigureParameter1(System.Windows.DependencyObject)"/> and <see cref="M:Northwoods.GoXam.NodePanel.GetFigureParameter2(System.Windows.DependencyObject)"/>,
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.NodeFigure">
            <summary>
            Predefined shapes for <c>NodeShape</c> (WPF) or <c>Path</c> inside a <see cref="T:Northwoods.GoXam.NodePanel"/>.
            </summary>
            <remarks>
            Set the <c>NodePanel.Figure</c> attached property (or call <see cref="M:Northwoods.GoXam.NodePanel.SetFigure(System.Windows.DependencyObject,Northwoods.GoXam.NodeFigure)"/>) on the shape.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.None">
            <summary>
            Used when there is no particular figure.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Line1">
            <summary>
            Represents a line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Line2">
            <summary>
            Represents a line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LineH">
            <summary>
            Represents a horizontal line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LineV">
            <summary>
            Represents a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Curve1">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Curve2">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Curve3">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Curve4">
            <summary>
            Represents a curve.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Triangle">
            <summary>
            Represents a three-sided figure (a triangle). This is the same shape
            represented by NodeFigure.Alternative and NodeFigure.Merge.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TriangleRight">
            <summary>
            Represents a three-sided figure (a triangle) pointing towards the right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TriangleDown">
            <summary>
            Represents a three-sided figure (a triangle) pointing downwards.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TriangleLeft">
            <summary>
            Represents a three-sided figure (a triangle) pointing towards the left.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TriangleUp">
            <summary>
            Represents a three-sided figure (a triangle) pointing upwards.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Diamond">
            <summary>
            Represents a four-sided figure (a diamond). This is the same shape
            represented by NodeFigure.Decision.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Pentagon">
            <summary>
            Represents a five-sided figure (a pentagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Hexagon">
            <summary>
            Represents a six-sided figure (a hexagon). This is the same shape
            represented by NodeFigure.DataTransmission.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Heptagon">
            <summary>
            Represents a seven-sided figure (a heptagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Octagon">
            <summary>
            Represents an eight-sided figure (an octagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Nonagon">
            <summary>
            Represents a nine-sided figure (a nonagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Decagon">
            <summary>
            Represents a ten-sided figure (a decagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Dodecagon">
            <summary>
            Represents a twelve-sided figure (a dodecagon).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.FivePointedStar">
            <summary>
            Represents a five-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SixPointedStar">
            <summary>
            Represents a six-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SevenPointedStar">
            <summary>
            Represents a seven-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.EightPointedStar">
            <summary>
            Represents an eight-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.NinePointedStar">
            <summary>
            Represents a nine-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TenPointedStar">
            <summary>
            Represents a ten-pointed star.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.FivePointedBurst">
            <summary>
            Represents a five-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SixPointedBurst">
            <summary>
            Represents a six-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SevenPointedBurst">
            <summary>
            Represents a seven-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.EightPointedBurst">
            <summary>
            Represents an eight-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.NinePointedBurst">
            <summary>
            Represents a nine-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TenPointedBurst">
            <summary>
            Represents a ten-pointed burst.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cloud">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Crescent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Ellipse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.FramedRectangle">
            <summary>
            Represents a shape containing a rectangle within another regtangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.HalfEllipse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Heart">
            <summary>
            Represents a shape resembling a heart.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Spade">
            <summary>
            Represents a shape resembling a spade.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Club">
            <summary>
            Represents a shape resembling a club.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.HourGlass">
            <summary>
            Represents an hour glass shape.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Lightning">
            <summary>
            Represents a shape resembling a bolt of lightning.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Parallelogram1">
            <summary>
            Represents a four-sided figure containing two acute opposite angles,
            and two obtuse opposite angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Parallelogram2">
            <summary>
            Represents a four-sided figure containing two acute opposite angles,
            and two obtuse opposite angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Rectangle">
            <summary>
            Represents a four-sided figure containing four ninety degree angles.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.RightTriangle">
            <summary>
            Represents a three-sided figure containing one ninety degree angle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.RoundedIBeam">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.RoundedRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Square">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SquareIBeam">
            <summary>
            Represents a figure in the shape of an 'I'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ThickCross">
            <summary>
            Represents a figure in the shape of a '+'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ThickX">
            <summary>
            Represents a figure in the shape of a 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ThinCross">
            <summary>
            Represents a figure in the shape of a '+'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ThinX">
            <summary>
            Represents a figure in the shape of a 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Trapezoid">
            <summary>
            Represents a four-sided figure containing two acute adjacent angles,
            and two obtuse adjacent angles. This is the same shape represented by
            NodeFigure.ManualLoop and NodeFigure.ManualOperation
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.YinYang">
            <summary>
            Represents the Yin-Yang symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Peace">
            <summary>
            Represents the universal peace symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.NotAllowed">
            <summary>
            Represents a figure used to mean "Not Allowed." In the shape of a circle with a line through.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Fragile">
            <summary>
            Represents a figure used to mean "Fragile." In the shape of a broken glass.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.GenderMale">
            <summary>
            Represents the male gender in biology. In the shape of the astronomical Mars symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.GenderFemale">
            <summary>
            Represents the female gender in biology. In the shape of the astronomical Venus symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.PlusLine">
            <summary>
            Represents the "+" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.XLine">
            <summary>
            Represents an "X" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.AsteriskLine">
            <summary>
            Represents the "*" symbol using unfilled lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.CircleLine">
            <summary>
            Represents an unfilled circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Pie">
            <summary>
            Represents a Pie with a piece taken out.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.PiePiece">
            <summary>
            Represents a piece of a pie.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.StopSign">
            <summary>
            Represents an octagonal Stop Sign.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicImplies">
            <summary>
            Logical symbol, represented by an arrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicIff">
            <summary>
            Logical symbol for If and Only If, represented by a double-headed arrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicNot">
            <summary>
            Logical symbol for Not or Negation, represented by a horizontal line with a small vertical bar at the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicAnd">
            <summary>
            Logical symbol for And, represented by a vertically flipped "V".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicOr">
            <summary>
            Logical symbol for Or, represented by a "V".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicXor">
            <summary>
            Logical symbol for Exclusive Or, represented by a circle with a "+" inscribed inside.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicTruth">
            <summary>
            Logical symbol for an unconditional Truth, represented by a "T".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicFalsity">
            <summary>
            Logical symbol for an unconditional Falsity, represented by a vertically flipped "T".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicThereExists">
            <summary>
            Logical symbol for existential quantification, represented by a horizontally flipped "E".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicForAll">
            <summary>
            Logical symbol for universal quantification, represented by a vertically flipped "A".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicIsDefinedAs">
            <summary>
            Logical symbol for Definition, represented by three horizontal bars.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicIntersect">
            <summary>
            Logical symbol for Intersection, represented by a vertically flipped "U".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LogicUnion">
            <summary>
            Logical symbol for Union, represented by a "U".
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Arrow">
            <summary>
            Represents a basic arrow shape with a square end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Chevron">
            <summary>
            A chevron type arrow. This is the same shape represented by
            NodeFigure.ISOProcess.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DoubleArrow">
            <summary>
            Represents a shape consisting of two arrows.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DoubleEndArrow">
            <summary>
            Represents an arrow with directional points on each end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.IBeamArrow">
            <summary>
            Represents an arrow with an I-Beam end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.RoundedPointer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SplitEndArrow">
            <summary>
            Represents an arrow with a triangle shaped split at the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SquareArrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cone1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cone2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cube1">
            <summary>
            A two dimensional representation of a cube.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cube2">
            <summary>
            A two dimensional representation of a cube.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cylinder1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cylinder2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cylinder3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Cylinder4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Prism1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Prism2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Pyramid1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Pyramid2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Actor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Alternative">
            <summary>
            Flowchart 'alternative' symbol. This is the same shape represented by
            NodeFigure.Triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Card">
            <summary>
            Flowchart 'card' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Collate">
            <summary>
            Flowchart 'collate' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Connector">
            <summary>
            Flowchart 'connector' symbol. This is the same shape represented by
            NodeFigure.Ellipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.CreateRequest">
            <summary>
            Flowchart 'create request' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Database">
            <summary>
            Flowchart 'database' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DataStorage">
            <summary>
            Flowchart 'data storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DataTransmission">
            <summary>
            Flowchart 'data transmission' symbol. This is the same shape
            represented by NodeFigure.Hexagon.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Decision">
            <summary>
            Flowchart 'decision' symbol. This is the same shape represented by
            NodeFigure.Diamond.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Delay">
            <summary>
            Flowchart 'delay' symbol. This is the same shape represented by
            NodeFigure.HalfEllipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DirectData">
            <summary>
            Flowchart 'direct data' symbol. This is the same shape represented by
            NodeFigure.Cylinder4.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DiskStorage">
            <summary>
            Flowchart 'disk storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Display">
            <summary>
            Flowchart 'display' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DividedEvent">
            <summary>
            Flowchart 'divided event' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DividedProcess">
            <summary>
            Flowchart 'divided process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Document">
            <summary>
            Flowchart 'document' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ExternalOrganization">
            <summary>
            Flowchart 'external organization' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ExternalProcess">
            <summary>
            Flowchart 'external process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.File">
            <summary>
            Flowchart 'file' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Gate">
            <summary>
            Flowchart 'gate' symbol. This is the same shape represented by
            NodeFigure.Crescent.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Input">
            <summary>
            Flowchart 'input' symbol. This is the same shape represented by
            NodeFigure.Parallelogram1.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Interupt">
            <summary>
            Flowchart 'interupt' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.InternalStorage">
            <summary>
            Flowchart 'internal storage' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ISOProcess">
            <summary>
            Flowchart 'ISO Process' symbol. This is the same shape represented by
            NodeFigure.Chevron
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Junction">
            <summary>
            Flowchart 'junction' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LinedDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.LoopLimit">
            <summary>
            Flowchart 'loop limit' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MagneticData">
            <summary>
            Flowchart 'magnetic data' symbol. This is the same shape represented by
            NodeFigure.Cylinder1.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MagneticTape">
            <summary>
            Flowchart 'magetic tape' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ManualInput">
            <summary>
            Flowchart 'manual input' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ManualLoop">
            <summary>
            Flowchart 'manual loop' symbol. This is the same shape represented by
            NodeFigure.Trapezoid.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ManualOperation">
            <summary>
            Flowchart 'manual operation' symbol. This is the same shape represented
            by NodeFigure.Trapezoid and NodeFigure.ManualInput.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Merge">
            <summary>
            Flowchart 'merge' symbol. This is the same shape represented by
            NodeFigure.Triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MessageFromUser">
            <summary>
            Flowchart 'message from user' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MessageToUser">
            <summary>
            Flowchart 'message to user' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MicroformProcessing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MicroformRecording">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MultiDocument">
            <summary>
            Flowchart 'multiple document' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.MultiProcess">
            <summary>
            Flowchart 'multiple process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.OfflineStorage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.OffPageConnector">
            <summary>
            Flowchart 'off page connector' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Or">
            <summary>
            Flowchart 'or' symbol
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Output">
            <summary>
            Flowchart 'output' symbol. This is the same shape represented by
            NodeFigure.Parallelogram1.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.PaperTape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.PrimitiveFromCall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.PrimitiveToCall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Procedure">
            <summary>
            Flowchart 'procedure' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Process">
            <summary>
            Flowchart 'process' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.SequentialData">
            <summary>
            Flowchart 'sequential data' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Sort">
            <summary>
            Flowchart 'sort' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Start">
            <summary>
            Flowchart 'start' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.StoredData">
            <summary>
            Flowchart 'stored data' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Subroutine">
            <summary>
            Flowchart 'subroutine' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Terminator">
            <summary>
            Flowchart 'terminator' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.TransmittalTape">
            <summary>
            Flowchart 'transmittal tape' symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.AndGate">
            <summary>
            Represents an and gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Buffer">
            <summary>
            Represents a buffer logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Clock">
            <summary>
            Represents a system clock.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Ground">
            <summary>
            Represents ground.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Inverter">
            <summary>
            Represents an inverter logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.NandGate">
            <summary>
            Represents a nand gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.NorGate">
            <summary>
            Represents a nor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.OrGate">
            <summary>
            Represents an or gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.XnorGate">
            <summary>
            Represents an xnor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.XorGate">
            <summary>
            Represents an xor gate logic circuit.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Capacitor">
            <summary>
            Represents a capacitor.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Resistor">
            <summary>
            Represents a resistor.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Inductor">
            <summary>
            Represents an inductor.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ACvoltageSource">
            <summary>
            Represents an AC voltage source.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.DCvoltageSource">
            <summary>
            Represents a DC voltage source.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Diode">
            <summary>
            Represents a diode.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Wifi">
            <summary>
            Represents a wifi symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Email">
            <summary>
            Represents an email symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Ethernet">
            <summary>
            Represents an ethernet jack symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Power">
            <summary>
            Represents the power symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.Fallout">
            <summary>
            Represents the Fallout Shelter symbol.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.IrritationHazard">
            <summary>
            Represents the Irritation Hazard symbol, in the shape of an 'X'.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.ElectricalHazard">
            <summary>
            Represents an Electrical Hazard symbol, in the shape of a lightning bolt.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.FireHazard">
            <summary>
            Represents a Fire Hazard symbol, in the shape of a fire.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnActivityLoop">
            <summary>
            BPMN Symbol for Activity loop marker
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnActivityParallel">
            <summary>
            BPMN Symbol for Activity Parallel Multi-Instance marker
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnActivitySequential">
            <summary>
            BPMN Symbol for Activity Sequential Multi-Instance marker
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnActivityAdHoc">
            <summary>
            BPMN Symbol for Activity Ad Hoc marker
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnActivityCompensation">
            <summary>
            BPMN Symbol for Activity Compensation marker (also use for Compensation Event)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnTaskMessage">
            <summary>
            BPMN Symbol for Task Type Send/Receive
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnTaskScript">
            <summary>
            BPMN Symbol for Task Type Script
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnTaskUser">
            <summary>
            BPMN Symbol for Task Type User
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnEventConditional">
            <summary>
            BPMN Symbol for Event Type Condition
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnEventError">
            <summary>
            BPMN Symbol for Event Type Error
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnEventEscalation">
            <summary>
            BPMN Symbol for Event Type Escalation
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.NodeFigure.BpmnEventTimer">
            <summary>
            BPMN Symbol for Event Type Timer
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Overview">
            <summary>
            The <c>Overview</c> control is a <see cref="T:Northwoods.GoXam.Diagram"/> that tries to
            display all of the model shown by a different <see cref="T:Northwoods.GoXam.Diagram"/>,
            with a rectangular box showing the viewport displayed by that other diagram.
            </summary>
            <remarks>
            The Overview shows the nodes and links from the <see cref="P:Northwoods.GoXam.Diagram.Model"/>
            of the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>.
            You should set the <see cref="P:Northwoods.GoXam.Overview.Observed"/> property after both the Overview
            and the Diagram have been initialized:
            <code>
              this.Loaded += (s,e) =&gt; { myOverview.Observed = myDiagram; };
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Overview.#ctor">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Overview"/> control -- you need to set its
            <see cref="P:Northwoods.GoXam.Overview.Observed"/> property to refer to a different <see cref="T:Northwoods.GoXam.Diagram"/>
            before it becomes useful.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.ObservedProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.Observed"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.UsesObservedTemplatesProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.UsesObservedTemplates"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.UsesObservedNodeLocationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.UsesObservedNodeLocation"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.UsesObservedLinkRouteProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.UsesObservedLinkRoute"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.UsesObservedPartVisibleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.UsesObservedPartVisible"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Overview.BoxTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Overview.BoxTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Overview.CreateBox">
            <summary>
            Create the <see cref="P:Northwoods.GoXam.Overview.Box"/> using the <see cref="P:Northwoods.GoXam.Overview.BoxTemplate"/> data template.
            </summary>
            <returns></returns>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Overview.BoxTemplate"/> is null, this uses a default template.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Overview.OnApplyTemplate">
            <summary>
            Make sure the <see cref="T:Northwoods.GoXam.Overview"/> is bound to the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Overview.Observed">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this <see cref="T:Northwoods.GoXam.Overview"/> is
            displaying a model and showing its viewport into that model.
            </summary>
            <value>
            This is initially null.
            Any new value must not be an <see cref="T:Northwoods.GoXam.Overview"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Overview.UsesObservedTemplates">
            <summary>
            Gets or sets whether this <see cref="T:Northwoods.GoXam.Overview"/> uses the <c>DataTemplates</c>
            used by the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Overview.UsesObservedNodeLocation">
            <summary>
            Gets or sets whether this <see cref="T:Northwoods.GoXam.Overview"/> uses the <see cref="P:Northwoods.GoXam.Node.Location"/>
            of each <see cref="T:Northwoods.GoXam.Node"/> in the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>
            to position the nodes in this overview.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            When this property is true, the <see cref="T:Northwoods.GoXam.Overview"/> uses a special <see cref="T:Northwoods.GoXam.LayoutManager"/>,
            because the position of each node is determined by the position of the corresponding node in
            the <see cref="P:Northwoods.GoXam.Overview.Observed"/> diagram.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Overview.UsesObservedLinkRoute">
            <summary>
            Gets or sets whether this <see cref="T:Northwoods.GoXam.Overview"/> uses the <see cref="P:Northwoods.GoXam.Link.Route"/>'s <see cref="P:Northwoods.GoXam.Route.Points"/>
            of each <see cref="T:Northwoods.GoXam.Link"/> in the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>
            to route the links in this overview.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Overview.UsesObservedPartVisible">
            <summary>
            Gets or sets whether this <see cref="T:Northwoods.GoXam.Overview"/> uses the <see cref="P:Northwoods.GoXam.Part.Visible"/>
            of each <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/> in the <see cref="P:Northwoods.GoXam.Overview.Observed"/> <see cref="T:Northwoods.GoXam.Diagram"/>
            to show the nodes and links in this overview.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Overview.BoxTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to render the <see cref="P:Northwoods.GoXam.Overview.Box"/>
            showing the <see cref="P:Northwoods.GoXam.Overview.Observed"/>'s viewport into its model.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Overview.Box">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Node"/> used to display the rectangle whose bounds are the
            <see cref="P:Northwoods.GoXam.Overview.Observed"/>'s viewport.
            </summary>
            <value>
            By default this is null.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DiagramTool">
            <summary>
            This abstract tool class is the standard base class for all of the predefined tools.
            </summary>
            <remarks>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Tool.IDiagramTool">
            <summary>
            This interface specifies the methods the diagram uses to control each tool
            and the methods used to handle the standard input events processed through
            the diagram.
            </summary>
            <remarks>
            <para>
            All existing tools are actually subclasses of the abstract class <see cref="T:Northwoods.GoXam.Tool.DiagramTool"/>,
            which implements this interface.
            </para>
            <para>
            All uses of tools in <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram"/> use this interface,
            not the class <see cref="T:Northwoods.GoXam.Tool.DiagramTool"/>.
            However, the <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram"/> class also has a property for each of the
            mode-less tools that the diagram might have, for convenience in replacing
            or removing those specific tools from the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            The diagram asks each tool to update any adornments the tool might use for a given part.
            </summary>
            <param name="part"></param>
            <remarks>
            If the tool uses its own tool handles (<see cref="T:Northwoods.GoXam.Adornment"/>s),
            this should display them or hide them as appropriate.
            Typically this should only show them if the part is selected.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.CanStart">
            <summary>
            This predicate is used by the diagram to decide if this tool can be started.
            </summary>
            <returns>true if the <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> can make this tool the current one and call
            the <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoStart"/> method</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoStart">
            <summary>
            This method is called by the diagram when this tool becomes the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use initialization here, such
            as setting up internal data structures, or capturing the mouse.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoActivate">
            <summary>
            This method is called by the diagram after setting <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>,
            to make the new tool active.
            </summary>
            <remarks>
            This should set <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Active"/> to true.
            This might call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>,
            if this tool's activity involves modification of the model.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoDeactivate">
            <summary>
            This method is called by the diagram on the old tool when
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> is set to a new tool.
            </summary>
            <remarks>
            This needs to set <see cref="P:Northwoods.GoXam.Tool.IDiagramTool.Active"/> to false.
            This might call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>,
            if this tool's activity involves modification of the model.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoStop">
            <summary>
            This method is called by the diagram when this tool stops being the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use cleanup here,
            such as releasing mouse capture.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoCancel">
            <summary>
            The diagram will call this method when the we wish to cancel the
            current tool's operation.
            </summary>
            <remarks>
            Typically this is called when the user hits the ESCAPE key.
            This should restore the original state and then call
            <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseDown">
            <summary>
            The diagram will call this method upon a mouse down event.
            </summary>
            <remarks>
            This is normally overridden for mouse-down tools;
            it is not called for mouse-move or mouse-up tools.
            However it may also be called when the tool is run in a modal fashion,
            when code explicitly sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseMove">
            <summary>
            The diagram will call this method upon a mouse move event.
            </summary>
            <remarks>
            This is normally overridden for mouse-move tools;
            it is not called for mouse-up tools.
            However it may also be called when the tool is run in a modal fashion,
            when code explicitly sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseUp">
            <summary>
            The diagram will call this method upon a mouse up event.
            </summary>
            <remarks>
            <para>
            This is normally overridden for mouse-up tools.
            </para>
            <para>
            Tools normally stop upon a mouse up, by calling <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>.
            If you want to handle multiple mouse down-up gestures in one tool activation,
            you will need to override this method to only stop the tool when you want.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseWheel">
            <summary>
            The diagram will call this method as the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The diagram will call this method upon a key down event.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.IDiagramTool.DoKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            The diagram will call this method upon a key up event.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.IDiagramTool.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this tool is handling input events.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.IDiagramTool.Active">
            <summary>
            Gets or sets whether this tool is started and is actively doing something.
            </summary>
            <remarks>
            You can set this to true after your tool is started (i.e. when it is the
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> and <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoStart"/>
            had been called), but when it is not yet in a state
            that it is actually "doing" something, because it is waiting for the right
            circumstances.  This is typically only important when the tool is used in
            a modal fashion.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DiagramTool.MouseEnabledProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.MouseEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DiagramTool.WheelBehaviorProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.WheelBehavior"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            The diagram asks each tool to update any adornments the tool might use for a given part.
            </summary>
            <param name="part"></param>
            <remarks>
            If the tool uses its own tool handles (<see cref="T:Northwoods.GoXam.Adornment"/>s),
            this should display them or hide them as appropriate.
            Typically this should only show them if the part is selected.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.CanStart">
            <summary>
            This predicate is used by the diagram to decide if this tool can be started.
            </summary>
            <returns>true if <see cref="P:Northwoods.GoXam.Tool.DiagramTool.MouseEnabled"/> is true and
            if the <see cref="T:Northwoods.GoXam.Tool.ToolManager"/> can make this tool the current one and
            then call the <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoStart"/> method</returns>
            <remarks>
            Overrides of this method should call the base method: if that returns false, the override should return false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoStart">
            <summary>
            This method is called by the diagram when this tool becomes the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use initialization here, such
            as setting up internal data structures, or capturing the mouse.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoActivate">
            <summary>
            This method is called by the diagram after setting <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>,
            to make the new tool active.
            </summary>
            <remarks>
            This should set <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to true.
            This might call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>,
            if this tool's activity involves modification of the model.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoDeactivate">
            <summary>
            This method is called by the diagram on the old tool when
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> is set to a new tool.
            </summary>
            <remarks>
            This needs to set <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to false.
            This might call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>,
            if this tool's activity involves modification of the model.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoStop">
            <summary>
            This method is called by the diagram when this tool stops being the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use cleanup here,
            such as releasing mouse capture.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoCancel">
            <summary>
            The diagram will call this method when the user wishes to cancel the
            current tool's operation.
            </summary>
            <remarks>
            Typically this is called when the user hits the ESCAPE key.
            This should restore the original state and then call
            <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.StopTool">
            <summary>
            If the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> is this tool,
            stop this tool and start the <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>
            by making it be the new current tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoMouseDown">
            <summary>
            The diagram will call this method upon a mouse down event.
            </summary>
            <remarks>
            This is normally overridden for mouse-down tools;
            it is not called for mouse-move or mouse-up tools.
            However it may also be called when the tool is run in a modal fashion,
            when code explicitly sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoMouseMove">
            <summary>
            The diagram will call this method upon a mouse move event.
            </summary>
            <remarks>
            This is normally overridden for mouse-move tools;
            it is not called for mouse-up tools.
            However it may also be called when the tool is run in a modal fashion,
            when code explicitly sets the diagram's <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            An override of this method usually does nothing when <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoMouseUp">
            <summary>
            The diagram will call this method upon a mouse up event.
            </summary>
            <remarks>
            <para>
            This is normally overridden for mouse-up tools.
            An override of this method usually does nothing when <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> is false,
            except for calling <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>.
            </para>
            <para>
            Tools normally stop upon a mouse up, by calling <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTool"/>.
            If you want to handle multiple mouse down-up gestures in one tool activation,
            you will need to override this method to only stop the tool when you want.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoMouseWheel">
            <summary>
            The diagram will call this method as the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The diagram will call this method upon a key down event.
            </summary>
            <remarks>
            <para>
            By default this just calls <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoCancel"/> if the key is the ESCAPE key.
            </para>
            <para>
            In WPF this key event method isn't called because of the command mechanism.
            If you want this method to be called, override <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoStart"/> to call
            <c>this.Diagram.CommandHandler.RemoveStandardBindings()</c>
            and override <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoStop"/> to call
            <c>this.Diagram.CommandHandler.AddStandardBindings()</c>.
            In Silverlight there are no commands, so this method is always called.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.DoKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            The diagram will call this method upon a key up event.
            </summary>
            <remarks>
            In WPF this key event method isn't called due to the command mechanism.
            In Silverlight there are no commands, so this method is always called.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Diagram.StartTransaction(System.String)"/> with the given transaction name.
            </summary>
            <param name="tname"></param>
            <returns></returns>
            <remarks>
            This is normally called in an override of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoActivate"/>, if the tool modifies the model,
            along with a call to <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/> in an override of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoDeactivate"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction">
            <summary>
            If <see cref="P:Northwoods.GoXam.Tool.DiagramTool.TransactionResult"/> is null, call <see cref="M:Northwoods.GoXam.Diagram.RollbackTransaction"/>,
            otherwise call <see cref="M:Northwoods.GoXam.Diagram.CommitTransaction(System.String)"/>.
            </summary>
            <returns>the result of the call to rollback or commit the transaction</returns>
            <remarks>
            This is normally called in an override of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoDeactivate"/>,
            if <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> was called in <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoActivate"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseWheel">
            <summary>
            Implement the standard behavior for mouse wheel events.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Diagram.AllowScroll"/> is true,
            turning the mouse wheel causes the diagram to scroll up or down.
            If <see cref="M:Northwoods.GoXam.Tool.DiagramTool.IsShiftKeyDown"/> is also true,
            the diagram scrolls left or right.
            </para>
            <para>
            If <see cref="M:Northwoods.GoXam.Tool.DiagramTool.IsControlKeyDown"/> is true and if
            <see cref="P:Northwoods.GoXam.Diagram.AllowZoom"/> is true,
            turning the mouse wheel changes the diagram's scale,
            zooming in or out while trying to keep the point in the model
            at the same point as the mouse.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseSelect">
            <summary>
            Implement the standard behavior for selecting parts with the mouse, depending on the control and shift modifier keys.
            </summary>
            <remarks>
            <para>
            Control-clicking on a part will select it if it wasn't already, and will deselect if it had been selected.
            Shift-clicking on a part will add it to the selection (if it isn't already).
            Otherwise, clicking on a part will select it (if it isn't already).
            </para>
            <para>
            Note that there are restrictions on selection.
            For example, a part cannot be selected in this manner if <see cref="P:Northwoods.GoXam.Part.Selectable"/> is false,
            or if <see cref="P:Northwoods.GoXam.Diagram.MaximumSelectionCount"/> would be exceeded.
            </para>
            <para>
            A left click in the background of the diagram with no modifier keys clears the selection.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.CaptureMouse">
            <summary>
            This calls <c>UIElement.CaptureMouse</c> on the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Panel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.ReleaseMouse">
            <summary>
            This calls <c>UIElement.ReleaseMouseCapture</c> on the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Panel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindPartAt(System.Windows.Point,System.Boolean)">
            <summary>
            Find a <see cref="T:Northwoods.GoXam.Part"/> at the given point, perhaps requiring it to be <see cref="P:Northwoods.GoXam.Part.Selectable"/>.
            </summary>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="selectable">if true, the <see cref="T:Northwoods.GoXam.Part"/> found must be selectable; otherwise any Part will do</param>
            <returns>
            the first (frontmost) <see cref="T:Northwoods.GoXam.Part"/> at the location <paramref name="p"/>;
            the part could be a <see cref="T:Northwoods.GoXam.Node"/> or a <see cref="T:Northwoods.GoXam.Link"/>,
            including temporary ones such as <see cref="T:Northwoods.GoXam.Adornment"/>s.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)">
            <summary>
            Find an element at the given point that is a tool handle.
            </summary>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="category">the handle's <see cref="T:Northwoods.GoXam.Adornment"/>'s <see cref="P:Northwoods.GoXam.Part.Category"/></param>
            <returns></returns>
            <remarks>
            A tool handle is an element that is part of an <see cref="T:Northwoods.GoXam.Adornment"/> that is used by a tool.
            Typically it is a <c>ToolHandle</c> in WPF or a <c>Path</c> in Silverlight,
            but may be any FrameworkElement with the <c>go:NodePanel.Figure</c> attached property set to value other than <c>None</c>.
            This method checks that the adornment's <see cref="P:Northwoods.GoXam.Part.Category"/> matches the given <paramref name="category"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindElementUpFrom(System.Windows.FrameworkElement,System.Predicate{System.Windows.FrameworkElement})">
            <summary>
            Search up the chain of parent visual elements starting with the given element
            to find one for which <paramref name="pred"/> is true
            </summary>
            <param name="elt">a <c>FrameworkElement</c></param>
            <param name="pred">
            When this predicate is true for an element, return that element.
            When this predicate is false for an element, continue up the visual parent chain.
            Stop going up the visual parent chain when reaching the <see cref="T:Northwoods.GoXam.Part"/>.
            </param>
            <returns>null if no such element is found</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindElementUpFrom(System.Windows.FrameworkElement,System.Func{System.Windows.FrameworkElement,System.Nullable{System.Boolean}},System.Predicate{System.Windows.FrameworkElement})">
            <summary>
            Search up the chain of visual parent elements starting with the given element
            to find one that has <paramref name="pred"/> true and <paramref name="valid"/> true.
            </summary>
            <param name="elt">a <c>FrameworkElement</c></param>
            <param name="pred">
            When this predicate and <paramref name="valid"/> are both true, return that element,
            When this predicate is false, return null.
            Otherwise continue up the parent chain.
            Stop going up the visual parent chain when reaching the <see cref="T:Northwoods.GoXam.Part"/>.
            </param>
            <param name="valid">a predicate that must be true for an element for it to be returned by this method</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindAdornment(System.Windows.FrameworkElement)">
            <summary>
            Given a handle element, return its containing <see cref="T:Northwoods.GoXam.Adornment"/>.
            </summary>
            <param name="handle">a <c>FrameworkElement</c></param>
            <returns>
            the containing <see cref="T:Northwoods.GoXam.Adornment"/> (which might be several visual levels up)
            or null if the element does not belong to an <see cref="T:Northwoods.GoXam.Adornment"/>
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindAdornedElement(System.Windows.FrameworkElement)">
            <summary>
            Given a handle element in an adornment, return its adornment's <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/>.
            </summary>
            <param name="handle">a <c>FrameworkElement</c></param>
            <returns>a <c>FrameworkElement</c> inside the adorned part, not inside this adornment</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.FindAdornedPart(System.Windows.FrameworkElement)">
            <summary>
            Given a handle element in an adornment, return its adornment's <see cref="P:Northwoods.GoXam.Adornment.AdornedPart"/>.
            </summary>
            <param name="handle">a <c>FrameworkElement</c></param>
            <returns>a <see cref="T:Northwoods.GoXam.Part"/> that is not an adornment</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsLeftButtonDown">
            <summary>
            Return true when the left mouse button is pressed during a mouse button event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsRightButtonDown">
            <summary>
            Return true when the right mouse button is pressed during a mouse button event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsControlKeyDown">
            <summary>
            Return true when the control key modifier is pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsShiftKeyDown">
            <summary>
            Return true when the shift key modifier is pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsAltKeyDown">
            <summary>
            Return true when the alt key modifier is pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsBeyondDragSize">
            <summary>
            Return true when the last mouse point is far enough away from the first mouse down point
            to constitute a drag operation instead of just a potential click.
            </summary>
            <returns>true if the first and last mouse points are more than two pixels apart in either axis</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.IsDoubleClick">
            <summary>
            Return true when the last mouse down event occurred very close to and very soon after the previous mouse down event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.GetWheelDelta">
            <summary>
            Return how much the wheel has turned.
            </summary>
            <returns>
            If the last mouse event was the mouse wheel turning forward, this returns a positive integer.
            If the last mouse event was the mouse wheel turning backward, this returns a negative integer.
            Otherwise this returns zero.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DiagramTool.RaiseEvent(System.Windows.RoutedEvent,Northwoods.GoXam.DiagramEventArgs)">
            <summary>
            Raise a <c>RoutedEvent</c> on the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Diagram"/>.
            </summary>
            <param name="evt">a <c>RoutedEvent</c></param>
            <param name="args">a <see cref="T:Northwoods.GoXam.DiagramEventArgs"/></param>
            <returns>true if the event was raised and it was <c>Handled</c></returns>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DiagramTool.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> that owns this tool and
            for which this tool is handling input events.
            </summary>
            <value>
            This property is set automatically by the <see cref="T:Northwoods.GoXam.Diagram"/>
            properties and methods that manage tools.
            You should not need to set this property.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DiagramTool.MouseEnabled">
            <summary>
            Gets or sets whether this tool can be started by a mouse event.
            </summary>
            <value>
            The default value is true.
            Set this to false to prevent <see cref="M:Northwoods.GoXam.Tool.DiagramTool.CanStart"/> from returning true.
            </value>
            <remarks>
            <para>
            Setting this property to false should prevent this tool from being used in a mode-less fashion
            with a mouse down/move/up event.
            </para>
            <para>
            However, even when this property is false, this tool can still be used in a modal fashion:
            this tool can still be started by explicitly setting the
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> property to this tool.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DiagramTool.WheelBehavior">
            <summary>
            Gets or sets the behavior of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseWheel"/>.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.Standard"/>.
            That value is a combination of three enumerated values:
            <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ScrollsVertically"/> |
            <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ShiftScrollsHorizontally"/> |
            <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ControlZooms"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DiagramTool.Active">
            <summary>
            Gets or sets whether this tool is started and is actively doing something.
            </summary>
            <remarks>
            You can set this to true after your tool is started (i.e. when it is the
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoStart"/>
            had been called), but when it is not yet in a state
            that it is actually "doing" something, because it is waiting for the right
            circumstances.  This is typically only important when the tool is used in
            a modal fashion.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DiagramTool.TransactionResult">
            <summary>
            Gets or sets the name of the transaction to be committed; if null, the transaction will be rolled back.
            </summary>
            <value>
            The default value is null; <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> will also set this to null.
            </value>
            <remarks>
            If this is non-null at the time of a call to <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>,
            this results in a call to <see cref="M:Northwoods.GoXam.Diagram.CommitTransaction(System.String)"/> with this transaction name;
            if this is null at that time, this results in a call to <see cref="M:Northwoods.GoXam.Diagram.RollbackTransaction"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.PartManager">
            <summary>
            This class handles the <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event
            for the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Model"/> and is responsible for
            creating and removing <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s for the data in the model.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:Northwoods.GoXam.Diagram"/> has an instance of this class as its
            <see cref="P:Northwoods.GoXam.Diagram.PartManager"/> property.
            This class maintains a collection of all diagram <see cref="P:Northwoods.GoXam.PartManager.Nodes"/> and <see cref="P:Northwoods.GoXam.PartManager.Links"/>,
            as well as dictionaries mapping model data to <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            You can find the <see cref="T:Northwoods.GoXam.Part"/> for a model data object by calling <see cref="M:Northwoods.GoXam.PartManager.FindNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> and
            <see cref="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Use <see cref="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> when the model
            does not support separate link data objects.
            </para>
            <para>
            If you want to add nodes programmatically, don't call <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>!
            You need to add node data to the model by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/>.
            That will automatically update all diagrams that are using the model by calling
            <see cref="M:Northwoods.GoXam.PartManager.OnModelChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>, which will in turn call <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> for you.
            Remember to wrap all changes to a model or to its data in a transaction.
            </para>
            <para>
            If you want to customize the standard behavior, you can easily override any of its methods
            and substitute an instance of your custom part manager class for your diagram.
            <code>
            public class CustomPartManager : PartManager {
              protected override String FindCategoryForNode(Object nodedata, IDiagramModel model, bool isgroup, bool islinklabel) {
                // maybe choose different category here, to dynamically determine the DataTemplate found by FindTemplateForNode
              }
            }
            </code>
            and install it with either XAML:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.PartManager&gt;
                  &lt;local:CustomPartManager /&gt;
                &lt;/go:Diagram.PartManager&gt;
              &lt;/go:Diagram&gt;
            </code>
            or in the initialization of your Diagram control:
            <code>
              myDiagram.PartManager = new CustomPartManager();
            </code>
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.#ctor">
            <summary>
            The constructor for the standard part manager that is the initial value of
            <see cref="P:Northwoods.GoXam.Diagram.PartManager"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindNodeDataModel(System.Object)">
            <summary>
            Find the model for some data.
            </summary>
            <param name="nodedata"></param>
            <returns>
            normally the <see cref="P:Northwoods.GoXam.Diagram.Model"/>,
            but may return the <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>
            if the <paramref name="nodedata"/> is a <see cref="T:Northwoods.GoXam.Part"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindCommonDataModel(System.Object,System.Object)">
            <summary>
            Find the model for the two data objects representing nodes.
            </summary>
            <param name="fromnodedata"></param>
            <param name="tonodedata"></param>
            <returns>
            normally the <see cref="P:Northwoods.GoXam.Diagram.Model"/>,
            but may return the <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>
            if the both <paramref name="fromnodedata"/> and <paramref name="tonodedata"/>
            are <see cref="T:Northwoods.GoXam.Node"/>s,
            otherwise null.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnModelChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            This is called for each <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event
            of the <see cref="P:Northwoods.GoXam.Diagram.Model"/>.
            </summary>
            <param name="e">the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Change"/> property
            gives a basic description of the change to the model</param>
            <remarks>
            <para>
            The implementation of this method and the methods that it calls should not modify the model.
            </para>
            <para>
            Property changes to the model itself are conveyed by specific <see cref="T:Northwoods.GoXam.Model.ModelChange"/> values,
            not by the general <see cref="F:Northwoods.GoXam.Model.ModelChange.Property"/> case.
            </para>
            <para>
            For small changes such as the addition or removal of node data from the model,
            this calls the <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> or <see cref="M:Northwoods.GoXam.PartManager.RemoveNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> method.
            </para>
            <para>
            For changes in link relationships in the model, this calls
            <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>,
            <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>,
            <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>, or
            <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            </para>
            <para>
            For more wholescale changes, such as a change in the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>,
            this will call <see cref="M:Northwoods.GoXam.PartManager.RebuildNodeElements"/> to discard all existing nodes and links and reconstruct
            them using the appropriate (and perhaps changed) data templates.
            For widespread changes only involving links, this will call <see cref="M:Northwoods.GoXam.PartManager.RebuildLinkElements"/>.
            </para>
            <para>
            This ignores property changes to model data, because those should be handled directly
            by data-bindings in the <c>DataTemplate</c> elements.
            The only exception is when <see cref="P:Northwoods.GoXam.PartManager.UpdatesRouteDataPoints"/> is true and the <c>PropertyName</c> is "Points".
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RebuildNodeElements">
            <summary>
            Discard all existing <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s and then
            make new ones for all of model data and add them to the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>.
            </summary>
            <remarks>
            <para>
            This deletes all existing <see cref="T:Northwoods.GoXam.Part"/>s from the diagram and then
            calls <see cref="M:Northwoods.GoXam.PartManager.DoRebuildNodeElements"/> and <see cref="M:Northwoods.GoXam.PartManager.RebuildLinkElements"/>.
            </para>
            <para>
            This tries to maintain the collection of <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>
            after the parts have all been reconstructed.
            </para>
            <para>
            The implementation of this method and the methods that it calls should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.DoRebuildNodeElements">
            <summary>
            Make new <see cref="T:Northwoods.GoXam.Node"/>s for all of model data and add them to the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>.
            </summary>
            <remarks>
            <para>
            This will call <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> for each of the node data objects in the model.
            It also calls <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> for each <see cref="T:Northwoods.GoXam.Node"/> that is in
            the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>.
            </para>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RebuildNodeElements"/>.
            </para>
            <para>
            The implementation of this method and the methods that it calls should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Make sure a <see cref="T:Northwoods.GoXam.Node"/> exists for some data in the model, added to the <see cref="T:Northwoods.GoXam.NodeLayer"/>
            specified by its <see cref="P:Northwoods.GoXam.Part.LayerName"/>.
            </summary>
            <param name="nodedata">the data in the <paramref name="model"/> that holds node information</param>
            <param name="model">the model that the <paramref name="nodedata"/> is in</param>
            <returns>
            the <see cref="T:Northwoods.GoXam.Node"/> for the <paramref name="nodedata"/>,
            either an existing one or a newly created one,
            or null if <see cref="M:Northwoods.GoXam.PartManager.FilterNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> returns false or if the diagram is uninitialized
            </returns>
            <remarks>
            <para>
            If you want to add a node to your diagram programmatically, don't call this method,
            but create a node data object and add it to the model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>,
            either directly to that collection or by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/>.
            Remember to wrap all model changes in a transaction.
            </para>
            <para>
            If the diagram already has a <see cref="T:Northwoods.GoXam.Node"/> for the data, as determined by
            <see cref="M:Northwoods.GoXam.PartManager.FindNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>, this method returns that node.
            </para>
            <para>
            If <see cref="M:Northwoods.GoXam.PartManager.FilterNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> is false, this method will do nothing and return null.
            </para>
            <para>
            For bound data this calls <see cref="M:Northwoods.GoXam.PartManager.FindCategoryForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean)"/> to determine the category string to
            pass to <see cref="M:Northwoods.GoXam.PartManager.FindTemplateForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String)"/> in order to get the <c>DataTemplate</c>.
            Once it has the category and the <c>DataTemplate</c>, this calls <see cref="M:Northwoods.GoXam.PartManager.MakeNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String,System.Windows.DataTemplate)"/>
            to actually allocate and initialize the <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Group"/>.
            </para>
            <para>
            If the <paramref name="nodedata"/> is a <see cref="T:Northwoods.GoXam.Node"/> and if
            the <paramref name="model"/> is a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>,
            this method doesn't need to construct a new node by calling <see cref="M:Northwoods.GoXam.PartManager.MakeNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String,System.Windows.DataTemplate)"/>,
            but can just add the node to the diagram, in the appropriate <see cref="T:Northwoods.GoXam.Layer"/>
            determined by the <see cref="P:Northwoods.GoXam.Part.LayerName"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Given some <paramref name="nodedata"/> in a <paramref name="model"/>,
            find the corresponding <see cref="T:Northwoods.GoXam.Node"/> in this diagram.
            </summary>
            <param name="nodedata">the data in the <paramref name="model"/> that holds node information</param>
            <param name="model">the model that the <paramref name="nodedata"/> is in</param>
            <returns>a <see cref="T:Northwoods.GoXam.Node"/>, or null if such a node has not been created for that data</returns>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FilterNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Decide whether a particular <paramref name="nodedata"/> should be represented
            in the diagram by a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="nodedata">the data in the <paramref name="model"/> that holds node information</param>
            <param name="model">the model that the <paramref name="nodedata"/> is in</param>
            <returns>true only if <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> should make and add a <see cref="T:Northwoods.GoXam.Node"/> to the diagram</returns>
            <remarks>
            <para>
            Normally, this return true.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindCategoryForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean)">
            <summary>
            Determine the category for the node, to be able to decide between different templates for the <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="nodedata"></param>
            <param name="model"></param>
            <param name="isgroup"></param>
            <param name="islinklabel"></param>
            <returns>
            the result of calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetCategoryForNode(System.Object)"/>
            </returns>
            <remarks>
            This is commonly overidden in order to dynamically determine the category for the <paramref name="nodedata"/>.
            The result is used in a call to <see cref="M:Northwoods.GoXam.PartManager.FindTemplateForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindTemplateForNode(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String)">
            <summary>
            Given a category and the node data, find a <c>DataTemplate</c> to use in making the <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
            <param name="nodedata"></param>
            <param name="model"></param>
            <param name="isgroup"></param>
            <param name="islinklabel"></param>
            <param name="category"></param>
            <returns>
            a <c>DataTemplate</c> taken from either <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/> or <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/>
            (or if <paramref name="isgroup"/> is true,
            from either <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/> or <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/>),
            or null if no template is found
            </returns>
            <remarks>
            <para>
            The search for a data template looks in different places depending on the value of <paramref name="isgroup"/>.
            For the default category (the empty string ""),
            this uses <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/> (or <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>) if it is non-null,
            or else the default entry ("") in the <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/>
            (or <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/>) if there is a dictionary.
            For any other category,
            this looks up the category in the <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/>
            (or <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/>) if there is a dictionary,
            and if that fails it uses <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/>
            (or <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>) or the
            default entry in the dictionary.
            This may return null if no appropriate template is found for the category.
            The result is used in a call to <see cref="M:Northwoods.GoXam.PartManager.MakeNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String,System.Windows.DataTemplate)"/>.
            </para>
            <para>
            You may wish to override this method to customize the selection of the template based on the node data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.MakeNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Boolean,System.Boolean,System.String,System.Windows.DataTemplate)">
            <summary>
            Construct a new <see cref="T:Northwoods.GoXam.Node"/>, setting its <c>Content</c> and <c>ContentTemplate</c> properties.
            </summary>
            <param name="nodedata">the data that this node is bound to; must not be a <see cref="T:Northwoods.GoXam.Node"/> or any <c>UIElement</c></param>
            <param name="model">the model that the <paramref name="nodedata"/> is in</param>
            <param name="isgroup">whether the node should be a <see cref="T:Northwoods.GoXam.Group"/> instead of a <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="islinklabel">whether the node acts as the label node for a link</param>
            <param name="category">the category of the node</param>
            <param name="templ">the <c>DataTemplate</c> for the <c>ContentTemplate</c> property</param>
            <returns>a newly created <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Group"/>,
            bound to <paramref name="nodedata"/> via a <see cref="T:Northwoods.GoXam.PartManager.PartBinding"/></returns>
            <remarks>
            <para>
            You may wish to override this method to construct a subclass of <see cref="T:Northwoods.GoXam.Node"/>
            when you have overridden one of the node methods, such as <see cref="M:Northwoods.GoXam.Node.FindPort(System.String,System.Boolean)"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnNodeAdded(Northwoods.GoXam.Node)">
            <summary>
            Called after a <paramref name="node"/> is added to the diagram.
            </summary>
            <param name="node">a <see cref="T:Northwoods.GoXam.Node"/></param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            For models that are not <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>,
            this will add any <see cref="T:Northwoods.GoXam.Link"/>s that should be connected to the new <paramref name="node"/>.
            For models that are <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>,
            this checks for any <see cref="T:Northwoods.GoXam.Group"/> containing this new node is not <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/> --
            if so this node is made <c>Visibility.Collapsed</c>.
            </para>
            <para>
            Adding a node will request a new automatic layout if it does not have a <see cref="P:Northwoods.GoXam.Node.Location"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the addition of the node to the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnNodeRemoving(Northwoods.GoXam.Node)">
            <summary>
            Called before a <paramref name="node"/> is removed from the diagram.
            </summary>
            <param name="node">a <see cref="T:Northwoods.GoXam.Node"/></param>
            <remarks>
            <para>
            This removes all links that are connected to the <paramref name="node"/>.
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RemoveNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            </para>
            <para>
            Removing a node will request a new automatic layout if it has a <see cref="P:Northwoods.GoXam.Node.Location"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the removal of the node from the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnNodeRemoved(Northwoods.GoXam.Node,Northwoods.GoXam.NodeLayer)">
            <summary>
            Called after a <paramref name="node"/> is removed from the diagram.
            </summary>
            <param name="node">a <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="layer">the <see cref="T:Northwoods.GoXam.NodeLayer"/> that the <paramref name="node"/> was removed from</param>
            <remarks>
            <para>
            By default this method does nothing.
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RemoveNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the removal of the node from the diagram.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.PartManager.OnNodeRemoving(Northwoods.GoXam.Node)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RemoveNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Remove any <see cref="T:Northwoods.GoXam.Node"/> in this diagram that exists for the <paramref name="nodedata"/>.
            </summary>
            <param name="nodedata"></param>
            <param name="model"></param>
            <remarks>
            <para>
            This calls <see cref="M:Northwoods.GoXam.PartManager.OnNodeRemoving(Northwoods.GoXam.Node)"/> before the node is removed from its layer,
            and <see cref="M:Northwoods.GoXam.PartManager.OnNodeRemoved(Northwoods.GoXam.Node,Northwoods.GoXam.NodeLayer)"/> afterwards.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the removal of the node from the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RebuildLinkElements">
            <summary>
            Discard all existing <see cref="T:Northwoods.GoXam.Link"/>s and then
            make new ones for all of model data and add them to the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>.
            </summary>
            <remarks>
            <para>
            This removes all of the old <see cref="T:Northwoods.GoXam.Link"/>s and then calls
            <see cref="M:Northwoods.GoXam.PartManager.DoRebuildLinkElements"/>.
            </para>
            <para>
            This does not delete existing <see cref="T:Northwoods.GoXam.Node"/>s.
            This method is also called by <see cref="M:Northwoods.GoXam.PartManager.RebuildNodeElements"/>.
            </para>
            <para>
            This tries to maintain the collection of <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/>
            after the links have all been reconstructed.
            </para>
            <para>
            The implementation of this method and the methods that it calls should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.DoRebuildLinkElements">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RebuildLinkElements"/> to construct or
            reconstruct <see cref="T:Northwoods.GoXam.Link"/>s in the diagram.
            </summary>
            <remarks>
            <para>
            This will call <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            for each of the link data objects in the model, whether explicit
            link data in an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>,
            or implicit for each node in an <see cref="T:Northwoods.GoXam.Model.ITreeModel"/>
            or an <see cref="T:Northwoods.GoXam.Model.IConnectedModel"/>.
            It also calls <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            for each <see cref="T:Northwoods.GoXam.Link"/> that is in
            the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>.
            </para>
            <para>
            The implementation of this method and the methods that it calls should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindCategoryForLink(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Determine the category for the link, to be able to decide between different templates for the <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="linkdata">
            if the model is an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>, this is the link data;
            otherwise this is a <see cref="T:Northwoods.GoXam.PartManager.VirtualLinkData"/>
            </param>
            <param name="model"></param>
            <returns>
            If there is no category associated with the link data,
            this uses the category of the "from" node data if it is not an empty string,
            or else tries to use the category of the "to" node data.
            The default category is the empty string.
            </returns>
            <remarks>
            The result is used in a call to <see cref="M:Northwoods.GoXam.PartManager.FindTemplateForLink(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindTemplateForLink(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.String)">
            <summary>
            Given a category and the link data, find a <c>DataTemplate</c> to use in making the <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="linkdata"></param>
            <param name="model"></param>
            <param name="category"></param>
            <returns>
            a <c>DataTemplate</c> taken from either <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> or <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/>,
            or null if no template is found
            </returns>
            <remarks>
            <para>
            For the default category (the empty string ""),
            this uses <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> if it is non-null,
            or else the default entry ("") in the <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/> if there is a dictionary.
            For any other category,
            this looks up the category in the <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/> if there is a dictionary,
            and if that fails it uses <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/> or the
            default entry ("") in the <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/>.
            This may return null if no appropriate template is found for the category.
            The result is used in a call to <see cref="M:Northwoods.GoXam.PartManager.MakeLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Windows.DataTemplate,System.String)"/>.
            </para>
            <para>
            You may wish to override this method to customize the selection of the template based on the link data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.MakeLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Windows.DataTemplate,System.String)">
            <summary>
            Construct a new <see cref="T:Northwoods.GoXam.Link"/>, setting its <c>Content</c> and <c>ContentTemplate</c> properties.
            </summary>
            <param name="linkdata">the data that this link is bound to; must not be a <see cref="T:Northwoods.GoXam.Link"/> or any <c>UIElement</c></param>
            <param name="model">the model that the <paramref name="linkdata"/> is in</param>
            <param name="templ">the <c>DataTemplate</c> for the <c>ContentTemplate</c> property</param>
            <param name="category">the category for the link</param>
            <returns>a newly created <see cref="T:Northwoods.GoXam.Link"/></returns>
            <remarks>
            <para>
            You may wish to override this method in order to use a subclass of <see cref="T:Northwoods.GoXam.Link"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Given some <paramref name="linkdata"/> in a <paramref name="model"/>,
            find the corresponding <see cref="T:Northwoods.GoXam.Link"/> in this diagram.
            </summary>
            <param name="linkdata">the data in the <paramref name="model"/> that holds link relationship information</param>
            <param name="model">the model that the <paramref name="linkdata"/> is in, an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>a <see cref="T:Northwoods.GoXam.Link"/>, or null if such a link has not been created for that data</returns>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Decide whether a particular <paramref name="linkdata"/> should be represented
            in the diagram by a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="linkdata">the data in the <paramref name="model"/> that holds link relationship information</param>
            <param name="model">the model that the <paramref name="linkdata"/> is in, an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>true only if <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> should make and add a <see cref="T:Northwoods.GoXam.Link"/> to the diagram</returns>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Make sure a <see cref="T:Northwoods.GoXam.Link"/> exists for some data in the model, added to the <see cref="T:Northwoods.GoXam.LinkLayer"/>
            specified by its <see cref="P:Northwoods.GoXam.Part.LayerName"/>.
            </summary>
            <param name="linkdata">the data in the <paramref name="model"/> that holds link relationship information</param>
            <param name="model">the model that the <paramref name="linkdata"/> is in, an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>
            the <see cref="T:Northwoods.GoXam.Link"/> for the <paramref name="linkdata"/>,
            either an existing one or a newly created one,
            or null if <see cref="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> returns false or if the diagram is uninitialized
            </returns>
            <remarks>
            <para>
            If the diagram already has a <see cref="T:Northwoods.GoXam.Link"/> for the data, as determined by
            <see cref="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>,
            or if <see cref="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> is false,
            this method will do nothing.
            </para>
            <para>
            If the <paramref name="linkdata"/> is a <see cref="T:Northwoods.GoXam.Link"/> and if
            the <paramref name="model"/> is a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>,
            this method doesn't need to construct a new link by calling <see cref="M:Northwoods.GoXam.PartManager.MakeLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel,System.Windows.DataTemplate,System.String)"/>,
            but can just add the link to the diagram, in the appropriate <see cref="T:Northwoods.GoXam.Layer"/>
            determined by the <see cref="P:Northwoods.GoXam.Part.LayerName"/>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Remove any <see cref="T:Northwoods.GoXam.Link"/> that exists in the diagram for the <paramref name="linkdata"/>.
            </summary>
            <param name="linkdata">the data in the <paramref name="model"/> that holds link relationship information</param>
            <param name="model">the model that the <paramref name="linkdata"/> is in, an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Given a pair of node data for which there is a link relationship,
            find the corresponding <see cref="T:Northwoods.GoXam.Link"/> in this diagram.
            </summary>
            <param name="fromnodedata">the data from which the link relationship comes</param>
            <param name="tonodedata">the data to which the link relationship goes</param>
            <param name="model">the model that the node data are in, not an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>a <see cref="T:Northwoods.GoXam.Link"/>, or null if such a link has not been created for that pair of node data</returns>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Decide whether the link relationship between a particular pair of node data
            should be represented in the diagram by a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="fromnodedata">the data from which the link relationship comes</param>
            <param name="tonodedata">the data to which the link relationship goes</param>
            <param name="model">the model that the node data are in, not an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>true only if <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> should make and add a <see cref="T:Northwoods.GoXam.Link"/> to the diagram</returns>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Make sure a <see cref="T:Northwoods.GoXam.Link"/> exists for the link relationship between the given
            pair of node data, added to the <see cref="T:Northwoods.GoXam.LinkLayer"/>
            specified by its <see cref="P:Northwoods.GoXam.Part.LayerName"/>.
            </summary>
            <param name="fromnodedata">the data from which the link relationship comes</param>
            <param name="tonodedata">the data to which the link relationship goes</param>
            <param name="model">the model that the node data are in, not an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <returns>
            the <see cref="T:Northwoods.GoXam.Link"/> for the connecting the two node data,
            either an existing one or a newly created one,
            or null if <see cref="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> returns false or if the diagram is uninitialized
            </returns>
            <remarks>
            <para>
            If the diagram already has a <see cref="T:Northwoods.GoXam.Link"/> for the pair of node data,
            as determined by <see cref="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>,
            or if <see cref="M:Northwoods.GoXam.PartManager.FilterLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> is false,
            this method will do nothing.
            </para>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Remove any <see cref="T:Northwoods.GoXam.Link"/> that exists for a pair of given node data.
            </summary>
            <param name="fromnodedata">the data from which the link relationship comes</param>
            <param name="tonodedata">the data to which the link relationship goes</param>
            <param name="model">the model that the node data are in, not an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/></param>
            <remarks>
            <para>
            The implementation of this method should not modify the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnLinkAdded(Northwoods.GoXam.Link)">
            <summary>
            Called after the <paramref name="link"/> is added to the diagram.
            </summary>
            <param name="link">a <see cref="T:Northwoods.GoXam.Link"/></param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> and
            <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Adding a link will request a new automatic layout.
            If either of the link's nodes are not <c>Visible</c>, the link will also be made not <c>Visible</c>.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the addition of the link to the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnLinkRemoving(Northwoods.GoXam.Link)">
            <summary>
            Called before the <paramref name="link"/> is removed from the diagram.
            </summary>
            <param name="link">a <see cref="T:Northwoods.GoXam.Link"/></param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> and
            <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            Removing a link will request a new automatic layout.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the removal of the link from the diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnLinkRemoved(Northwoods.GoXam.Link,Northwoods.GoXam.LinkLayer)">
            <summary>
            Called after the <paramref name="link"/> is removed from the diagram.
            </summary>
            <param name="link">a <see cref="T:Northwoods.GoXam.Link"/></param>
            <param name="layer">the <see cref="T:Northwoods.GoXam.LinkLayer"/> that the <paramref name="link"/> was removed from</param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> and
            <see cref="M:Northwoods.GoXam.PartManager.RemoveLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            By default this method does nothing.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the removal of the link from the diagram.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.PartManager.OnLinkRemoving(Northwoods.GoXam.Link)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.UpdateRouteDataPoints(Northwoods.GoXam.Link)">
            <summary>
            This is called after link routing, if <see cref="P:Northwoods.GoXam.PartManager.UpdatesRouteDataPoints"/> is true,
            to allow the link's <see cref="P:Northwoods.GoXam.Route.Points"/> to be copied to the link data.
            </summary>
            <param name="link"></param>
            <remarks>
            Typically one would override this in the following manner:
            <code>
              protected override void UpdateRouteDataPoints(Link link) {
                if (!this.UpdatesRouteDataPoints) return;
                var data = link.Data as MyLinkData;
                if (data != null) {
                  data.Points = new List&lt;Point&gt;(link.Route.Points);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnMemberAdded(Northwoods.GoXam.Node,Northwoods.GoXam.Part)">
            <summary>
            Called after a part is added to a group node's members.
            </summary>
            <param name="group">a <see cref="T:Northwoods.GoXam.Group"/></param>
            <param name="part">a <see cref="T:Northwoods.GoXam.Part"/> that has been added to the <paramref name="group"/></param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.OnModelChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>.
            Adding a member to a group will request a new automatic layout.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the membership of the part in the group.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.OnMemberRemoved(Northwoods.GoXam.Node,Northwoods.GoXam.Part)">
            <summary>
            Called after a part is removed from a group node's members.
            </summary>
            <param name="group">a <see cref="T:Northwoods.GoXam.Group"/></param>
            <param name="part">a <see cref="T:Northwoods.GoXam.Part"/> that has been removed from the <paramref name="group"/></param>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.PartManager.OnModelChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>.
            Removing a member from a group will request a new automatic layout.
            </para>
            <para>
            The implementation of this method should not modify the model.
            This method cannot and should not prevent or alter the membership of the part in the group.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RealizeTreeChildren(Northwoods.GoXam.Node)">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.Node.ExpandTree"/> to make sure all of the node's
            connected <see cref="T:Northwoods.GoXam.Node"/>s exist in the diagram.
            </summary>
            <param name="parent"></param>
            <remarks>
            <para>
            Typically this is useful for expanding a node in a tree structure,
            but the graph need not be tree-structured, and the model can be any
            kind of model, not just <see cref="T:Northwoods.GoXam.Model.ITreeModel"/>.
            </para>
            <para>
            You might want to override this method to first bring in data to the model
            if the needed data isn't in the model already, and then call the base method.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.ReleaseTreeChildren(Northwoods.GoXam.Node)">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.Node.CollapseTree"/> to allow all of the child nodes and links
            for a particular <see cref="T:Northwoods.GoXam.Node"/> to be removed from the diagram.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.RealizeSubGraphMembers(Northwoods.GoXam.Group)">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.Group.ExpandSubGraph"/> to make sure the group's
            member <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s all exist in the diagram.
            </summary>
            <param name="sg">a <see cref="T:Northwoods.GoXam.Group"/></param>
            <remarks>
            <para>
            This depends on the diagram's <see cref="P:Northwoods.GoXam.Diagram.Model"/>
            being a <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>.
            You might want to override this method to bring in data to the model
            if the needed data isn't in the model already, and then call the base method.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.ReleaseSubGraphMembers(Northwoods.GoXam.Group)">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.Group.CollapseSubGraph"/> to allow the member <see cref="T:Northwoods.GoXam.Node"/>s
            and <see cref="T:Northwoods.GoXam.Link"/>s to be removed from the diagram.
            </summary>
            <param name="sg">a <see cref="T:Northwoods.GoXam.Group"/></param>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Copy a collection of <see cref="T:Northwoods.GoXam.Part"/>s from this model to a given model.
            </summary>
            <param name="coll">a collection of <see cref="T:Northwoods.GoXam.Part"/>s that are in this model</param>
            <param name="destmodel">
            if null, this creates a model like this one by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.CreateInitializedCopy(Northwoods.GoXam.Model.IDataCollection)"/>;
            the new model is available from the returned <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> as its
            <see cref="P:Northwoods.GoXam.Model.ICopyDictionary.DestinationModel"/> property
            </param>
            <returns>an <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> that maps original parts to the copied ones</returns>
            <remarks>
            <para>
            First this creates an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> of all of the data
            referenced by the collection of <see cref="T:Northwoods.GoXam.Part"/>s.
            It ignores those parts for which <see cref="M:Northwoods.GoXam.Part.CanCopy"/> returns false.
            </para>
            <para>
            Second it calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/> to actually
            copy the data to the destination model.
            </para>
            <para>
            This does not raise any <see cref="P:Northwoods.GoXam.PartManager.Diagram"/> events.
            Call <see cref="M:Northwoods.GoXam.CommandHandler.Copy"/> if you want to copy the current selection into the clipboard.
            (It calls this method.)
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.PartManager.DeleteParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.DeleteParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})">
            <summary>
            Remove a collection of <see cref="T:Northwoods.GoXam.Part"/>s from this model.
            </summary>
            <param name="coll">a collection of <see cref="T:Northwoods.GoXam.Part"/>s that are in this model</param>
            <remarks>
            <para>
            If the part's <see cref="M:Northwoods.GoXam.Part.CanDelete"/> method returns false,
            the part's data is not removed from the model.
            </para>
            <para>
            This just calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/> and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/>
            (or <see cref="M:Northwoods.GoXam.Model.ILinksModel.RemoveLink(System.Object)"/>) as needed.
            </para>
            <para>
            This does not raise any <see cref="P:Northwoods.GoXam.PartManager.Diagram"/> events.
            Call <see cref="M:Northwoods.GoXam.CommandHandler.Delete"/> if you want to delete the current selection with the normal events.
            (It calls this method.)
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.SelectData(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            Select the <see cref="T:Northwoods.GoXam.Part"/>s in this diagram corresponding to a collection of model data.
            </summary>
            <param name="datacoll">an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/></param>
            <remarks>
            First this clears this <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>'s selection.
            Then it finds each <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/> corresponding
            to the data in <paramref name="datacoll"/> and
            sets its <see cref="P:Northwoods.GoXam.Part.IsSelected"/> to true.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindPartsForData(Northwoods.GoXam.Model.IDataCollection)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindPartsForData(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            Return a collection of <see cref="T:Northwoods.GoXam.Part"/>s in this diagram corresponding to some model data.
            </summary>
            <param name="datacoll"></param>
            <returns>a sequence of both <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s</returns>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindNodesForData(Northwoods.GoXam.Model.IDataCollection)"/>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindLinksForData(Northwoods.GoXam.Model.IDataCollection)"/>
            <seealso cref="M:Northwoods.GoXam.PartManager.SelectData(Northwoods.GoXam.Model.IDataCollection)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindNodesForData(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            Return a collection of <see cref="T:Northwoods.GoXam.Node"/>s in this diagram corresponding to some model data.
            </summary>
            <param name="datacoll">an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/></param>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindPartsForData(Northwoods.GoXam.Model.IDataCollection)"/>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindLinksForData(Northwoods.GoXam.Model.IDataCollection)"/>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.FindLinksForData(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            Return a collection of <see cref="T:Northwoods.GoXam.Link"/>s in this diagram corresponding to some model data.
            </summary>
            <param name="datacoll">an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/></param>
            <returns>
            If this model is an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>, this just calls <see cref="M:Northwoods.GoXam.PartManager.FindLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>
            and collects the <see cref="T:Northwoods.GoXam.Link"/>s that are found.
            Otherwise it looks for <see cref="T:Northwoods.GoXam.Link"/>s that are connected to the nodes in the data collection.
            </returns>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindPartsForData(Northwoods.GoXam.Model.IDataCollection)"/>
            <seealso cref="M:Northwoods.GoXam.PartManager.FindNodesForData(Northwoods.GoXam.Model.IDataCollection)"/>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this <see cref="T:Northwoods.GoXam.PartManager"/>
            manages the lifetime of <see cref="T:Northwoods.GoXam.Part"/>s depending on the contents of the
            <see cref="P:Northwoods.GoXam.Diagram.Model"/>.
            </summary>
            <value>
            This value is automatically set by the <see cref="P:Northwoods.GoXam.Diagram.PartManager"/> setter.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.Nodes">
            <summary>
            Gets an <c>IEnumerable&lt;Node&gt;</c> holding all of the <see cref="T:Northwoods.GoXam.Node"/>s
            that are in the diagram, including <see cref="T:Northwoods.GoXam.Group"/>s,
            including nodes that are not bound to data,
            but excluding <see cref="T:Northwoods.GoXam.Adornment"/>s.
            </summary>
            <remarks>
            If you want to add a <see cref="T:Northwoods.GoXam.Node"/> to the diagram,
            call <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            There is no guaranteed order in which the <see cref="T:Northwoods.GoXam.Node"/>s are returned in this value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.NodesCount">
            <summary>
            Gets the current number of <see cref="T:Northwoods.GoXam.Node"/>s in the diagram,
            including nodes that are not bound to data and including <see cref="T:Northwoods.GoXam.Group"/>s,
            but excluding <see cref="T:Northwoods.GoXam.Adornment"/>s.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.ChecksTransactionLevel">
            <summary>
            Gets or sets whether this part manager will output warnings to Trace listeners
            when model changes occur outside of a transaction.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            Setting this property will also set the <see cref="P:Northwoods.GoXam.Model.UndoManager.ChecksTransactionLevel"/>
            property, if the <see cref="P:Northwoods.GoXam.PartManager.Diagram"/>'s model has an undo manager.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.AddsToLogicalTree">
            <summary>
            Gets or sets whether <see cref="T:Northwoods.GoXam.Part"/>s are added and removed from the logical tree.  [WPF only]
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            <para>
            When false <see cref="M:Northwoods.GoXam.PartManager.AddNodeForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>, <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>,
            <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>, and the corresponding remove methods
            do not add the new <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/> to the <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s logical tree.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.Links">
            <summary>
            Gets a <c>IEnumerable&lt;Link&gt;</c> holding all of the <see cref="T:Northwoods.GoXam.Link"/>s
            that are in the diagram, including links that are not bound to data.
            </summary>
            <remarks>
            If you want to add a <see cref="T:Northwoods.GoXam.Link"/> to the diagram,
            call <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,Northwoods.GoXam.Model.IDiagramModel)"/> or
            or <see cref="M:Northwoods.GoXam.PartManager.AddLinkForData(System.Object,System.Object,Northwoods.GoXam.Model.IDiagramModel)"/>.
            There is no guaranteed order in which the <see cref="T:Northwoods.GoXam.Link"/>s are returned in this value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.LinksCount">
            <summary>
            Gets the current number of <see cref="T:Northwoods.GoXam.Link"/>s in the diagram,
            including links that are not bound to data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.UpdatesRouteDataPoints">
            <summary>
            Gets or sets whether this <see cref="T:Northwoods.GoXam.PartManager"/> should call <see cref="M:Northwoods.GoXam.PartManager.UpdateRouteDataPoints(Northwoods.GoXam.Link)"/>
            for each <see cref="T:Northwoods.GoXam.Link"/> that has a new list of <see cref="P:Northwoods.GoXam.Route.Points"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.PartManager.PartBinding">
            <summary>
            Provide access to the <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Part"/> for data binding, e.g. inside a <c>DataTemplate</c>,
            as well as access to the model data itself.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Northwoods.GoXam.PartManager.PartBinding"/> is created as the <c>ContentPresenter.Content</c> value
            for each new <see cref="T:Northwoods.GoXam.Node"/> and <see cref="T:Northwoods.GoXam.Link"/>.
            The presence of a <see cref="T:Northwoods.GoXam.PartManager.PartBinding"/> also indicates that the <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Part"/>
            is bound to data.
            </para>
            <para>
            You probably do not have a reason to explicitly create a <c>PartBinding</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.PartBinding.#ctor(Northwoods.GoXam.Part,System.Object)">
            <summary>
            Construct and initialize a <see cref="T:Northwoods.GoXam.PartManager.PartBinding"/>,
            matching up a <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Node"/> or <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Link"/> with the data to which it is bound,
            to be used as the <c>Content</c> of a <c>ContentPresenter</c>.
            </summary>
            <param name="part"></param>
            <param name="data"></param>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.PartBinding.ToString">
            <summary>
            This is might be useful for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Northwoods.GoXam.PartManager.PartBinding.PropertyChanged">
            <summary>
            This implementation of INotifyPropertyChanged does nothing.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.PartBinding.Part">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Node"/> or <see cref="T:Northwoods.GoXam.Link"/>
            that is bound to model data.
            </summary>
            <remarks>
            This allows for access to <see cref="T:Northwoods.GoXam.Part"/> properties
            when data binding in the <c>DataTemplate</c> for the <see cref="T:Northwoods.GoXam.Node"/>
            or <see cref="T:Northwoods.GoXam.Link"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.PartBinding.Data">
            <summary>
            Gets the model data that this <see cref="T:Northwoods.GoXam.Node"/> or
            <see cref="T:Northwoods.GoXam.Link"/> is bound to.
            </summary>
            <remarks>
            For example a minimal node template might be:
            <code>
              &lt;DataTemplate&gt;
                &lt;TextBlock Text="{Binding Path=Data}" /&gt;
              &lt;/DataTemplate&gt;
            </code>
            where the text string will the result of calling <c>ToString</c> on your node data object.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.PartBinding.Node">
            <summary>
            This returns <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Part"/> as a <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.PartBinding.Group">
            <summary>
            This returns <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Part"/> as a <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.PartBinding.Link">
            <summary>
            This returns <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Part"/> as a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.PartManager.VirtualLinkData">
            <summary>
            The value of <see cref="P:Northwoods.GoXam.Part.Data"/> for those <see cref="T:Northwoods.GoXam.Link"/>s
            that are bound to data in a model that does not support separate link data.
            </summary>
            <remarks>
            Because there are no data objects for links in models such as GraphModel and TreeModel,
            we keep track of links by instead remembering the two nodes that they connect.
            This also becomes the value for the <see cref="P:Northwoods.GoXam.PartManager.PartBinding.Data"/>
            property for links, so that link data templates can have access to the node data
            at either end of the link relationship.
            This class is not used when the model is <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.VirtualLinkData.Equals(System.Object)">
            <summary>
            Two <see cref="T:Northwoods.GoXam.PartManager.VirtualLinkData"/> objects are effectively the same if the <see cref="P:Northwoods.GoXam.PartManager.VirtualLinkData.From"/>
            and <see cref="P:Northwoods.GoXam.PartManager.VirtualLinkData.To"/> data objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.VirtualLinkData.GetHashCode">
            <summary>
            This is just the combination of the hash codes for the <see cref="P:Northwoods.GoXam.PartManager.VirtualLinkData.From"/> and <see cref="P:Northwoods.GoXam.PartManager.VirtualLinkData.To"/> data objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.PartManager.VirtualLinkData.ToString">
            <summary>
            This is might be useful for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Northwoods.GoXam.PartManager.VirtualLinkData.PropertyChanged">
            <summary>
            This implementation of INotifyPropertyChanged does nothing.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.VirtualLinkData.From">
            <summary>
            Gets the data object for the "from" end of this link relationship.
            </summary>
            <value>
            The value will not be a <see cref="T:Northwoods.GoXam.Node"/> unless the model is a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PartManager.VirtualLinkData.To">
            <summary>
            Gets the data object for the "to" end of this link relationship.
            </summary>
            <value>
            The value will not be a <see cref="T:Northwoods.GoXam.Node"/> unless the model is a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.PartManagerFilter">
            <summary>
            This enumeration lists ways in which the <see cref="T:Northwoods.GoXam.PartManager"/>
            filter methods can automatically restrict which model data get
            realized by actual <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <remarks>
            This is used as the value of the <see cref="P:Northwoods.GoXam.Diagram.Filter"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.PartManagerFilter.None">
            <summary>
            All model data get realized by nodes and links;
            this is the default value for <see cref="P:Northwoods.GoXam.Diagram.Filter"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PartManagerFilter.CollapsedTreeChildren">
            <summary>
            The children of collapsed tree nodes are not realized.
            </summary>
            <remarks>
            When one expands a tree <see cref="T:Northwoods.GoXam.Node"/>,
            <see cref="M:Northwoods.GoXam.PartManager.RealizeTreeChildren(Northwoods.GoXam.Node)"/> is called.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.PartManagerFilter.CollapsedSubGraphMembers">
            <summary>
            The members of collapsed group nodes are not realized.
            </summary>
            <remarks>
            When one expands a <see cref="T:Northwoods.GoXam.Group"/>,
            <see cref="M:Northwoods.GoXam.PartManager.RealizeSubGraphMembers(Northwoods.GoXam.Group)"/> is called.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.PrintManager">
            <summary>
            This class is responsible for printing a diagram.
            </summary>
            <remarks>
            <para>
            Call the <see cref="M:Northwoods.GoXam.PrintManager.Print(System.Windows.Controls.PrintDialog)"/> method to perform printing.
            If the area to be printed is large enough, it will print enough pages to cover the area.
            The sheets of paper may be taped together to produce a large drawing.
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            <para>
            Normally this will print all of the <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s
            in the <see cref="P:Northwoods.GoXam.PrintManager.Diagram"/> within the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>.
            You can specify what parts it prints by supplying the <see cref="P:Northwoods.GoXam.PrintManager.Parts"/> collection.
            You can also limit the area of the model that is printed by setting the <see cref="P:Northwoods.GoXam.PrintManager.Bounds"/> property.
            </para>
            <para>
            You can also control whether the <see cref="T:Northwoods.GoXam.Diagram"/>'s <c>Background</c> or
            any background <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/> is printed, by setting the
            <see cref="P:Northwoods.GoXam.PrintManager.PageOptions"/> property.  By default, only the grid is printed.
            If you want to have the grid and templates fill the whole page,
            set the <see cref="P:Northwoods.GoXam.PrintManager.PageOptions"/> property to include <see cref="F:Northwoods.GoXam.PrintPageOptions.Full"/>,
            for example: <c>PageOptions="FullGridBackground"</c>.
            </para>
            <para>
            The size on the page for the printed parts is governed by the <see cref="P:Northwoods.GoXam.PrintManager.Scale"/> property.
            You can set that property to zero to cause it to scale everything to fit on one page.
            Otherwise the number of pages that will be printed will depend on the area to be printed
            (determined by either the parts that are printed or the specified <see cref="P:Northwoods.GoXam.PrintManager.Bounds"/>)
            times the <see cref="P:Northwoods.GoXam.PrintManager.Scale"/>, as will fit in the size of each page minus the <see cref="P:Northwoods.GoXam.PrintManager.Margin"/>s.
            </para>
            <para>
            You can print decorations on each page by specifying the
            <see cref="P:Northwoods.GoXam.PrintManager.BackgroundTemplate"/> and/or the <see cref="P:Northwoods.GoXam.PrintManager.ForegroundTemplate"/>.
            These templates are applied to each page, data-bound to an instance of
            <see cref="T:Northwoods.GoXam.PrintManager.PageInfo"/> describing that page.
            This makes it easy to customize the header or footer.
            For example:
            <code>
            </code>
            &lt;go:Diagram . . .&gt;
              &lt;go:Diagram.PrintManager&gt;
                &lt;go:PrintManager&gt;
                  &lt;go:PrintManager.BackgroundTemplate&gt;
                    &lt;DataTemplate&gt;
                      &lt;go:SpotPanel&gt;
                        &lt;TextBlock Text="Confidential"
                                   Foreground="LightGray" FontSize="50"
                                   RenderTransformOrigin="0.5 0.5"&gt;
                          &lt;TextBlock.RenderTransform&gt;
                            &lt;RotateTransform Angle="-45" /&gt;
                          &lt;/TextBlock.RenderTransform&gt;
                        &lt;/TextBlock&gt;
                      &lt;/go:SpotPanel&gt;
                    &lt;/DataTemplate&gt;
                  &lt;/go:PrintManager.BackgroundTemplate&gt;
                &lt;/go:PrintManager&gt;
              &lt;/go:Diagram.PrintManager&gt;
            &lt;/go:Diagram&gt;
            </para>
            <para>
            You can see the definition of the standard <see cref="P:Northwoods.GoXam.PrintManager.ForegroundTemplate"/>
            in the Generic.XAML file that is in the docs subdirectory of the GoXam installation.
            It includes cut marks so that you can cut off the right sides and the bottoms
            of each of the pages that are not in the last column or the last row, allowing you
            to tape the sheets together to form a visually continuous diagram.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PrintManager.#ctor">
            <summary>
            Create a default <see cref="T:Northwoods.GoXam.PrintManager"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.PartsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.Parts"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.BoundsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.Bounds"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.ScaleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.Scale"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.MarginProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.Margin"/> dependency property
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.PageOptionsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.PageOptions"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.BackgroundTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.BackgroundTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.ForegroundTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.PrintManager.ForegroundTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintManager.CompletedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.PrintManager.Completed"/> routed event.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.PrintManager.OnCompleted">
            <summary>
            This is called after the print operation has completed.
            </summary>
            <remarks>
            If you override this, be sure to call the base method.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.PrintManager.Print(System.Windows.Controls.PrintDialog)">
            <summary>
            Print the diagram using the choices made in the given <c>PrintDialog</c>.
            </summary>
            <param name="dlg"></param>
        </member>
        <member name="M:Northwoods.GoXam.PrintManager.Paginate(System.Action{System.Windows.Documents.DocumentPaginator})">
            <summary>
            Use a <c>DocumentPaginator</c> in a safe manner.
            </summary>
            <param name="act">an <c>Action&lt;DocumentPaginator&gt;</c> that is called
            with a <see cref="P:Northwoods.GoXam.PrintManager.DocumentPaginator"/> with initialization work beforehand
            and cleanup work afterwards.
            </param>
            <remarks>
            Here is one way to create a print-preview capability,
            assuming <c>docViewer</c> is a <c>DocumentViewer</c> control
            and <c>tempfilename</c> is a temporary disk file path:
            <code>
            var xpsDocument = new XpsDocument(tempfilename, FileAccess.ReadWrite);
            myDiagram.PrintManager.Paginate(pager =&gt; {
              var dlg = new PrintDialog();
              pager.PageSize = new Size(dlg.PrintableAreaWidth, dlg.PrintableAreaHeight);
              var writer = XpsDocument.CreateXpsDocumentWriter(xpsDocument);
              writer.Write(pager);
              docViewer.Document = xpsDocument.GetFixedDocumentSequence();
            });
            </code>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.Parts">
            <summary>
            Gets or sets the collection of <see cref="T:Northwoods.GoXam.Part"/>s to be printed.
            </summary>
            <value>
            The default value is <c>null</c>.
            A <c>null</c> value or an empty collection causes it to print all printable parts in the diagram.
            All given <see cref="T:Northwoods.GoXam.Part"/>s must belong to the <see cref="P:Northwoods.GoXam.PrintManager.Diagram"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.Bounds">
            <summary>
            Gets or sets the area of the model to be printed, in model coordinates.
            </summary>
            <value>
            The default value is <c>Rect.Empty</c>.
            A value of <c>Rect.Empty</c> causes it to print either
            the whole <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> if <see cref="P:Northwoods.GoXam.PrintManager.Parts"/> is null or empty,
            or else the union of the bounds of the given collection of <see cref="P:Northwoods.GoXam.PrintManager.Parts"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.Scale">
            <summary>
            Gets or sets the scale factor at which everything is printed.
            </summary>
            <value>
            The default value is 1.
            A value of <c>Double.NaN</c> causes it to print at a scale at which the printed area of the diagram will fit on a single page.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.Margin">
            <summary>
            Gets or sets the margins inside the page size, around the printed area.
            </summary>
            <value>
            The default value is a <c>Thickness</c> of 50 on all sides.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageOptions">
            <summary>
            Gets or sets how printing fills each page.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.PrintPageOptions.GridBackground"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.BackgroundTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> printed as the background for each page.
            </summary>
            <value>
            The default value is null -- this prints no per-page decorations.
            </value>
            <remarks>
            <para>
            The background elements are printed behind any <see cref="T:Northwoods.GoXam.GridPattern"/>.
            </para>
            <para>
            The background <c>DataTemplate</c> is data-bound to an instance of
            <see cref="T:Northwoods.GoXam.PrintManager.PageInfo"/> that describes the current page.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.ForegroundTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> printed as the foreground for each page.
            </summary>
            <value>
            The default template prints cut marks and page numbers.
            You can see its definition in the Generic.XAML file in the docs subdirectory
            of the GoXam installation.
            </value>
            <remarks>
            <para>
            The foreground elements are printed in front of all <see cref="T:Northwoods.GoXam.Part"/>s.
            </para>
            <para>
            The foreground <c>DataTemplate</c> is data-bound to an instance of
            <see cref="T:Northwoods.GoXam.PrintManager.PageInfo"/> that describes the current page.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> for which this <see cref="T:Northwoods.GoXam.PrintManager"/> performs printing.
            </summary>
            <value>
            This value is automatically set by the <see cref="P:Northwoods.GoXam.Diagram.PrintManager"/> setter.
            </value>
        </member>
        <member name="E:Northwoods.GoXam.PrintManager.Completed">
            <summary>
            This RoutedEvent occurs when printing is completed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.DocumentPaginator">
            <summary>
            Do not use this property, but call <see cref="M:Northwoods.GoXam.PrintManager.Paginate(System.Action{System.Windows.Documents.DocumentPaginator})"/>
            to use a <c>DocumentPaginator</c> safely.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.PrintManager.PageInfo">
            <summary>
            This read-only class provides information about the current page while printing.
            </summary>
            <remarks>
            <para>
            Each page constructs elements for the <see cref="P:Northwoods.GoXam.PrintManager.BackgroundTemplate"/> and <see cref="P:Northwoods.GoXam.PrintManager.ForegroundTemplate"/>
            that are data-bound to an instance of this class.
            </para>
            <para>
            For convenience, the integer index properties are one-based, not zero-based.
            This makes it easy to show something like "Page 4 of 4".
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Diagram">
            <summary>
            Gets a reference to the <see cref="T:Northwoods.GoXam.Diagram"/> being printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Index">
            <summary>
            Gets a one-based index of the current page in the total <see cref="P:Northwoods.GoXam.PrintManager.PageInfo.Count"/> of pages to be printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Count">
            <summary>
            Gets the total number of pages to be printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Column">
            <summary>
            Gets a one-based index of the current page in the total <see cref="P:Northwoods.GoXam.PrintManager.PageInfo.ColumnCount"/> of pages to be printed for each row.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.ColumnCount">
            <summary>
            Gets the total number of pages to be printed in each row.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Row">
            <summary>
            Gets a one-based index of the current page in the total <see cref="P:Northwoods.GoXam.PrintManager.PageInfo.RowCount"/> of pages to be printed for each column.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.RowCount">
            <summary>
            Gets the total number of pages to be printed in each column.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.TotalBounds">
            <summary>
            Gets the bounds, in model coordinates, of the total area of the diagram being printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.ViewportBounds">
            <summary>
            Gets the bounds, in model coordinates, of the area being printed for this page.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.PageBounds">
            <summary>
            Gets the bounds, in model coordinates, of the whole page being printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Scale">
            <summary>
            Gets the actual scale at which the diagram is being printed.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Size">
            <summary>
            Gets the size of the current page, in device-independent pixels.
            </summary>
            <remarks>
            Not all of the page might actually be printed, depending on the capabilities of the printer.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.PrintManager.PageInfo.Viewport">
            <summary>
            Gets the size and location of the diagram area (within the margins), in device-independent pixels.
            </summary>
            <remarks>
            A <see cref="T:Northwoods.GoXam.SpotPanel"/> in the template will be measured and arranged to get these bounds.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.PrintPageOptions">
            <summary>
            This enumeration provides options for controlling how printing occupies each page.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.None">
            <summary>
            Only print the requested area of the diagram or the given parts.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.Background">
            <summary>
            Print the <see cref="T:Northwoods.GoXam.Diagram"/>'s <c>Background</c>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.Grid">
            <summary>
            Print any background grid pattern that the diagram may have.
            (<see cref="P:Northwoods.GoXam.Diagram.GridVisible"/> must also be true.)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.GridBackground">
            <summary>
            Print both the <see cref="T:Northwoods.GoXam.Diagram"/>'s <c>Background</c>
            and any visible <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.Full">
            <summary>
            Print over the whole page, not just along the left or top sides for those
            pages that are in the last column or row.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.FullBackground">
            <summary>
            Print over the whole page and include the <see cref="T:Northwoods.GoXam.Diagram"/>'s <c>Background</c>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.FullGrid">
            <summary>
            Print over the whole page and include the <see cref="T:Northwoods.GoXam.Diagram"/>'s
            <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/>, if <see cref="P:Northwoods.GoXam.Diagram.GridVisible"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.PrintPageOptions.FullGridBackground">
            <summary>
            Print over the whole page and include the <see cref="T:Northwoods.GoXam.Diagram"/>'s
            <see cref="P:Northwoods.GoXam.Diagram.GridPattern"/> and Background.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Spot">
            <summary>
            A spot represents a relative point from (0,0) to (1,1) within the bounds of an element, plus an absolute offset.
            </summary>
            <remarks>
            <para>
            A spot can represent a particular point (such as <see cref="F:Northwoods.GoXam.Spot.TopLeft"/> or <c>new Spot(0.25, 0.25)</c>),
            or a particular side (such as <see cref="F:Northwoods.GoXam.Spot.RightSide"/>)
            or multiple sides (such as <see cref="F:Northwoods.GoXam.Spot.TopBottomSides"/>),
            or when equal to <see cref="F:Northwoods.GoXam.Spot.None"/> no particular point at all.
            </para>
            <para>
            The <see cref="P:Northwoods.GoXam.Spot.X"/> and <see cref="P:Northwoods.GoXam.Spot.Y"/> values denote the fractional distance
            of the spot point along the dimensions of the element's width and height.
            Zero is at the left or the top of the element;
            one is at the right or the bottom of the element.
            The values must be between 0 and 1.
            Values that are <c>NaN</c> are reserved for special spots such as
            <see cref="F:Northwoods.GoXam.Spot.None"/> or the spots that represent sides.
            </para>
            <para>
            Once the point is determined by the <see cref="P:Northwoods.GoXam.Spot.X"/> and <see cref="P:Northwoods.GoXam.Spot.Y"/>
            values within a particular bounding rectangle, the <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>
            and <see cref="P:Northwoods.GoXam.Spot.OffsetY"/> values are added to determine the final point.
            The offset values may be negative.
            Negative offset values when the <c>(X,Y)</c> are near the left and/or top
            may result in a point that is outside of the bounds of the element.
            Positive offset values when the <c>(X,Y)</c> are near the right and/or bottom
            may also result in a point that is outside of the bounds of the element.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Spot.None">
            <summary>
            Use this <see cref="T:Northwoods.GoXam.Spot"/> value to indicate no particular spot --
            code looking for a particular point on an element will need to do their
            own calculations to determine the desired point depending on the circumstances.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.Default">
            <summary>
            Use this <see cref="T:Northwoods.GoXam.Spot"/> value to indicate that the real spot value is elsewhere.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopLeft">
            <summary>
            The specific point at the top-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopCenter">
            <summary>
            The specific point at the center of the top side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.MiddleTop">
            <summary>
            A synonym for <see cref="F:Northwoods.GoXam.Spot.TopCenter"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopRight">
            <summary>
            The specific point at the top-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.MiddleLeft">
            <summary>
            The specific point at the middle of the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.Center">
            <summary>
            The specific point at the very center of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.MiddleRight">
            <summary>
            The specific point at the middle of the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomLeft">
            <summary>
            The specific point at the bottom-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomCenter">
            <summary>
            The specific point at the middle of the bottom side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.MiddleBottom">
            <summary>
            A synonym for <see cref="F:Northwoods.GoXam.Spot.BottomCenter"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomRight">
            <summary>
            The specific point at the bottom-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopSide">
            <summary>
            The set of points at the top side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.LeftSide">
            <summary>
            The set of points at the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.RightSide">
            <summary>
            The set of points at the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomSide">
            <summary>
            The set of points at the bottom side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopBottomSides">
            <summary>
            The set of points at the top or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.LeftRightSides">
            <summary>
            The set of points at the left or right sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopLeftSides">
            <summary>
            The set of points at the top or left sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.TopRightSides">
            <summary>
            The set of points at the top or right sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomLeftSides">
            <summary>
            The set of points at the left or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.BottomRightSides">
            <summary>
            The set of points at the right or bottom sides of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.NotTopSide">
            <summary>
            The set of points on all sides of the bounding rectangle except the top side.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.NotLeftSide">
            <summary>
            The set of points on all sides of the bounding rectangle except the left side.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.NotRightSide">
            <summary>
            The set of points on all sides of the bounding rectangle except the right side.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.NotBottomSide">
            <summary>
            The set of points on all sides of the bounding rectangle except the bottom side.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Spot.AllSides">
            <summary>
            The set of points on all sides of the bounding rectangle.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Spot.#ctor(System.Double,System.Double)">
            <summary>
            Create a spot defining a particular relative point in a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Northwoods.GoXam.Spot.#ctor(System.Windows.Point)">
            <summary>
            Create a spot defining a particular relative point in a rectangle.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Northwoods.GoXam.Spot.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a spot defining a particular relative point in a rectangle plus an offset.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="offx"></param>
            <param name="offy"></param>
        </member>
        <member name="M:Northwoods.GoXam.Spot.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Create a spot defining a particular relative point in a rectangle plus an offset.
            </summary>
            <param name="location"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Northwoods.GoXam.Spot.op_Equality(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)">
            <summary>
            Two spots are equal if all four property values are the same
            (<see cref="P:Northwoods.GoXam.Spot.X"/>, <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>).
            </summary>
            <param name="spot1"></param>
            <param name="spot2"></param>
            <returns>true if the two spots are equal</returns>
            <remarks>
            If one spot's <see cref="P:Northwoods.GoXam.Spot.X"/> or <see cref="P:Northwoods.GoXam.Spot.Y"/> is <c>NaN</c>,
            the other spot's corresponding property must also be <c>NaN</c>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Spot.op_Inequality(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)"/>
            <seealso cref="M:Northwoods.GoXam.Spot.Equals(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)"/>
        </member>
        <member name="M:Northwoods.GoXam.Spot.op_Inequality(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)">
            <summary>
            Inequality of spots.
            </summary>
            <param name="spot1"></param>
            <param name="spot2"></param>
            <returns>true if the two spots are unequal</returns>
            <seealso cref="M:Northwoods.GoXam.Spot.op_Equality(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)"/>
            <seealso cref="M:Northwoods.GoXam.Spot.Equals(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)"/>
        </member>
        <member name="M:Northwoods.GoXam.Spot.Equals(Northwoods.GoXam.Spot,Northwoods.GoXam.Spot)">
            <summary>
            Two spots are equal if all four property values are the same
            (<see cref="P:Northwoods.GoXam.Spot.X"/>, <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>).
            </summary>
            <param name="spot1"></param>
            <param name="spot2"></param>
            <returns>true if the two spots are equal</returns>
            <remarks>
            If one spot's <see cref="P:Northwoods.GoXam.Spot.X"/> or <see cref="P:Northwoods.GoXam.Spot.Y"/> is <c>NaN</c>,
            the other spot's corresponding property must also be <c>NaN</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.Equals(System.Object)">
            <summary>
            Two spots are equal if all four property values are the same
            (<see cref="P:Northwoods.GoXam.Spot.X"/>, <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>).
            </summary>
            <param name="obj">any <c>Object</c></param>
            <returns>true if the other object is a <see cref="T:Northwoods.GoXam.Spot"/> and they are equal</returns>
            <remarks>
            If one spot's <see cref="P:Northwoods.GoXam.Spot.X"/> or <see cref="P:Northwoods.GoXam.Spot.Y"/> is <c>NaN</c>,
            the other spot's corresponding property must also be <c>NaN</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.Equals(Northwoods.GoXam.Spot)">
            <summary>
            Two spots are equal if all four property values are the same
            (<see cref="P:Northwoods.GoXam.Spot.X"/>, <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>).
            </summary>
            <param name="value">a <see cref="T:Northwoods.GoXam.Spot"/></param>
            <returns>true if the two spots are equal</returns>
            <remarks>
            If one spot's <see cref="P:Northwoods.GoXam.Spot.X"/> or <see cref="P:Northwoods.GoXam.Spot.Y"/> is <c>NaN</c>,
            the other spot's corresponding property must also be <c>NaN</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.GetHashCode">
            <summary>
            The hash code is a combination of all four property values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Spot.Parse(System.String)">
            <summary>
            Convert a string into a <see cref="T:Northwoods.GoXam.Spot"/> value.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <remarks>
            <para>
            The string can be up to four numbers separated by spaces.
            The first number is <see cref="P:Northwoods.GoXam.Spot.X"/>,
            the second number is <see cref="P:Northwoods.GoXam.Spot.Y"/>,
            the third number is <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>,
            the fourth number is <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>.
            Missing numbers default to zero.
            </para>
            <para>
            The string can also be any of the named special spot values,
            such as "None", "Center", "TopLeft", "TopSide", "LeftRightSides",
            "AllSides", or any other of the predefined field names that are spots.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.Parse(System.String,System.IFormatProvider)">
            <summary>
            Convert a string into a <see cref="T:Northwoods.GoXam.Spot"/> value.
            </summary>
            <param name="source"></param>
            <param name="provider"></param>
            <returns></returns>
            <remarks>
            <para>
            The string can be up to four numbers separated by spaces.
            The first number is <see cref="P:Northwoods.GoXam.Spot.X"/>,
            the second number is <see cref="P:Northwoods.GoXam.Spot.Y"/>,
            the third number is <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>,
            the fourth number is <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>.
            Missing numbers default to zero.
            </para>
            <para>
            The string can also be any of the named special spot values,
            such as "None", "Center", "TopLeft", "TopSide", "LeftRightSides",
            "AllSides", or any other of the predefined field names that are spots.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.ToString">
            <summary>
            Produce a string representation of a <see cref="T:Northwoods.GoXam.Spot"/>.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            For special spot values, this results in the name of the spot,
            such as "None", "Center", "TopLeft", "TopSide", "LeftRightSides",
            "AllSides", or any other of the predefined field names that are spots.
            </para>
            <para>
            For regular specific spots, this results in a string consisting of
            four numbers separated by spaces.  The values of <see cref="P:Northwoods.GoXam.Spot.X"/>,
            <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, and <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>,
            are written in that order.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.ToString(System.IFormatProvider)">
            <summary>
            Produce a string representation of a <see cref="T:Northwoods.GoXam.Spot"/>.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            For special spot values, this results in the name of the spot,
            such as "None", "Center", "TopLeft", "TopSide", "LeftRightSides",
            "AllSides", or any other of the predefined field names that are spots.
            </para>
            <para>
            For regular specific spots, this results in a string consisting of
            four numbers separated by spaces.  The values of <see cref="P:Northwoods.GoXam.Spot.X"/>,
            <see cref="P:Northwoods.GoXam.Spot.Y"/>, <see cref="P:Northwoods.GoXam.Spot.OffsetX"/>, and <see cref="P:Northwoods.GoXam.Spot.OffsetY"/>,
            are written in that order.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.PointInRect(System.Windows.Rect)">
            <summary>
            Given a rectangle, return the specific point in or near the rectangle that this spot is at.
            </summary>
            <param name="r">a <c>Rect</c></param>
            <returns>a <c>Point</c></returns>
            <remarks>
            The result is meaningless if <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.RectForPoint(System.Windows.Point,System.Windows.Size)">
            <summary>
            Given a point and the size of the desired rectangle, return the rectangle
            for which this spot is at that point.
            </summary>
            <param name="p">a <c>Point</c></param>
            <param name="sz">a <c>Size</c></param>
            <returns>a <c>Rect</c></returns>
            <remarks>
            The result is meaningless if <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Spot.IncludesSide(Northwoods.GoXam.Spot)">
            <summary>
            This predicate is true if this <see cref="T:Northwoods.GoXam.Spot"/> is a side that
            includes the side(s) given by <paramref name="side"/>.
            </summary>
            <param name="side">a <see cref="T:Northwoods.GoXam.Spot"/> that <see cref="P:Northwoods.GoXam.Spot.IsSide"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Spot.GetSide(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Produce <see cref="T:Northwoods.GoXam.Spot"/> that denotes one or more sides,
            based on which sides should be included.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns>
            If all of the arguments are false, this returns <see cref="F:Northwoods.GoXam.Spot.None"/>;
            otherwise the resulting spot will be <see cref="P:Northwoods.GoXam.Spot.IsSide"/>.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.Spot.X">
            <summary>
            The fractional point along the X-axis.
            </summary>
            <value>must be between zero and one, inclusive</value>
        </member>
        <member name="P:Northwoods.GoXam.Spot.Y">
            <summary>
            The fractional point along the Y-axis.
            </summary>
            <value>must be between zero and one, inclusive</value>
        </member>
        <member name="P:Northwoods.GoXam.Spot.OffsetX">
            <summary>
            The final additional offset along the X-axis.
            </summary>
            <value>may be negative or positive of any reasonable size, but must be a number and not infinity</value>
        </member>
        <member name="P:Northwoods.GoXam.Spot.OffsetY">
            <summary>
            The final additional offset along the Y-axis.
            </summary>
            <value>may be negative or positive of any reasonable size, but must be a number and not infinity</value>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsSpot">
            <summary>
            True if this spot represents a specific spot, not a side nor <see cref="F:Northwoods.GoXam.Spot.None"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsNoSpot">
            <summary>
            True if this is an unspecific special spot, such as <see cref="F:Northwoods.GoXam.Spot.None"/> or one of the sides.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsNone">
            <summary>
            True if and only if this spot is equal to <see cref="F:Northwoods.GoXam.Spot.None"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsNotNone">
            <summary>
            True if and only if this spot is different than <see cref="F:Northwoods.GoXam.Spot.None"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsDefault">
            <summary>
            True if and only if this spot is equal to <see cref="F:Northwoods.GoXam.Spot.Default"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Spot.IsSide">
            <summary>
            True if this is a special spot referring to one (or more) of the sides.
            </summary>
            <remarks>
            This is false if the spot is <see cref="F:Northwoods.GoXam.Spot.None"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Spot.WithoutOffset">
            <summary>
            Return a new spot with the same <see cref="P:Northwoods.GoXam.Spot.X"/> and <see cref="P:Northwoods.GoXam.Spot.Y"/> values,
            but with offsets of zero.
            </summary>
            <remarks>
            The result is meaningless if <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Spot.Opposite">
            <summary>
            Return a new spot that is opposite this spot.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.GoXam.Spot.X"/> and <see cref="P:Northwoods.GoXam.Spot.Y"/> values will be an equal distance
            away from the center on the other side of the center.
            The <see cref="P:Northwoods.GoXam.Spot.OffsetX"/> and <see cref="P:Northwoods.GoXam.Spot.OffsetY"/> values are also negated.
            </remarks>
            <remarks>
            The result is meaningless if <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/> is true.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.SpotPanel">
            <summary>
            This panel is useful for positioning child elements relative either to the bounds of a particular child
            or to a computed rectangle.
            </summary>
            <remarks>
            <para>
            The child elements of a <c>SpotPanel</c> are positioned according the values of two attached properties:
            <c>Spot</c> and <c>Alignment</c>.  Both property values are of type <see cref="T:Northwoods.GoXam.Spot"/>.
            Typically each child will at least specify a value for the <c>Spot</c> attached property,
            and will also specify a value for <c>Alignment</c> for minor adjustments in the position.
            </para>
            <para>
            The value of <see cref="M:Northwoods.GoXam.SpotPanel.GetSpot(System.Windows.DependencyObject)"/> specifies a point in a rectangle where the element should be positioned.
            The value of <see cref="M:Northwoods.GoXam.SpotPanel.GetAlignment(System.Windows.DependencyObject)"/> specifies what point of the element should be positioned at
            the spot point of the rectangle.
            Both properties default to <see cref="F:Northwoods.GoXam.Spot.Center"/> -- the center of the element is centered inside
            the rectangle.
            (This panel ignores the <c>FrameworkElement.HorizontalAlignment</c> and <c>VerticalAlignment</c> properties.)
            </para>
            <para>
            The rectangle used for determining spot points is
            given by the bounds of the child element of the panel that has the <see cref="F:Northwoods.GoXam.SpotPanel.MainProperty"/> set to true.
            If there is no such element, the value of <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> is used instead.
            By default <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> will return the desired size of the first child.
            However, the <see cref="T:Northwoods.GoXam.GroupPanel"/> class overrides the <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> method
            to return values unrelated to any of this panel's children.
            </para>
            <para>
            Here's an example of a <c>SpotPanel</c> as a <c>DataTemplate</c> for a node.
            This places text at various points around the main <c>Rectangle</c>.
            <code>
              &lt;go:SpotPanel go:Node.Resizable="True" go:Node.SelectionElementName="Rectangle"&gt;
                &lt;Rectangle x:Name="Rectangle" go:SpotPanel.Main="True" Stroke="Black" StrokeThickness="1" Width="100" Height="100" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="TopLeft" go:SpotPanel.Alignment="TopLeft" Text="inside" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="TopLeft" go:SpotPanel.Alignment="BottomLeft" Text="atop" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="TopLeft" go:SpotPanel.Alignment="TopRight" Text="aside" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="Center" go:SpotPanel.Alignment="Center" Text="center" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="1 0.7 -20 0" Text="-20" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="1 0.7 0 0" Text="0" /&gt;
                &lt;TextBlock go:SpotPanel.Spot="1 0.7 20 0" Text="+20" /&gt;
              &lt;/go:SpotPanel&gt;
            </code>
            </para>
            <para>
            A <c>SpotPanel</c> has a special usage when it is the <see cref="P:Northwoods.GoXam.Node.LocationElement"/>
            of an <see cref="T:Northwoods.GoXam.Adornment"/> and there is no child that is the "Main" child --
            <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> returns the size of the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.SpotPanel.MainProperty">
            <summary>
            Identifies the <c>Main</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.GetMain(System.Windows.DependencyObject)">
            <summary>
            Gets whether the element is considered the "main" element for the <see cref="T:Northwoods.GoXam.SpotPanel"/>,
            around which all of the sibling elements are positioned.
            </summary>
            <param name="d">this should be a child of a <see cref="T:Northwoods.GoXam.SpotPanel"/></param>
            <returns>This defaults to false.</returns>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.SetMain(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether the element is considered the "main" element for the <see cref="T:Northwoods.GoXam.SpotPanel"/>,
            around which all of the sibling elements are positioned.
            </summary>
            <param name="d">this should be a child of a <see cref="T:Northwoods.GoXam.SpotPanel"/></param>
            <param name="v">only one such child of the <see cref="T:Northwoods.GoXam.SpotPanel"/> should have this property set to true</param>
        </member>
        <member name="F:Northwoods.GoXam.SpotPanel.SpotProperty">
            <summary>
            Identifies the <c>Spot</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.GetSpot(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Spot"/> at which the element should be positioned.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <returns>This defaults to <see cref="F:Northwoods.GoXam.Spot.Center"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.SetSpot(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the <see cref="T:Northwoods.GoXam.Spot"/> at which the element should be positioned.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <param name="v">
            a <see cref="T:Northwoods.GoXam.Spot"/> for which <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> is true;
            the panel assumes <see cref="F:Northwoods.GoXam.Spot.Center"/> otherwise
            </param>
        </member>
        <member name="F:Northwoods.GoXam.SpotPanel.AlignmentProperty">
            <summary>
            Identifies the <c>Alignment</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.GetAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Spot"/> point of the element that should be positioned at the <see cref="M:Northwoods.GoXam.SpotPanel.GetSpot(System.Windows.DependencyObject)"/> point.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <returns>This defaults to <see cref="F:Northwoods.GoXam.Spot.Center"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.SetAlignment(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets the <see cref="T:Northwoods.GoXam.Spot"/> point of the element that should be positioned at the <see cref="M:Northwoods.GoXam.SpotPanel.GetSpot(System.Windows.DependencyObject)"/> point.
            </summary>
            <param name="d">a <c>UIElement</c></param>
            <param name="v">
            a <see cref="T:Northwoods.GoXam.Spot"/> for which <see cref="P:Northwoods.GoXam.Spot.IsSpot"/> is true;
            the panel assumes <see cref="F:Northwoods.GoXam.Spot.Center"/> otherwise
            </param>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.ComputeBorder">
            <summary>
            Compute the rectangle in which the elements should be positioned.
            </summary>
            <returns>
            If this panel is in an <see cref="T:Northwoods.GoXam.Adornment"/> and is its <see cref="P:Northwoods.GoXam.Node.LocationElement"/>,
            return the <see cref="P:Northwoods.GoXam.Adornment.AdornedElement"/>'s size.
            Otherwise return a <c>Rect</c> based on this first child's <c>DesiredSize</c>.
            Only the Width and Height of the Rect matter in the calculations performed by
            <see cref="M:Northwoods.GoXam.SpotPanel.MeasureOverride(System.Windows.Size)"/> and <see cref="M:Northwoods.GoXam.SpotPanel.ArrangeOverride(System.Windows.Size)"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure all of the children and return the size of the union of the bounds of the
            elements positioned according to the <c>Spot</c> and <c>Alignment</c> attached properties
            and the size of the element with the <c>Main</c> attached property.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
            <remarks>
            If there is no child element with a <c>Main</c> attached property value of true,
            this actually calls <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> to determine the desired rectangle
            about which to position the children.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.SpotPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange all of the children according to the <c>Spot</c> and <c>Alignment</c> attached properties
            and the size of the first child with the <c>Main</c> attached property.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
            <remarks>
            If there is no child element with a <c>Main</c> attached property value of true,
            this actually calls <see cref="M:Northwoods.GoXam.SpotPanel.ComputeBorder"/> to determine the desired rectangle
            about which to position the children.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Layer">
            <summary>
            A <c>Layer</c> is a collection of <see cref="T:Northwoods.GoXam.Node"/>s or <see cref="T:Northwoods.GoXam.Link"/>s
            that are to be displayed in front of or behind the parts in other layers.
            </summary>
            <remarks>
            <para>
            Each layer can only be a child of a <see cref="T:Northwoods.GoXam.DiagramPanel"/> -- they cannot be nested.
            There are two classes inheriting from this abstract <c>Layer</c> class: <see cref="T:Northwoods.GoXam.NodeLayer"/>
            and <see cref="T:Northwoods.GoXam.LinkLayer"/>, which hold only nodes or only links, respectively.
            </para>
            <para>
            Each layer has an <see cref="P:Northwoods.GoXam.Layer.Id"/> property that is used to identify the layer
            in the <see cref="T:Northwoods.GoXam.DiagramPanel"/> amongst multiple layers of the same type.
            </para>
            <para>
            There are many properties, named "Allow...", that control what operations the user
            may perform on the parts held by this layer.  These correspond to the same named
            properties on <see cref="T:Northwoods.GoXam.Diagram"/> that govern the behavior for all parts in all layers.
            Furthermore for some of these properties there are corresponding properties on
            <see cref="T:Northwoods.GoXam.Part"/>, named "...able", that govern the behavior for that individual part.
            For example, the <see cref="P:Northwoods.GoXam.Layer.AllowCopy"/> property corresponds to
            <see cref="P:Northwoods.GoXam.Diagram.AllowCopy"/> and to the property
            <see cref="P:Northwoods.GoXam.Part.Copyable"/>.
            The <see cref="M:Northwoods.GoXam.Part.CanCopy"/> predicate is false if any of
            these properties is false.
            </para>
            <para>
            You may not apply any transforms to a <c>Layer</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Layer.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Every <see cref="T:Northwoods.GoXam.Layer"/>'s parent must be a <see cref="T:Northwoods.GoXam.DiagramPanel"/>, if it has any parent.
            </summary>
            <param name="oldParent"></param>
            <remarks>
            For example, this will detect a <c>&lt;NodeLayer&gt;</c> inside a <c>&lt;DataTemplate&gt;</c>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layer.IdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.Id"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.IsTemporaryProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.IsTemporary"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowCopyProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowCopy"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowDeleteProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowDelete"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowEditProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowEdit"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowGroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowGroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowUngroupProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowUngroup"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowLinkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowLink"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowRelinkProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowRelink"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowMoveProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowMove"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowPrintProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowPrint"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowReshapeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowReshape"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowResizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowResize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowRotateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowRotate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layer.AllowSelectProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Layer.AllowSelect"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Layer.FindElementAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0})">
            <summary>
            Search the parts in this layer that are at a given point that meet a given predicate,
            and return the first element that matches.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method returns that element.
            </param>
            <returns>an element of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Layer.FindElementsAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0})">
            <summary>
            Search the parts in this layer that are at a given point that meet a given predicate,
            and return a collection of elements that match.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method includes that element in its results.
            </param>
            <returns>a collection of elements of type <typeparamref name="T"/></returns>
        </member>
        <member name="P:Northwoods.GoXam.Layer.Diagram">
            <summary>
            Get the <see cref="T:Northwoods.GoXam.Diagram"/> that this layer is in.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Layer.Panel"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.Panel">
            <summary>
            Get the <see cref="T:Northwoods.GoXam.DiagramPanel"/> that this layer is in.
            </summary>
            <seealso cref="P:Northwoods.GoXam.Layer.Diagram"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.Id">
            <summary>
            Gets or sets a string naming the layer.
            </summary>
            <value>
            The default value is the empty string.
            </value>
            <remarks>
            You need to ensure that in one diagram all layers of the same type have unique <see cref="P:Northwoods.GoXam.Layer.Id"/> names.
            At the current time this requirement is not enforced.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layer.IsTemporary">
            <summary>
            Gets or sets whether the layer holds "temporary" objects, such as selection or tool adornments
            or other parts temporarily displayed by tools.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The normal <see cref="T:Northwoods.GoXam.DiagramPanel"/> has temporary-object layers
            for tools and for adornments.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowCopy">
            <summary>
            Gets or sets whether the user may copy
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowCopy"/>
            <seealso cref="P:Northwoods.GoXam.Part.Copyable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanCopy"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowDelete">
            <summary>
            Gets or sets whether the user may delete
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowDelete"/>
            <seealso cref="P:Northwoods.GoXam.Part.Deletable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanDelete"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowEdit">
            <summary>
            Gets or sets whether the user may edit in-place the text of
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowEdit"/>
            <seealso cref="P:Northwoods.GoXam.Part.Editable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanEdit"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowGroup">
            <summary>
            Gets or sets whether the user may group
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowGroup"/>
            <seealso cref="P:Northwoods.GoXam.Part.Groupable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanGroup"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowUngroup">
            <summary>
            Gets or sets whether the user may ungroup
            the groups that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowUngroup"/>
            <seealso cref="P:Northwoods.GoXam.Group.Ungroupable"/>
            <seealso cref="M:Northwoods.GoXam.Group.CanUngroup"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowLink">
            <summary>
            Gets or sets whether the user may link
            the nodes that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowLink"/>
            <seealso cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidFrom(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>
            <seealso cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidTo(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowRelink">
            <summary>
            Gets or sets whether the user may relink
            the links that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowRelink"/>
            <seealso cref="P:Northwoods.GoXam.Link.RelinkableFrom"/>
            <seealso cref="P:Northwoods.GoXam.Link.RelinkableTo"/>
            <seealso cref="M:Northwoods.GoXam.Link.CanRelinkFrom"/>
            <seealso cref="M:Northwoods.GoXam.Link.CanRelinkTo"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowMove">
            <summary>
            Gets or sets whether the user may move
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowMove"/>
            <seealso cref="P:Northwoods.GoXam.Part.Movable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanMove"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowPrint">
            <summary>
            Gets or sets whether the user may print
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowPrint"/>
            <seealso cref="P:Northwoods.GoXam.Part.Printable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanPrint"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowReshape">
            <summary>
            Gets or sets whether the user may reshape
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowReshape"/>
            <seealso cref="P:Northwoods.GoXam.Part.Reshapable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanReshape"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowResize">
            <summary>
            Gets or sets whether the user may resize
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowResize"/>
            <seealso cref="P:Northwoods.GoXam.Part.Resizable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanResize"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowRotate">
            <summary>
            Gets or sets whether the user may rotate
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowRotate"/>
            <seealso cref="P:Northwoods.GoXam.Part.Rotatable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanRotate"/>
        </member>
        <member name="P:Northwoods.GoXam.Layer.AllowSelect">
            <summary>
            Gets or sets whether the user may select
            the parts that are in this layer.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.GoXam.Diagram.AllowSelect"/>
            <seealso cref="P:Northwoods.GoXam.Part.Selectable"/>
            <seealso cref="M:Northwoods.GoXam.Part.CanSelect"/>
        </member>
        <member name="T:Northwoods.GoXam.NodeLayer">
            <summary>
            This class holds only <see cref="T:Northwoods.GoXam.Node"/>s together in one layer.
            </summary>
            <remarks>
            <para>
            There can be any mixture of node classes, including <see cref="T:Northwoods.GoXam.Group"/> and <see cref="T:Northwoods.GoXam.Adornment"/>.
            It automatically sorts the nodes within the layer so that each <see cref="T:Northwoods.GoXam.Group"/> is behind
            its own children in this layer.
            </para>
            <para>
            You may not apply any transforms to a <c>NodeLayer</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.NodeLayer.ToString">
            <summary>
            For debugging convenience.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodeLayer.ArrangeCore(System.Windows.Rect)">
            <summary>
            Arrange all nodes that have a defined <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            </summary>
            <param name="finalRect"></param>
        </member>
        <member name="M:Northwoods.GoXam.NodeLayer.GetVisualChild(System.Int32)">
            <summary>
            Get the nth node.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.NodeLayer.Add(Northwoods.GoXam.Node)">
            <summary>
            Add a <see cref="T:Northwoods.GoXam.Node"/> to this layer.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            This is infrequently called.
            You normally should set the part's <see cref="P:Northwoods.GoXam.Part.LayerName"/>
            in order to specify or change the layer that a part will be in.
            </para>
            <para>
            This does not modify the model.
            It just changes the layer that the node is in,
            thereby making the node eligible to be seen by the user.
            If it had been part of another layer, it is removed from that other layer first.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.NodeLayer.Remove(Northwoods.GoXam.Node)">
            <summary>
            Remove a <see cref="T:Northwoods.GoXam.Node"/> from this layer.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            This is infrequently called.
            You normally should set the <see cref="P:Northwoods.GoXam.Part.LayerName"/>
            in order to specify or change the layer that a part will be in.
            </para>
            <para>
            This does not modify the model.
            It just changes the layer that the node is in,
            removing the node from the visual tree.
            If it was not part of this layer, nothing happens.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.NodeLayer.Nodes">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Node"/>s that this layer holds.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.NodeLayer.VisualChildrenCount">
            <summary>
            Return the number of visible nodes in this layer.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkLayer">
            <summary>
            This class holds only <see cref="T:Northwoods.GoXam.Link"/>s together in one layer.
            </summary>
            <remarks>
            <para>
            You may not apply any transforms to a <c>LinkLayer</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkLayer.ToString">
            <summary>
            For debugging convenience.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkLayer.ArrangeCore(System.Windows.Rect)">
            <summary>
            Arrange all links that have a defined <see cref="P:Northwoods.GoXam.Part.Bounds"/>.
            </summary>
            <param name="finalRect"></param>
        </member>
        <member name="M:Northwoods.GoXam.LinkLayer.GetVisualChild(System.Int32)">
            <summary>
            Get the nth link.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkLayer.Add(Northwoods.GoXam.Link)">
            <summary>
            Add a <see cref="T:Northwoods.GoXam.Link"/> to this layer.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            This is infrequently called.
            You normally should set the part's <see cref="P:Northwoods.GoXam.Part.LayerName"/>
            in order to specify or change the layer that a part will be in.
            </para>
            <para>
            This does not modify the model.
            It just changes the layer that the link is in,
            thereby making the link eligible to be seen by the user.
            If it had been part of another layer, it is removed from that other layer first.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkLayer.Remove(Northwoods.GoXam.Link)">
            <summary>
            Remove a <see cref="T:Northwoods.GoXam.Link"/> from this layer.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            This is infrequently called.
            You normally should set the <see cref="P:Northwoods.GoXam.Part.LayerName"/>
            in order to specify or change the layer that a part will be in.
            </para>
            <para>
            This does not modify the model.
            It just changes the layer that the link is in,
            removing the link from the visual tree.
            If it was not part of this layer, nothing happens.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LinkLayer.Links">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Link"/>s that this layer holds.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.LinkLayer.VisualChildrenCount">
            <summary>
            Return the number of links visible in this layer.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Layout.LayoutChange">
            <summary>
            This enumerates the reasons that a layout may no longer be valid
            when a particular <see cref="T:Northwoods.GoXam.Part"/> has been added or removed.
            </summary>
            <remarks>
            <para>
            These flags values may be combined to provide the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>
            under which a <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/> may be invalidated.
            </para>
            <para>
            You can combine these values in XAML too.
            In WPF, just say:
            <code>&lt;go:TreeLayout Conditions="NodeAdded LinkAdded" ... /&gt;</code>
            But due to a restriction with Silverlight type converters,
            if you want to specify the value for <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>
            in XAML, you will need to set the <c>ConditionFlags</c> attribute instead:
            <code>&lt;golayout:TreeLayout ConditionFlags="NodeAdded LinkAdded" ... /&gt;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.None">
            <summary>
            No particular reason for an layout invalidation.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.NodeAdded">
            <summary>
            A node has been added to the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.NodeRemoved">
            <summary>
            A node has been removed from the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.LinkAdded">
            <summary>
            A link has been added to the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.LinkRemoved">
            <summary>
            A link has been removed from the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.MemberAdded">
            <summary>
            A member node has been added to a group.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.MemberRemoved">
            <summary>
            A member node has been removed from a group.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.DiagramLayoutChanged">
            <summary>
            The <see cref="P:Northwoods.GoXam.Diagram.Layout"/> property value has been replaced.
            There is no <see cref="T:Northwoods.GoXam.Part"/> associated with this change.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.GroupLayoutChanged">
            <summary>
            The <see cref="P:Northwoods.GoXam.Group.Layout"/> property value has been replaced on a group.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.VisibleChanged">
            <summary>
            The <see cref="P:Northwoods.GoXam.Part.Visible"/> property has changed on a node or a link.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.NodeSizeChanged">
            <summary>
            The size of a node (that is not a group) has changed.
            Caution: this is uncommonly used, due to the likelihood of frequent layouts.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.NodeLocationChanged">
            <summary>
            The location of a node or group has changed.
            Caution: this is rarely used, due to the likelihood of frequent layouts.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.GroupSizeChanged">
            <summary>
            The size of a group has changed.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.ViewportSizeChanged">
            <summary>
            The size of the <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportBounds"/> has changed, either because the
            <see cref="T:Northwoods.GoXam.DiagramPanel"/> has changed size or because the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> has changed.
            This only applies to the top-level layout, the <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.Added">
            <summary>
            A node, link, or group membership has been added.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.Removed">
            <summary>
            A node, link, or group membership has been removed.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.Standard">
            <summary>
            All of the <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Added"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.Removed"/> flags,
            plus <see cref="F:Northwoods.GoXam.Layout.LayoutChange.DiagramLayoutChanged"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.GroupLayoutChanged"/>,
            but not <see cref="F:Northwoods.GoXam.Layout.LayoutChange.NodeSizeChanged"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.NodeLocationChanged"/> and <see cref="F:Northwoods.GoXam.Layout.LayoutChange.InitialOnly"/>.
            This is the default value of <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>.
            It corresponds to all of the graph-structural changes and layout replacements.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.All">
            <summary>
            All <see cref="T:Northwoods.GoXam.Layout.LayoutChange"/> flags combined together, except for <see cref="F:Northwoods.GoXam.Layout.LayoutChange.InitialOnly"/>.
            Caution: due to the likelihood of frequent layouts, this is basically only used
            to indicate to <see cref="M:Northwoods.GoXam.Layout.IDiagramLayout.Invalidate(Northwoods.GoXam.Layout.LayoutChange,Northwoods.GoXam.Part)"/> that a new layout should
            be performed unconditionally.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Layout.LayoutChange.InitialOnly">
            <summary>
            When this flag is included in the <see cref="P:Northwoods.GoXam.Layout.DiagramLayout.Conditions"/>,
            no layouts will occur after the initial one, unless the layout is invalidated unconditionally.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkPanel">
            <summary>
            A <c>LinkPanel</c> is a <c>Panel</c> used to position and orient elements along
            the route of a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            The simplest <see cref="T:Northwoods.GoXam.Link"/> is implemented with a <c>DataTemplate</c> that
            consists of a <c>Shape</c> that is the stroke (a line) connecting one node with another.
            In WPF that is normally an instance of <c>LinkShape</c>;
            in Silverlight that is normally an instance of <c>System.Windows.Shapes.Path</c>.
            Such a link cannot have any arrowheads or text labels or other decorations.
            Furthermore you cannot connect any link to or from the link itself,
            nor can any link labels be selectable or manipulable as separate objects.
            </para>
            <para>
            However, most <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/>s are implemented as
            <c>DataTemplate</c>s consisting of <see cref="T:Northwoods.GoXam.LinkPanel"/>s.
            The principal child element of a <c>LinkPanel</c> is normally a <c>LinkShape</c>
            (WPF) or <c>Path</c> (Silverlight) that has the <c>x:Name</c> of "Path"
            and that has the attached property <see cref="F:Northwoods.GoXam.LinkPanel.IsLinkShapeProperty"/> set to true.
            The panel arranges the other child elements along the <see cref="T:Northwoods.GoXam.Link"/>'s
            <see cref="P:Northwoods.GoXam.Link.Route"/> according to various attached properties.
            </para>
            <para>
            To make it easy to implement common arrowheads, you can set the <see cref="F:Northwoods.GoXam.LinkPanel.ToArrowProperty"/>
            and/or <see cref="F:Northwoods.GoXam.LinkPanel.FromArrowProperty"/> attached properties on a <c>Path</c> element.
            </para>
            <para>
            At the current time a <c>LinkPanel</c> or <c>LinkShape</c>/<c>Path</c>
            must be the root visual element of a <see cref="T:Northwoods.GoXam.Link"/>.
            </para>
            <para>
            Here is a simple <c>DataTemplate</c> for a <see cref="T:Northwoods.GoXam.Link"/> that has an arrowhead:
            <code>
              &lt;DataTemplate x:Key="ExampleLinkTemplate"&gt;
                &lt;go:LinkPanel go:Link.SelectionElementName="Path" go:Link.SelectionAdorned="True" &gt;
                  &lt;go:LinkShape x:Name="Path" Stroke="Black" StrokeThickness="1" /&gt;
                  &lt;Path Fill="Black" go:LinkPanel.ToArrow="Standard" /&gt;
                &lt;/go:LinkPanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            <para>
            A <c>LinkPanel</c> may have multiple children (<c>LinkShape</c> (WPF) or <c>Path</c> (Silverlight))
            for which <c>go:LinkPanel.IsLinkShape="True"</c>.
            One of them must be the primary link path, with the <c>x:Name</c> of "Path";
            this is what will be returned by the <see cref="P:Northwoods.GoXam.LinkPanel.Path"/> property.
            All of rest will get the same route geometry as the primary <see cref="P:Northwoods.GoXam.LinkPanel.Path"/>.
            This makes it easy to implement gradient-like effects by using multiple link shapes
            of different colors:
            <code>
              &lt;go:LinkPanel . . .&gt;
                &lt;go:LinkShape StrokeThickness="7" Stroke="DarkBlue" /&gt;
                &lt;go:LinkShape StrokeThickness="5" Stroke="Blue" /&gt;
                &lt;go:LinkShape StrokeThickness="3" Stroke="LightBlue" /&gt;
                &lt;go:LinkShape x:Name="Path" StrokeThickness="1" Stroke="White" /&gt;
                . . .
              &lt;/go:LinkPanel&gt;
            </code>
            </para>
            <para>
            By default each LinkPanel sets <c>UseLayoutRounding</c> to false,
            except that it is set to true when used inside an <see cref="T:Northwoods.GoXam.Adornment"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.#ctor">
            <summary>
            Construct an empty <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            </summary>
            <remarks>
            This sets the <see cref="F:Northwoods.GoXam.Part.SelectionElementNameProperty"/> to "Path"
            and <c>UseLayoutRounding</c> to false.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.ImplementationProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.LinkPanel.Implementation"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.IsLinkShapeProperty">
            <summary>
            Identifies the <c>IsLinkShape</c> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetIsLinkShape(System.Windows.DependencyObject)">
            <summary>
            Gets whether a <c>LinkShape</c> (WPF) or <c>Path</c> (Silverlight)
            is the primary stroke for the link.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetIsLinkShape(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether a <c>LinkShape</c> (WPF) or <c>Path</c> (Silverlight)
            is the primary stroke for the link.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.IndexProperty">
            <summary>
            Identifies the <c>Index</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetIndex(System.Windows.DependencyObject)">
            <summary>
            Gets an element's segment index along the link's route.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            <para>
            Zero identifies the segment closest to the "from" end of the route.
            Positive values identify segments further along the route.
            Negative values identify segments starting at the "to" end of the route;
            -1 is the last segment, -2 is the next to last, etc.
            </para>
            <para>
            If the index is not specified for an element, the <see cref="T:Northwoods.GoXam.LinkPanel"/>
            will arrange it to be at the <see cref="T:Northwoods.GoXam.Route"/>'s <see cref="P:Northwoods.GoXam.Route.MidPoint"/>.
            </para>
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetIndex(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets an element's segment index along the link's route.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">
            <para>
            Zero identifies the segment closest to the "from" end of the route.
            Positive values identify segments further along the route.
            Negative values identify segments starting at the "to" end of the route;
            -1 is the last segment, -2 is the next to last, etc.
            </para>
            <para>
            If the index is not specified for an element, the <see cref="T:Northwoods.GoXam.LinkPanel"/>
            will arrange it to be at the <see cref="T:Northwoods.GoXam.Route"/>'s <see cref="P:Northwoods.GoXam.Route.MidPoint"/>.
            </para>
            </param>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.FractionProperty">
            <summary>
            Identifies the <c>Fraction</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetFraction(System.Windows.DependencyObject)">
            <summary>
            Gets the fractional distance along a segment at which the element should be positioned.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is zero.
            For negative indexes, the fraction increases from zero to one as the point moves
            from the "to" end towards the "from" end.
            </returns>
            <remarks>
            The fraction is not used when the <see cref="M:Northwoods.GoXam.LinkPanel.GetIndex(System.Windows.DependencyObject)"/> value is not a valid point/segment in the route.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetFraction(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the fractional distance along a segment at which the element should be positioned.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">
            The fraction should be between zero and one, inclusive.
            For non-negative indexes, the fraction increases from zero to one as the point moves
            from the "from" end toward the "to" end.
            For negative indexes, the fraction increases from zero to one as the point moves
            from the "to" end towards the "from" end.
            </param>
            <remarks>
            The fraction is not used when the <see cref="M:Northwoods.GoXam.LinkPanel.GetIndex(System.Windows.DependencyObject)"/> value is not a valid point/segment in the route.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.OffsetProperty">
            <summary>
            Identifies the <c>Offset</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetOffset(System.Windows.DependencyObject)">
            <summary>
            Gets the distances from the fractional point of a link segment at which the element should be positioned.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is (0, 0).
            The offset distances are in model coordinates.
            The offset is rotated to the angle of the link segment.
            Positive X values result in the element being positioned farther along the link segment;
            negative values are closer.
            Positive Y values result in the element being positioned away from the link segment
            on the right side of the path; negative values go toward the left side.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetOffset(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the distances from the fractional point of a link segment at which the element should be positioned.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">
            The offset distances are in model coordinates.
            The offset is rotated to the angle of the link segment.
            Positive X values result in the element being positioned farther along the link segment;
            negative values are closer.
            Positive Y values result in the element being positioned away from the link segment
            on the right side of the path; negative values go toward the left side.
            </param>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.AlignmentProperty">
            <summary>
            Identifies the <c>Alignment</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets an element's alignment spot, which controls the point of the element that
            is positioned at a distance of the way along a particular segment of the route.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is <see cref="F:Northwoods.GoXam.Spot.Center"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetAlignment(System.Windows.DependencyObject,Northwoods.GoXam.Spot)">
            <summary>
            Sets an element's alignment spot, which controls the point of the element that
            is positioned at a distance of the way along a particular segment of the route.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.OrientationProperty">
            <summary>
            Identifies the <c>Orientation</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetOrientation(System.Windows.DependencyObject)">
            <summary>
            Gets an element's intended rotation policy.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is <see cref="F:Northwoods.GoXam.LabelOrientation.None"/>, meaning the element is not to be rotated.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetOrientation(System.Windows.DependencyObject,Northwoods.GoXam.LabelOrientation)">
            <summary>
            Sets an element's intended rotation policy.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.ToArrowProperty">
            <summary>
            Identifies the <c>ToArrow</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetToArrow(System.Windows.DependencyObject)">
            <summary>
            Gets the Arrowhead on a Path, at the ToNode end.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is <see cref="F:Northwoods.GoXam.Arrowhead.None"/>, meaning there is no Arrowhead on the element.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetToArrow(System.Windows.DependencyObject,Northwoods.GoXam.Arrowhead)">
            <summary>
            Sets the Arrowhead on a Path, at the ToNode end.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">the constant of the Arrowhead enum to which ToArrowProperty is being set.</param>
            <remarks>
            The ToArrowProperty can only be set on a <c>Path</c> which is a child of a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            If Silverlight, the attached propery <see cref="F:Northwoods.GoXam.LinkPanel.IsLinkShapeProperty"/> must be false, as it is by default.
            Setting the ToArrowProperty will set the <c>Path.Data</c>, <see cref="F:Northwoods.GoXam.LinkPanel.OrientationProperty"/>,
            <see cref="F:Northwoods.GoXam.LinkPanel.AlignmentProperty"/>, and <see cref="F:Northwoods.GoXam.LinkPanel.IndexProperty"/> attached properties.
            Consequently, setting both the ToArrowProperty and FromArrowProperty on the same path will result
            in the appearance of only the second property that is set.
            Setting the ToArrowProperty on multiple Paths that are children of the same LinkPanel will result in overlap of the
            Path.Data geometries.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws an Exception if ToArrowProperty is set on an element 
            other than a <c>Path</c>.
            </exception>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.ToArrowScaleProperty">
            <summary>
            Identifies the <c>ToArrowScale</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetToArrowScale(System.Windows.DependencyObject)">
            <summary>
            Gets the size of the Arrowhead on an element, at the ToNode end, as a scale multiple of its base size.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is 1.0, indicating the base size defined in the xaml.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetToArrowScale(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the size of the <see cref="T:Northwoods.GoXam.Arrowhead"/> on an element, at the ToNode end, as a scale multiple of its base size.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">the scale factor. Acceptable values are real numbers between zero and infinity.</param>
            <remarks>
            Setting this property will have no effect if set on a <c>Path</c> without the <see cref="F:Northwoods.GoXam.LinkPanel.ToArrowProperty"/> set.
            It will also have no effect if the <see cref="F:Northwoods.GoXam.LinkPanel.IndexProperty"/> is out of range.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if ToArrowScaleProperty is set to a negative number.
            </exception>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.FromArrowProperty">
            <summary>
            Identifies the <c>FromArrow</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetFromArrow(System.Windows.DependencyObject)">
            <summary>
            Gets the Arrowhead on a Path, at the FromNode end.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is <see cref="F:Northwoods.GoXam.Arrowhead.None"/>, meaning there is no Arrowhead on the element.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetFromArrow(System.Windows.DependencyObject,Northwoods.GoXam.Arrowhead)">
            <summary>
            Sets the Arrowhead on a Path, at the FromNode end.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">the constant of the Arrowhead enum to which FromArrowProperty is being set.</param>
            <remarks>
            The FromArrowProperty can only be set on a <c>Path</c> which is a child of a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            If Silverlight, the attached propery <see cref="F:Northwoods.GoXam.LinkPanel.IsLinkShapeProperty"/> must be false, as it is by default.
            Setting the FromArrowProperty will set the <c>Path.Data</c>, <see cref="F:Northwoods.GoXam.LinkPanel.OrientationProperty"/>, 
            <see cref="F:Northwoods.GoXam.LinkPanel.AlignmentProperty"/>, and <see cref="F:Northwoods.GoXam.LinkPanel.IndexProperty"/> attached properties.
            Consequently, setting both the ToArrowProperty and FromArrowProperty on the same path will result
            in the appearance of only the second set property.
            Setting the FromArrowProperty on multiple Paths that are children of the same LinkPanel will result in overlap of the
            Path.Data geometries.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws an Exception if FromArrowProperty is set on an element 
            other than a <c>Path</c>.
            </exception>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanel.FromArrowScaleProperty">
            <summary>
            Identifies the <c>FromArrowScale</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.GetFromArrowScale(System.Windows.DependencyObject)">
            <summary>
            Gets the size of the Arrowhead on an element, at the FromNode end, as a scale multiple of its base size.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <returns>
            The default value is 1.0, indicating the base size defined in Generic.xaml.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.SetFromArrowScale(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the size of the <see cref="T:Northwoods.GoXam.Arrowhead"/> on an element at the FromNode end as a scale multiple of its base size.
            </summary>
            <param name="d">a child element of a <see cref="T:Northwoods.GoXam.LinkPanel"/></param>
            <param name="v">the scale factor. Acceptable values are real numbers between zero and infinity.</param>
            <remarks>
            Setting this property will have no effect if set on a <c>Path</c> without the <see cref="F:Northwoods.GoXam.LinkPanel.FromArrowProperty"/> set.
            It will also have no effect if the <see cref="F:Northwoods.GoXam.LinkPanel.IndexProperty"/> is out of range.
            </remarks>
            /// <exception cref="T:System.InvalidOperationException">
            Throws an exception if FromArrowScaleProperty is set to a negative number.
            </exception>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.ComputeAngle(System.Windows.UIElement,Northwoods.GoXam.LabelOrientation,System.Double)">
            <summary>
            Dynamically compute the desired angle of an element along a segment of the route.
            </summary>
            <param name="elt">the <c>UIElement</c> being rotated</param>
            <param name="orient">the <see cref="T:Northwoods.GoXam.LabelOrientation"/> declared for the element</param>
            <param name="angle">the angle of the segment of the route where the element is attached</param>
            <returns>the intended angle for the element</returns>
            <remarks>
            This method is not called unless the <see cref="M:Northwoods.GoXam.LinkPanel.GetOrientation(System.Windows.DependencyObject)"/> attached property value is
            not <see cref="F:Northwoods.GoXam.LabelOrientation.None"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.ComputeOffset(System.Windows.UIElement,System.Int32,System.Double,System.Windows.Size,System.Double)">
            <summary>
            Compute the offset to use in determining the position of a label.
            </summary>
            <param name="elt">the label being positioned, either a child element of the <see cref="T:Northwoods.GoXam.LinkPanel"/>
            or the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> of a label <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="index">the segment of the link, or a negative value if the label should be at the <see cref="P:Northwoods.GoXam.Route.MidPoint"/></param>
            <param name="segangle">the angle of the <paramref name="index"/>th segment, or the <see cref="P:Northwoods.GoXam.Route.MidAngle"/></param>
            <param name="sz">the size of the label</param>
            <param name="labelangle">the angle at which the label is rotated, from calling <see cref="M:Northwoods.GoXam.LinkPanel.ComputeAngle(System.Windows.UIElement,Northwoods.GoXam.LabelOrientation,System.Double)"/></param>
            <returns>an offset that is rotated according to the angle of the segment;
            this will be added to the midpoint of the link or to the fractional point along the segment</returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Determine the size of the union of the bounds of the positioned and rotated child elements.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange the child elements of this panel and of any label nodes.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
            <remarks>
            This positions each child element based on the attached property values of
            <see cref="M:Northwoods.GoXam.LinkPanel.GetIndex(System.Windows.DependencyObject)"/>, <see cref="M:Northwoods.GoXam.LinkPanel.GetFraction(System.Windows.DependencyObject)"/>, <see cref="M:Northwoods.GoXam.LinkPanel.GetAlignment(System.Windows.DependencyObject)"/>,
            and <see cref="M:Northwoods.GoXam.LinkPanel.GetOrientation(System.Windows.DependencyObject)"/>.
            This also positions any <see cref="P:Northwoods.GoXam.Link.LabelNode"/>,
            using the <see cref="T:Northwoods.GoXam.LinkPanel"/> attached properties on the node's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            even though such a node is not within the visual tree of this panel.
            If the label node is a <see cref="T:Northwoods.GoXam.Group"/>, this will instead position all of the
            group's <see cref="P:Northwoods.GoXam.Group.MemberNodes"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkPanel.IsFilled(Northwoods.GoXam.Arrowhead)">
            <summary>
            Returns whether an Arrowhead should be filled.
            </summary>
            <param name="arrow">The Arrowhead which should or should not be filled.</param>
            <returns>True if the Arrowhead should be filled.</returns>
        </member>
        <member name="P:Northwoods.GoXam.LinkPanel.Path">
            <summary>
            Gets the <c>LinkShape</c> (WPF) or <c>Path</c> (Silverlight) that represents the visual path of the <see cref="T:Northwoods.GoXam.Route"/> of the <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            Although a <see cref="T:Northwoods.GoXam.LinkPanel"/> is normally a <see cref="T:Northwoods.GoXam.Link"/>'s <see cref="P:Northwoods.GoXam.Part.VisualElement"/>,
            it may be the root element of a <see cref="T:Northwoods.GoXam.Node"/> in two cases.
            If the panel is the element of an <see cref="T:Northwoods.GoXam.Adornment"/>, and the adornment's <see cref="P:Northwoods.GoXam.Adornment.AdornedPart"/>
            is a <see cref="T:Northwoods.GoXam.Link"/>, this returns that link's <see cref="P:Northwoods.GoXam.Link.Path"/>.
            If the panel is the element of a node that is a label of a link (i.e. <see cref="P:Northwoods.GoXam.Node.LabeledLink"/> is non-null),
            then this returns that link's path.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LinkPanel.Implementation">
            <summary>
            Gets or sets the nature of the link implementation.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoXam.LinkPanelImplementation.Path"/>.
            A different value will result in <see cref="P:Northwoods.GoXam.LinkPanel.Path"/> always return null.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.LabelOrientation">
            <summary>
            This enumeration governs if and how a <see cref="T:Northwoods.GoXam.LinkPanel"/>'s child element
            or label node is rotated to be oriented along the <see cref="T:Northwoods.GoXam.Route"/> of a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            These values are supplied by the <see cref="M:Northwoods.GoXam.LinkPanel.GetOrientation(System.Windows.DependencyObject)"/> attached
            property on each link panel child element or label node.
            You can also override <see cref="M:Northwoods.GoXam.LinkPanel.ComputeAngle(System.Windows.UIElement,Northwoods.GoXam.LabelOrientation,System.Double)"/> for more flexibility
            in controlling the angle of an element.
            </para>
            <para>
            The "Upright" values are typically only used when the element contains text.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.None">
            <summary>
            The element is never rotated -- the angle is always zero.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Along">
            <summary>
            The element's angle is always the same as the angle of the link's route
            at the segment where the element is attached.
            The element is turned to have the same angle as the route.
            Use this orientation for arrow heads.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Plus90">
            <summary>
            The element's angle is always 90 degrees more than the angle of the link's route
            at the segment where the element is attached.
            The element is turned clockwise to be perpendicular to the route.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Minus90">
            <summary>
            The element's angle is always 90 degrees less than the angle of the link's route
            at the segment where the element is attached.
            The element is turned counter-clockwise to be perpendicular to the route.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Opposite">
            <summary>
            The element's angle is always 180 degrees opposite from the angle of the link's route
            at the segment where the element is attached.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Upright">
            <summary>
            The element's angle always follows the angle of the link's route
            at the segment where the element is attached, but is never upside down.
            The element is turned to have the same angle as the route, just like <see cref="F:Northwoods.GoXam.LabelOrientation.Along"/>.
            This is typically only used for elements that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Plus90Upright">
            <summary>
            The element's angle is always 90 degrees more than the angle of the link's route
            at the segment where the element is attached, but is never upside down.
            The element is turned clockwise to be perpendicular to the route, just like <see cref="F:Northwoods.GoXam.LabelOrientation.Plus90"/>.
            This is typically only used for elements that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Minus90Upright">
            <summary>
            The element's angle is always 90 degrees less than the angle of the link's route
            at the segment where the element is attached, but is never upside down.
            The element is turned counter-clockwise to be perpendicular to the route, just like <see cref="F:Northwoods.GoXam.LabelOrientation.Minus90"/>.
            This is typically only used for elements that contain text.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LabelOrientation.Upright45">
            <summary>
            The element's angle always follows the angle of the link's route
            at the segment where the element is attached, but is never upside down
            and is never angled more than +/- 45 degrees.
            When the route's angle is within 45 degrees of vertical (90 or 270 degrees),
            the element's angle is set to zero.
            This is typically only used for elements that contain text.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkPanelImplementation">
            <summary>
            This enumeration describes the kinds of principal elements a
            <see cref="T:Northwoods.GoXam.LinkPanel"/> uses to render the route of a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            This is the type of the <see cref="P:Northwoods.GoXam.LinkPanel.Implementation"/> property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanelImplementation.Path">
            <summary>
            The normal case where the route is shown as a stroked open <c>Shape</c> that
            is a possibly multi-segment or curved line.
            For this case the value of <see cref="P:Northwoods.GoXam.LinkPanel.Path"/>
            will be a <c>LinkShape</c> (WPF) or a <c>Path</c> (Silverlight).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanelImplementation.Fixed">
            <summary>
            The link is shown as any rotated fixed-size <c>UIElement</c>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkPanelImplementation.Stretch">
            <summary>
            The link is shown as any rotated <c>UIElement</c>, but its width is arranged
            to be stretched to reach the distance between the end points of the route.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Arrowhead">
            <summary>
            Predefined shapes for <c>LinkShape</c> (WPF) or <c>Path</c> inside a <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            </summary>
            <remarks>
            Set the <c>LinkPanel.ToArrow</c> or <c>LinkPanel.FromArrow</c> attached properties (or call <c>LinkPanel.SetValue()</c>) providing either dependency property as a parameter.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.None">
            <summary>
            Represents the default Arrowhead DataTemplate, which is no Arrowhead.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Triangle">
            <summary>
            Represents an equilateral triangle pointing to the right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleTriangle">
            <summary>
            Represents two triangles pointing to the right, one after another.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.RoundedTriangle">
            <summary>
            Represents a triangle pointing to the right with rounded corners.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.PartialDoubleTriangle">
            <summary>
            Represents two consecutive triangles with the former being partially obscured by the latter.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Boomerang">
            <summary>
            Represents a boomerang with sharp vertices.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackwardTriangle">
            <summary>
            Represents a triangle pointing backwards. 
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.HalfTriangleTop">
            <summary>
            Represents the top half of a forward pointing triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.HalfTriangleBottom">
            <summary>
            Represents the bottom half of a forward pointing triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenTriangle">
            <summary>
            Represents a triangle pointing to the right with an open back end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackwardOpenTriangle">
            <summary>
            Represents a triangle pointing to the left with an open back end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleFeathers">
            <summary>
            Represents two triangles pointing to the right, in a line, with an open back ends.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TripleFeathers">
            <summary>
            Represents three triangles pointing to the right, in a line, with an open back ends.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenTriangleTop">
            <summary>
            Represents the top half of an open triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenTriangleBottom">
            <summary>
            Represents the bottom half of an open triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenTriangleLine">
            <summary>
            Represents an open triangle followed by a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Line">
            <summary>
            Represents a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleLine">
            <summary>
            Represents two vertical lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TripleLine">
            <summary>
            Represents three vertical lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.ForwardSlash">
            <summary>
            Represents a forward slash.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackSlash">
            <summary>
            Represents a backwards slash.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleForwardSlash">
            <summary>
            Represents two forward slashes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleBackSlash">
            <summary>
            Represents two backwards slashes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TripleForwardSlash">
            <summary>
            Represents three forward slashes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TripleBackSlash">
            <summary>
            Represents three backwards slashes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.X">
            <summary>
            Represents to crossed diagonal lines.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Fork">
            <summary>
            Represents a horizontal line splitting into three directions.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenRightTriangleTop">
            <summary>
            Represents the top half of a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpenRightTriangleBottom">
            <summary>
            Represents the bottom half of a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Block">
            <summary>
            Represents a square.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Kite">
            <summary>
            Represents a quadrilateral with the long axis parallel to the direction of the link and the longer side to the right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Diamond">
            <summary>
            Represents a rotated square.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.StretchedDiamond">
            <summary>
            Represents a parallelogram with the long axis parallel to the direction of the link.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Standard">
            <summary>
            Represents a standard arrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.FastForward">
            <summary>
            Represents two consecutive triangls followed by a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.AccelerationArrow">
            <summary>
            Represents a line, followed by a thin rectangle, followed by a PentagonArrow.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BoxArrow">
            <summary>
            Represents a rectangle affixed to a perpendicular rectangle, affixed to a triangle pointing to the right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.StretchedChevron">
            <summary>
            Represents a triangle appended to a tall rectangle with a slight triangular indentation on the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.SimpleArrow">
            <summary>
            Represents a PentagonArrow connected to a right pointing triangle by a line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BigEndArrow">
            <summary>
            Represents a small trianlge appended to and partially covering a large triangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.SidewaysV">
            <summary>
            Represents the letter V rotated 90 degrees counter-clockwise.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.HalfArrowTop">
            <summary>
            Represents the top half of a Bommerang.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.HalfArrowBottom">
            <summary>
            Represents the bottom half of a Boomerang.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Chevron">
            <summary>
            Represents a chevron shape pointing to the right and with straight sides.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.OpposingDirectionDoubleArrow">
            <summary>
            Represents an arrow with two heads pointing in opposite directions.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.EquilibriumArrow">
            <summary>
            Represents the chemical symbol for an equilibrium reaction.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.CircleEndedArrow">
            <summary>
            Represents an arrow appended to an ellipse.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.ConcaveTailArrow">
            <summary>
            Represents an arrow with an indented tail.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DynamicWidthArrow">
            <summary>
            Represent an arrow with different slopes at different sections.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TailedNormalArrow">
            <summary>
            Represents a triangle appended to a long rectangle with a triangular indentation on the end.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.PentagonArrow">
            <summary>
            Represents a triangle appended to a tall rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.NormalArrow">
            <summary>
            Represents a triangle appended to a long rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.Circle">
            <summary>
            Represents a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.ForwardSemiCircle">
            <summary>
            Represents the forward half of a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackwardSemiCircle">
            <summary>
            Represents the backward half of a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.PlusCircle">
            <summary>
            Represents a circle with a plus in its center.
            Will only display properly if Stroke and Fill are different brushes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.LineCircle">
            <summary>
            Represents a vertical line followed by a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DoubleLineCircle">
            <summary>
            Represents two vertical lines followed by a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TripleLineCircle">
            <summary>
            Represents three vertical lines followed by a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.CircleFork">
            <summary>
            Represents a circle followed by a three-way fork.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.LineFork">
            <summary>
            Represents a vertical line followed by a three-way fork.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.CircleLine">
            <summary>
            Represents a circle followed by a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.CircleLineFork">
            <summary>
            Represents a circle followed by a vertical line followed by a three-way fork.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.DiamondCircle">
            <summary>
            Represents a diamond followed by a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.TriangleLine">
            <summary>
            Represents a triangle followed by a vertical line.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackwardCircleFork">
            <summary>
            Represents a three-way fork followed by a circle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Arrowhead.BackwardCircleLineFork">
            <summary>
            Represents a three-way fork followed by a vertical line followed by a circle.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.PartsModel">
            <summary>
            A model where the data are FrameworkElements:
            <see cref="T:Northwoods.GoXam.Node"/> and <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> is an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> is an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            References to nodes are strings.
            They are stored on each <see cref="T:Northwoods.GoXam.Node"/> by the
            <see cref="P:Northwoods.GoXam.Node.Id"/> property.
            Links refer to nodes by the <see cref="P:Northwoods.GoXam.Link.PartsModelFromNode"/>
            and <see cref="P:Northwoods.GoXam.Link.PartsModelToNode"/> properties,
            and by the <see cref="P:Northwoods.GoXam.Link.PartsModelLabelNode"/> property.
            Nodes also refer to their containing subgraph nodes by the
            <see cref="P:Northwoods.GoXam.Node.PartsModelContainingSubGraph"/> property.
            </para>
            <para>
            This class is not Serializable, because the data are FrameworkElements.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphLinksModel`4">
            <summary>
            The generic implementation of a diagram model consisting of nodes and subgraphs,
            with any number of explicit link data representing links between any two nodes.
            </summary>
            <typeparam name="NodeType">the Type of node data</typeparam>
            <typeparam name="NodeKey">the Type of a value uniquely identifying a node data</typeparam>
            <typeparam name="PortKey">the Type of an optional value identifying a particular port on a node; should be <c>String</c></typeparam>
            <typeparam name="LinkType">the Type of link data</typeparam>
            <seealso cref="T:Northwoods.GoXam.Model.IDiagramModel"/>
        </member>
        <member name="T:Northwoods.GoXam.Model.ILinksModel">
            <summary>
            A model that supports directed link relationships between nodes,
            with the relationship information stored in separate link data structures.
            </summary>
            <remarks>
            <para>
            Link relationship information is found in link data held in the
            <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> collection property.
            If you want a simpler model where the link relationship information is
            stored in a list on each node data, use the <see cref="T:Northwoods.GoXam.Model.IConnectedModel"/>.
            </para>
            <para>
            This model can support any number of links between any pair of nodes.
            Furthermore, this model supports additional information at each end of
            the link, to distinguish between different "ports" on each node.
            </para>
            <para>
            Links are nominally directional, each "coming from a node" and "going to a node".
            However, if you want to model undirected relationships, you can use the methods that
            ignore the direction of the links.
            </para>
            <para>
            There are three categories of methods: updating, navigation, and modification.
            </para>
            <para>
            The updating methods need to be called when there has been a change to the data,
            so that the model can be kept up-to-date.
            These methods include changes to the collection of link data:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.DoLinkAdded(System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.ILinksModel.DoLinkRemoved(System.Object)"/>.
            They also include methods involving changes to the state of the link data:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.DoLinkPortsChanged(System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.ILinksModel.DoLinkLabelChanged(System.Object)"/>.
            </para>
            <para>
            The navigation methods support examining and traversing the graph.
            Some methods working on node data are actually defined in the base interface, <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>.
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinked(System.Object,System.Object,System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetFromNodesForNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetToNodesForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetConnectedNodesForNode(System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/>.
            But this interface adds a number of methods that also work on node data:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.IsLinkData(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLinksForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLinksForNode(System.Object,System.Predicate{System.Object})"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetFromLinksForNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetToLinksForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLinksBetweenNodes(System.Object,System.Object,System.Object,System.Object)"/>.
            And there are methods that work on link data:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetFromNodeForLink(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetFromParameterForLink(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetToNodeForLink(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetToParameterForLink(System.Object)"/>.
            And there are methods that involve a link data that has a node data as a "label":
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetHasLabelNodeForLink(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetHasLabeledLinkForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLabelNodeForLink(System.Object)"/>, and <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLabeledLinkForNode(System.Object)"/>.
            </para>
            <para>
            The modification methods are used to alter the graph.
            A number of these methods working on node data are defined in <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>, such as 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/>, 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>.
            But this interface adds several methods working on link data:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.AddLink(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.RemoveLink(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.AddLinkCopy(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.SetLinkFromPort(System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ILinksModel.SetLinkToPort(System.Object,System.Object,System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.SetLinkLabel(System.Object,System.Object)"/>.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
        </member>
        <member name="T:Northwoods.GoXam.Model.IDiagramModel">
            <summary>
            All diagram models implement this interface or an interface that inherits from this interface.
            </summary>
            <remarks>
            <para>
            This is reponsible for defining relationships between nodes, involving links and grouping.
            It does not know about any <c>FrameworkElement</c>s
            (including <see cref="T:Northwoods.GoXam.Diagram"/> or <see cref="T:Northwoods.GoXam.DiagramPanel"/> or <see cref="T:Northwoods.GoXam.Part"/>).
            It just knows about .NET CLR objects as data of type <see cref="T:System.Object"/> or about more specific types
            when instantiating one of the generic <see cref="T:Northwoods.GoXam.Model.DiagramModel"/> classes.
            It is vaguely analogous to a <c>CollectionView</c>, providing additional organization of the source data.
            It defines a graph from the data instead of imposing a total ordering on it and filtering/sorting/grouping it.
            It also supports two-pass copying of existing data and undo/redo support via an <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/>.
            </para>
            <para>
            There are four categories of members in this interface: updating, navigation, modification, and miscellaneous.
            The updating methods need to be called when there has been a change to the data,
            so that the model can be kept up-to-date with the data.
            The navigation methods support examining the diagram and traversing the graph defined
            by the nodes and links in the diagram.
            The modification methods are used to alter the diagram.
            The miscellaneous methods and properties include support for model change notification,
            for undo/redo, for edits, and for data transfer.
            Additional categories of members exist in each of the model classes.
            </para>
            <para>
            The most important member of this interface is the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> property,
            the collection of node data defining the graph.
            You will need to set it before anything can be seen in your <see cref="T:Northwoods.GoXam.Diagram"/>.
            The model will look at each node data in that collection to discover the
            relationships that will form the graph.
            The methods and properties for discovering a graph from the data depend on
            the kind of model, so they are not part of this interface.
            </para>
            <para>
            As data is added or removed from the model, or as data is modified, the graph implied
            by the data changes.  Whenever the data is modified, the model must be notified.
            The model interfaces (both this interface and more specific interfaces inheriting
            from this interface) have a category of methods for being notified of data changes.
            This basic interface includes methods such as <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeAdded(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeRemoved(System.Object)"/>, and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeKeyChanged(System.Object)"/>.
            More specific kinds of models have additional methods, such as:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.DoParentNodeChanged(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeyRemoved(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.DoLinkAdded(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeysChanged(System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.DoGroupNodeChanged(System.Object)"/>.
            Updating methods have names that start with "Do".
            </para>
            <para>
            Of course if your data is unchanging, neither by application code nor by
            the user, you will not need to be concerned about keeping the model up-to-date.
            But if your data might change, .NET provides some standard interfaces for change
            notification that you should use if you want successful data binding.
            </para>
            <para>
            The <c>INotifyPropertyChanged</c> interface (in the
            <c>System.ComponentModel</c> namespace) is commonly used for
            notification of property changes.  The diagram model classes automatically
            register themselves as <c>INotifyPropertyChanged.PropertyChanged</c> event
            listeners for each of the data objects that are in the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>
            collection so that they can be updated if a model-relevant property changes
            in a data object.
            We suggest that you have your node data class implement this interface,
            but that you use the <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> class for event arguments
            instead of <c>PropertyChangedEventArgs</c>.
            </para>
            <para>
            In addition, Microsoft recommends implementing the  <c>INotifyCollectionChanged</c>
            interface (in the <c>System.Collections.Specialized</c> namespace) for providing
            change notification of collection objects.
            .NET offers the <c>ObservableCollection&lt;T&gt;</c> class as a standard
            collection that implements <c>INotifyCollectionChanged</c>.
            So if the collection you supply as the value of <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> implements
            this interface, the model will automatically call the <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeAdded(System.Object)"/>
            and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeRemoved(System.Object)"/> methods for you.
            Similarly, for the data properties that are expected to be collections,
            (such as the collection of tree children nodes for a data node in the tree model),
            we suggest you use <c>ObservableCollection&lt;T&gt;</c>.
            Note that the optional data classes that we provide for your use, if you do not already
            have your own data classes, implement <c>INotifyPropertyChanged</c> and make use
            of <c>ObservableCollection&lt;T&gt;</c>.
            An example is <see cref="T:Northwoods.GoXam.Model.TreeModelNodeData`1"/>.
            </para>
            <para>
            The generic model classes have a parameterized type, <c>NodeType</c>,
            that denotes the type of the node data that it contains.
            That of course is the required type of each item in the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection.
            Furthermore, all of the methods that operate on node data take and/or return that type.
            This design provides for better type checking at compile time and potentially
            better performance at run time.
            </para>
            <para>
            But <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/> and its subinterfaces are not generic.
            Their methods all take and/or return data of type <c>Object</c> instead of a
            parameterized type.
            This "universality" is necessary because the diagram control is not a generic class.
            </para>
            <para>
            Unlike most controls that bind to a list of items, diagrams involve relationships
            between the items that are much more general than just the order in the list.
            This is achieved by interpreting some property values as "references" to other data.
            Such references might be implemented as .NET CLR references (i.e. pointers).
            However, it is also common to use other values, such as strings or numbers,
            as the references.  Such a scheme requires being able to identify each data
            object with a unique value.
            </para>
            <para>
            The generic model class have another parameterized type, <c>NodeKey</c>,
            that denotes the type of the values that refer to node data.
            When the abstract references are actually .NET CLR references, the <c>NodeKey</c>
            type will be the same as the <c>NodeType</c> type.
            But more often the <c>NodeKey</c> will be something like <c>String</c>
            or <c>int</c>.
            </para>
            <para>
            Normally the expectation is that the key value for each node data does not change.
            However, the models do support such a circumstance -- make sure the
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeKeyChanged(System.Object)"/> method is called right after changing a node's key.
            </para>
            <para>
            The <see cref="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)"/> method is useful for finding a node data given its key.
            To find out if a node data is in the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection, call the
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsNodeData(System.Object)"/> predicate.
            </para>
            <para>
            The models have a number of methods that are useful for examining or navigating.
            These method names tend to start with "Get" or "Is".
            For "link" relationships, the following methods apply to all models:
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinked(System.Object,System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetFromNodesForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetToNodesForNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetConnectedNodesForNode(System.Object)"/>.
            Particular kinds of models have additional methods for traversing graphs, such as:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.GetChildrenForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLinksBetweenNodes(System.Object,System.Object,System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetToNodeForLink(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetLabelNodeForLink(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.GetMemberNodesForGroup(System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.GetGroupForNode(System.Object)"/>.
            Note that the models will have similar protected (not public)
            methods that actually implement the corresponding behavior on the data.
            There will be virtual so that your model implementation can customize
            or optimize how the method performs the operation.
            </para>
            <para>
            The models also have methods for modifying.
            These method names start with "Modify", "Add", or "Remove".
            For nodes, there are <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/>.
            For links, there are <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/>.
            Furthermore, particular kinds of models have additional methods for
            changing relationships, such as:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.AddChildNodeKey(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.AddFromNodeKey(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.SetLinkLabel(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.RemoveMemberNodeKey(System.Object,System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.SetGroupNode(System.Object,System.Object)"/>.
            Note that the models will have similar protected (not public)
            methods that actually implement the corresponding behavior on the data.
            There will be virtual so that your model implementation can customize
            or optimize how the method performs the modification.
            </para>
            <para>
            Finally, there is the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/> property, that should
            disable user actions that would modify the model, and that causes
            errors when you call a model-modifying method anyway.
            </para>
            <para>
            Models support a two-pass copying process.
            A single pass copy is insufficient because some "references"
            cannot be made before all objects have been copied -- those references
            need to be fixed-up afterwards, in a second pass.
            Let's say that we have two objects to be copied, A and B, and that
            A has a string property that refers to B by its name, "B".
            After making the two copied objects, A2 and B2, A2's reference
            will typically still be "B".  The second copy pass will operate
            on A2 and give it a chance to look for the original "B" data,
            to find the copied B2 data, and to change A2's reference to be "B2".
            </para>
            <para>
            The principal copying method is <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>.
            This first makes copies of all the data to be copied, and then
            iterates over them again, fixing up the references.
            You may need to override protected virtual methods whose names
            start with "Copy" in order to correctly construct copies of your data
            in the first pass, and in order to correctly fix references to other
            data in the second pass.
            </para>
            <para>
            Even after the two-pass copying process has finished, there may still
            be unresolved references.
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ClearUnresolvedReferences"/>
            </para>
            <para>
            For convenience in making a copy of a node and adding it to the model,
            there is also the <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNodeCopy(System.Object)"/> method.
            </para>
            <para>
            Depending on the application, not all relationships should be possible.
            Models provide support for link relationships with the <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/> method.
            There are more specific model predicates for <c>IsRelinkValid</c>:
            <see cref="M:Northwoods.GoXam.Model.ILinksModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)"/>,
            and <see cref="M:Northwoods.GoXam.Model.ITreeModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)"/>.
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.IsMemberValid(System.Object,System.Object)"/> offers similar support for the
            group-member relationship in <see cref="T:Northwoods.GoXam.Model.IGroupsModel"/>.
            The diagram control uses these methods for deciding which user actions
            are permissible.
            The model classes add support for customizing these methods.
            </para>
            <para>
            Each model is not only a consumer of events on its data but is also a generator
            <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> events, to allow model consumers such as the diagram control
            to keep themselves up-to-date with the model.
            <see cref="T:Northwoods.GoXam.Model.ModelChange"/> is an enumeration that lists all of the kinds of changes
            that can happen to the predefined model classes.
            Whenever there is a change to a model, the code calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/>
            or a similar method to notify model consumers.
            The <see cref="P:Northwoods.GoXam.Model.IDiagramModel.IsModified"/> property is automatically set to true as
            <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> events are raised.
            </para>
            <para>
            Each model also supports undo and redo, using an
            <see cref="T:Northwoods.GoXam.Model.UndoManager"/> that records
            <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> events.
            Because <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> also implements <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>,
            it is very easy for the undo manager to remember the changes in a manner that makes
            them easy to undo or redo.
            But note that the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/> property is initially null;
            you will need to set this property before any actions can be recorded
            and then undone.
            When you want to make transient changes that you do not want to be recorded
            by the undo manager, you can temporarily set <see cref="P:Northwoods.GoXam.Model.IDiagramModel.SkipsUndoManager"/>
            to true.
            </para>
            <para>
            As you add state to your data or to your model, you may need to add code
            that implements state changing as needed for undo and redo.  This can be done
            either by overriding a model method or a data method if the data implements
            <see cref="T:Northwoods.GoXam.Model.IChangeDataValue"/>.
            </para>
            <para>
            A single user gesture or command may result in many model/data changes.
            These all want to be treated as a single undo-able action.
            You can group such changes together by calling
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.CommitTransaction(System.String)"/>.
            If after a <see cref="M:Northwoods.GoXam.Model.IDiagramModel.StartTransaction(System.String)"/> you don't want to commit the
            changes, you can call <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RollbackTransaction"/>, which not only
            ends the transaction but also automatically "undoes" all of the changes
            since the call to <see cref="M:Northwoods.GoXam.Model.IDiagramModel.StartTransaction(System.String)"/>.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.ITreeModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.IConnectedModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.ILinksModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.IGroupsModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.DiagramModel"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeAdded(System.Object)">
            <summary>
            This should be called when a node data object is added to the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection implements <c>INotifyCollectionChanged</c>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> has been augmented.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeRemoved(System.Object)">
            <summary>
            This should be called when a node data object is removed from the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> collection implements <c>INotifyCollectionChanged</c>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/> has been diminished.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.DoNodeKeyChanged(System.Object)">
            <summary>
            This should be called when a node data's key value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            <para>
            If a node data object implements <c>INotifyPropertyChanged</c>
            and if the key is a simple property on the data that the model recognizes,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of node's key has changed.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.ClearUnresolvedReferences">
            <summary>
            Forget all unresolved delayed or forward references.
            </summary>
            <remarks>
            <para>
            The model may learn about node data in any order, so references to
            nodes may be unresolvable until later, perhaps never.
            Call this method to clear the internal table that keeps track
            of node keys that are not defined by the presence of corresponding node data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.GetNodeType">
            <summary>
            Return the Type of the node data.
            </summary>
            <returns>a <see cref="T:System.Type"/>, not a node data object, nor a string</returns>
            <remarks>
            This is useful for data transfer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.IsNodeType(System.Object)">
            <summary>
            This predicate is true when the argument is an instance of the node data Type.
            </summary>
            <param name="nodedata">the arbitrary object to be checked for compatibility to be a node data</param>
            <returns>
            true if the <paramref name="nodedata"/> can be cast to the the node data Type;
            false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.IsNodeData(System.Object)">
            <summary>
            This predicate is true if the argument is a node data in this model.
            </summary>
            <param name="nodedata">the object to be checked to see if it is a known node data in this model</param>
            <returns>
            true if the <paramref name="nodedata"/> is in the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)">
            <summary>
            Given a key, find the node data with that key.
            </summary>
            <param name="key">
            a value of null for this argument will result in the default value for the node data Type
            </param>
            <returns>
            a node data with that key, if it is present in the model;
            the value will be the default for the type if no such node data is known to be in this model
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.GetCategoryForNode(System.Object)">
            <summary>
            To help distinguish between different kinds of nodes, each node has a "category"
            that is just a string.
            </summary>
            <param name="nodedata"></param>
            <returns>the default category is the empty string</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.IsLinked(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This predicate is true if there is a link from one node data/port to another one.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns>true if there are any links</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.GetFromNodesForNode(System.Object)">
            <summary>
            Return a sequence of node data that are directly connected by links going into a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.GetToNodesForNode(System.Object)">
            <summary>
            Return a sequence of node data that are directly connected by links coming out from a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.GetConnectedNodesForNode(System.Object)">
            <summary>
            Return a sequence of node data that are directly connected to a given node, in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.CreateInitializedCopy(Northwoods.GoXam.Model.IDataCollection)">
            <summary>
            Create a copy of this model initialized with different data.
            </summary>
            <param name="init">this may be null, meaning no initial data</param>
            <returns>a model of the same type as <c>this</c></returns>
            <remarks>
            Most of the properties of the returned model should have the same value
            as this model, but the data depends on the argument <see cref="T:Northwoods.GoXam.Model.IDataCollection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.CreateDataCollection">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.CreateCopyDictionary">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> initialized for this model.
            </summary>
            <returns>Normally this will be an empty dictionary.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)">
            <summary>
            Copy existing data and add to this model.
            </summary>
            <param name="coll">the collection of data to be copied</param>
            <param name="env">
            the <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> used to keep track of copied objects;
            if null, the method will call <see cref="M:Northwoods.GoXam.Model.IDiagramModel.CreateCopyDictionary"/>, use it, and return it
            </param>
            <returns>the updated copy dictionary</returns>
            <remarks>
            <para>
            The primary purpose of this method is to perform a two-pass copy of a part of a diagram,
            and add the resulting data to this model.
            </para>
            <para>
            Of course you can add node data without copying them by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/> or
            by just adding them directly to the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>.
            </para>
            <para>
            Note that this method is universal, because it can only assume the collections are of type <see cref="T:Northwoods.GoXam.Model.IDataCollection"/>
            and <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/>.
            The corresponding methods in the generic model classes operate on and return a specific collection type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.AddNodeCopy(System.Object)">
            <summary>
            Add a copy of a node data to this model.
            </summary>
            <param name="nodedata"></param>
            <returns>the copied node data</returns>
            <remarks>
            <para>
            This is a convenience method that just calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)">
            <summary>
            Add a node data to <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Add a link between one node/port and another node/port.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)">
            <summary>
            Remove node data from <see cref="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This method can have potential side-effects, such as removing links that are connected to the <paramref name="nodedata"/>.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Remove all links connecting the two nodes/ports in the one direction.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <remarks>
            <para>
            This method can have potential side-effects, such as removing nodes that are labels on the link.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This predicate is true if adding a link between two nodes/ports would result in a valid graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event, given a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>.
            </summary>
            <param name="e">a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that describes what changed and how</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during an Undo or a Redo to actually make state
            changes to this model or to this model's data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.StartTransaction(System.String)">
            <summary>
            Call the UndoManager's StartTransaction method.
            </summary>
            <param name="tname">a String describing the transaction</param>
            <returns>the value of the call to StartTransaction</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.CommitTransaction(System.String)">
            <summary>
            Call the UndoManager's CommitTransaction method.
            </summary>
            <param name="tname">a String describing the transaction</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDiagramModel.RollbackTransaction">
            <summary>
            Call the UndoManager's RollbackTransaction method.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.NodesSource">
            <summary>
            Gets or sets the collection of node data items for the model.
            </summary>
            <value>
            Initially this value is null.  It must be set to a non-null, non-empty value for the model to have any "data".
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.Name">
            <summary>
            A name for this model.
            </summary>
            <value>
            By default this is an empty string.
            </value>
            <remarks>
            This is mostly used to help distinguish between different models of the same type.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat">
            <summary>
            Gets or sets the format of this model's data.
            </summary>
            <value>
            By default this is the fully qualified name of this model type.
            </value>
            <remarks>
            This string is used by clipboard and drag-and-drop operations to distinguish
            between different and presumably incompatible data sources.
            You may wish to provide different values in order to prevent data
            from being transferred to other applications that are using the same model class.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable">
            <summary>
            Gets or sets whether various model-changing methods are enabled.
            </summary>
            <value>
            By default this value is false.
            </value>
            <remarks>
            <para>
            When false, this property disables methods named "Add...", "Modify...", or "Remove...".
            </para>
            <para>
            But note that this property does not and cannot affect the "modifiability"
            or "read-only"-ness of model data, since the data classes may have no knowledge
            about this model class and this property.
            </para>
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Model.IDiagramModel.Changed">
            <summary>
            The Changed event is raised whenever the model is modified.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>
            <seealso cref="T:Northwoods.GoXam.Model.ModelChange"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.IsModified">
            <summary>
            Gets or sets whether this model is considered changed from an earlier state.
            </summary>
            <value>
            true if this model has been marked as having been modified,
            if the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/> has recorded any changes, or
            if an undo has been performed without a corresponding redo.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/> for this model.
            </summary>
            <value>
            When this value is null, there is no <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/>,
            and thus no support for undo/redo.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.SkipsUndoManager">
            <summary>
            Gets or sets a flag that controls whether the model notifies
            any <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/> that a change has occurred.
            </summary>
            <value>
            This is normally false.
            You may want to temporarily set this to true in order to avoid
            recording temporary changes to the model.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.IsChangingModel">
            <summary>
            This property is true during a call to <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>,
            indicating a change happening due to an undo or a redo.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDiagramModel.IsInTransaction">
            <summary>
            True if there is an UndoManager and a transaction has been started.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.DoLinkAdded(System.Object)">
            <summary>
            This method should be called when a link data has been added to the <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.DoLinkRemoved(System.Object)">
            <summary>
            This method should be called when a link data has been removed from the <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.DoLinkPortsChanged(System.Object)">
            <summary>
            This method must be called when either the "from" or the "to" node (or port) has changed.
            </summary>
            <param name="linkdata">a link data</param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.DoLinkLabelChanged(System.Object)">
            <summary>
            This method must be called when any "label" node is added, removed, or replaced.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.IsLinkType(System.Object)">
            <summary>
            This predicate is true if the object is non-null and is of a type that the model accepts for link data.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.IsLinkData(System.Object)">
            <summary>
            This predicate is true if the linkdata is in the <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetLinksForNode(System.Object)">
            <summary>
            Find all links connected to a node in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>a sequence of link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetLinksForNode(System.Object,System.Predicate{System.Object})">
            <summary>
            Find all links connected to a node that satisfy a given predicate.
            </summary>
            <param name="nodedata"></param>
            <param name="predicate">the predicate takes a single argument, the link data</param>
            <returns>a sequence of link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetFromLinksForNode(System.Object)">
            <summary>
            Find all links coming into a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>a sequence of link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetToLinksForNode(System.Object)">
            <summary>
            Find all links going out of a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>a sequence of link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetLinksBetweenNodes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Find all links connecting two nodes/ports in one direction.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns>a sequence of link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetFromNodeForLink(System.Object)">
            <summary>
            Returns the node from which a link comes.
            </summary>
            <param name="linkdata"></param>
            <returns>a node data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetFromParameterForLink(System.Object)">
            <summary>
            Returns any "from" port parameter information.
            </summary>
            <param name="linkdata"></param>
            <returns>the port parameter data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetToNodeForLink(System.Object)">
            <summary>
            Returns the node to which a link goes.
            </summary>
            <param name="linkdata"></param>
            <returns>a node data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetToParameterForLink(System.Object)">
            <summary>
            Returns any "to" port parameter information.
            </summary>
            <param name="linkdata"></param>
            <returns>the port parameter data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetIsLinkLabelForNode(System.Object)">
            <summary>
            This predicate is true if the given node data acts as a label for a link.
            </summary>
            <param name="nodedata">a node data</param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetHasLabelNodeForLink(System.Object)">
            <summary>
            This predicate is true if the given link data has a node label.
            </summary>
            <param name="linkdata">a link data</param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetLabelNodeForLink(System.Object)">
            <summary>
            Find the node data that is the label for a link, if there is one.
            </summary>
            <param name="linkdata">a link data</param>
            <returns>a node data, or null if there is none</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetCategoryForLink(System.Object)">
            <summary>
            To help distinguish between different kinds of links, each link has a "category"
            that is just a string.
            </summary>
            <param name="linkdata"></param>
            <returns>the default category is the empty string</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetHasLabeledLinkForNode(System.Object)">
            <summary>
            This predicate is true if the given node data is associated with a link data as a label.
            </summary>
            <param name="nodedata">a node data that is a "label"</param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.GetLabeledLinkForNode(System.Object)">
            <summary>
            Find the link data with which a label node is associated, if any.
            </summary>
            <param name="nodedata">a node data that is a "label"</param>
            <returns>a link data, or null if there is none</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.AddLinkCopy(System.Object)">
            <summary>
            Add a copy of a link data to this model.
            </summary>
            <param name="linkdata"></param>
            <returns>the newly copied link data</returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.AddLink(System.Object)">
            <summary>
            Add a link data to <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/>.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.RemoveLink(System.Object)">
            <summary>
            Remove a link data from <see cref="P:Northwoods.GoXam.Model.ILinksModel.LinksSource"/>.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.SetLinkFromPort(System.Object,System.Object,System.Object)">
            <summary>
            Set the "from" node and port information for a link data.
            </summary>
            <param name="linkdata">the link data being modified</param>
            <param name="nodedata">a node data</param>
            <param name="portparam"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.SetLinkToPort(System.Object,System.Object,System.Object)">
            <summary>
            Set the "to" node and port information for a link data.
            </summary>
            <param name="linkdata">the link data being modified</param>
            <param name="nodedata">a node data</param>
            <param name="portparam"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.SetLinkLabel(System.Object,System.Object)">
            <summary>
            Change the "label" node data for a link data.
            </summary>
            <param name="linkdata">the link data being modified</param>
            <param name="labelnodedata">the new node data that is a "label"; may be null to remove the label</param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ILinksModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This predicate is true if changing an existing link between two nodes/ports would result in a valid graph
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the new link would come</param>
            <param name="newfromparam">an optional value identifying which port on the "from" node the link would be connected to</param>
            <param name="newtodata">a node key identify the node data to which the new link would go</param>
            <param name="newtoparam">an optional value identifying which port on the "to" node the link would be connected to</param>
            <param name="oldlinkdata">an existing link that would be deleted</param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Model.ILinksModel.LinksSource">
            <summary>
            The collection of link data objects
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ILinksModel.ValidCycle">
            <summary>
            This property controls the overall graph structure that may be drawn.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ILinksModel.ValidUnconnectedLinks">
            <summary>
            This property controls whether link data must always connect to node data at both ends of the link.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.ISubGraphLinksModel">
            <summary>
            This is a <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/> that also supports link data (<see cref="T:Northwoods.GoXam.Model.ILinksModel"/>).
            </summary>
            <remarks>
            <para>
            This model is basically a <see cref="T:Northwoods.GoXam.Model.ISubGraphModel"/> that automatically assigns
            links to belong to groups.  There are two methods, one to get the containing group
            for a link (if any), <see cref="M:Northwoods.GoXam.Model.ISubGraphLinksModel.GetGroupForLink(System.Object)"/>, and one to get all of the
            link data that are members of a group, <see cref="M:Northwoods.GoXam.Model.ISubGraphLinksModel.GetMemberLinksForGroup(System.Object)"/>.
            </para>
            <para>
            Because membership of links in groups is automatically computed,
            there are no modification or updating methods in this interface.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
        </member>
        <member name="T:Northwoods.GoXam.Model.ISubGraphModel">
            <summary>
            The subgraph model is a kind of grouping model that limits each node
            (including subgraphs) to be a member of at most one group.
            </summary>
            <remarks>
            <para>
            The restriction that each node can have at most one container node
            means that there is basically a property for each node data that is a
            reference to its container node, if any.
            </para>
            <para>
            When that property is changed, <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.DoGroupNodeChanged(System.Object)"/> must be called.
            You can get the container group by calling <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.GetGroupForNode(System.Object)"/>.
            You can set the container group by calling <see cref="M:Northwoods.GoXam.Model.ISubGraphModel.SetGroupNode(System.Object,System.Object)"/>.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
        </member>
        <member name="T:Northwoods.GoXam.Model.IGroupsModel">
            <summary>
            A model that supports a grouping relationship between nodes,
            with the relationship information stored on each node as collections of related nodes.
            </summary>
            <remarks>
            <para>
            Each node data can be a group (i.e. a node "container") or not (i.e. an "atomic" node).
            It is assumed that a node data cannot dynamically switch between being a group or not.
            Each node data can have a list of references to "member" nodes.
            All node references are by node data key value.
            </para>
            <para>
            This kind of model assumes the grouping is implicit from these references.
            At this time we do not support a model where the grouping information is
            explicitly provided by data structures different from the node data.
            </para>
            <para>
            There are three categories of methods: updating, navigation, and modification.
            </para>
            <para>
            The updating methods need to be called when there has been a change to the data,
            so that the model can be kept up-to-date.
            These methods include changes to the collection of "member" node keys:
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeyAdded(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeyRemoved(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeysChanged(System.Object)"/>.
            </para>
            <para>
            The navigation methods support examining and traversing the graph.
            One such method is actually defined in the base interface,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)"/>.
            This interface adds the following methods:
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.GetIsGroupForNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IGroupsModel.GetMemberNodesForGroup(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.IsMember(System.Object,System.Object)"/>, and <see cref="M:Northwoods.GoXam.Model.IGroupsModel.IsMemberValid(System.Object,System.Object)"/>.
            </para>
            <para>
            The modification methods are used to alter the graph.
            A number of these methods are defined in <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>, such as 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/>.
            But this interface adds several methods:
            <see cref="M:Northwoods.GoXam.Model.IGroupsModel.AddMemberNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IGroupsModel.RemoveMemberNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IGroupsModel.SetMemberNodeKeys(System.Object,System.Collections.IEnumerable)"/>.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.ISubGraphModel"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeyAdded(System.Object,System.Object)">
            <summary>
            This method should be called when a "member" node data key has been added to the list of members.
            </summary>
            <param name="nodedata"></param>
            <param name="memberkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeyRemoved(System.Object,System.Object)">
            <summary>
            This method should be called when a "member" node data key has been removed from the list of members.
            </summary>
            <param name="nodedata"></param>
            <param name="memberkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.DoMemberNodeKeysChanged(System.Object)">
            <summary>
            This method should be called when the list of member key values has been replaced.
            </summary>
            <param name="nodedata"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.GetIsGroupForNode(System.Object)">
            <summary>
            This predicate is true when the given node data represents a group of nodes
            instead of an "atomic" node.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.GetMemberNodesForGroup(System.Object)">
            <summary>
            Return a collection of member node datas.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.IsMember(System.Object,System.Object)">
            <summary>
            This predicate is true if the <paramref name="membernodedata"/> is an
            immediate member of the <paramref name="groupnodedata"/>.
            </summary>
            <param name="groupnodedata"></param>
            <param name="membernodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.IsMemberValid(System.Object,System.Object)">
            <summary>
            This predicate is true when it is valid to add the <paramref name="membernodedata"/>
            to the <paramref name="groupnodedata"/>.
            </summary>
            <param name="groupnodedata"></param>
            <param name="membernodedata"></param>
            <returns>
            false if the <paramref name="membernodedata"/> cannot be added to <paramref name="groupnodedata"/>
            </returns>
            <remarks>
            This assumes that if the member node is already part of a group, it will be removed from that group first.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.AddMemberNodeKey(System.Object,System.Object)">
            <summary>
            Add a node data key to the list of "member" node data keys.
            </summary>
            <param name="nodedata"></param>
            <param name="membernodekey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.RemoveMemberNodeKey(System.Object,System.Object)">
            <summary>
            Remove a node data key from the list of "member" node data keys.
            </summary>
            <param name="nodedata"></param>
            <param name="membernodekey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IGroupsModel.SetMemberNodeKeys(System.Object,System.Collections.IEnumerable)">
            <summary>
            Replace the list of "member" node data keys with a new collection of keys.
            </summary>
            <param name="nodedata"></param>
            <param name="membernodekeys"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ISubGraphModel.DoGroupNodeChanged(System.Object)">
            <summary>
            This method should be called when the containing group node data for a node data has been changed.
            </summary>
            <param name="nodedata"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ISubGraphModel.GetGroupForNode(System.Object)">
            <summary>
            Get the "container" node data for a given node data.
            </summary>
            <param name="nodedata"></param>
            <returns>a node data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ISubGraphModel.SetGroupNode(System.Object,System.Object)">
            <summary>
            Change the container group node data of a node data.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="groupnodedata">the new "container" group node data, or null to make the node uncontained</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ISubGraphLinksModel.GetGroupForLink(System.Object)">
            <summary>
            Returns the container node data for a link data, if any.
            </summary>
            <param name="linkdata"></param>
            <returns>a node data, or null if there is no container for a link</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ISubGraphLinksModel.GetMemberLinksForGroup(System.Object)">
            <summary>
            Returns a collection of link data that are assumed to belong to the given group data.
            </summary>
            <param name="nodedata">a node data that is a group (a container)</param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            If there are no links in a subgraph, this will be an empty sequence.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.#ctor">
            <summary>
            The default constructor produces an empty model.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateInitializedCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection)">
            <summary>
            Make a copy of this model, without sharing the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> or <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collections.
            </summary>
            <param name="init">
            This is a <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection"/> that provides the initial node and link data.
            (Such data is not copied.)
            If this is null, the initial <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> values are empty collections.
            </param>
            <returns>a model just like this one, but with different data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindKeyForNode(`0)">
            <summary>
            Find the key for node data.
            </summary>
            <param name="nodedata"></param>
            <returns>the (hopefully) unique key for the given node data in this model</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyIsNodeData"/> is true, this just converts
            the <paramref name="nodedata"/> argument to the <typeparamref name="NodeKey"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.MakeNodeKeyUnique(`0)">
            <summary>
            This method is called when a duplicate key has been found.
            </summary>
            <param name="nodedata"></param>
            <returns>
            true to accept the data as a node after having made the key unique in the model;
            false to ignore this data.
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            When a node data is added to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection,
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeAdded(`0)"/> checks for a duplicate key value.
            If it is a duplicate key, this method is called to either modify the node
            data to have a unique key, or to return false to avoid adding the data
            to this model.  (However, the duplicate key node data will still be
            in the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.)
            </para>
            <para>
            This method is frequently overridden to implement the desired
            policy for your particular application model.
            </para>
            <para>
            When the user copies selected nodes into a diagram,
            it is likely that this method will be called.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForNode(`0)">
            <summary>
            Find the category of a node data.
            </summary>
            <param name="nodedata"></param>
            <returns>by default an empty string</returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide which template to use.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeCategoryPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsGroupForNode(`0)">
            <summary>
            Find whether a node data is a group or container of other nodes.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide whether the data represents a group node.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeIsGroupPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindGroupKeyForNode(`0)">
            <summary>
            Find containing group node key for a given node data, if any.
            </summary>
            <param name="nodedata"></param>
            <returns>
            a <typeparamref name="NodeKey"/> for the containing group node,
            or the default value for that type if there is no container node for the node
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)">
            <summary>
            Find the list of keys of the children nodes for a node data object.
            </summary>
            <param name="nodedata"></param>
            <returns>the list of child keys, an <see cref="T:System.Collections.IEnumerable"/> of <typeparamref name="NodeKey"/></returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath"/>
            property path is not flexible enough or fast enough to get the collection of child node keys.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsLinkLabelForNode(`0)">
            <summary>
            Find whether a node data is a "label" for a link data.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide whether the data represents a label node.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeIsLinkLabelPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ClearUnresolvedReferences">
            <summary>
            Forget all unresolved delayed or forward references.
            </summary>
            <remarks>
            <para>
            The model may learn about node data in any order, so references to
            nodes may be unresolvable until later, perhaps never.
            Call this method to clear the internal table that keeps track
            of <typeparamref name="NodeKey"/>s that are not yet defined.
            </para>
            <para>
            This is called when setting a number of property path properties,
            because a model property path change can completely alter the references
            each node data might be making.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ResolveAllReferences">
            <summary>
            Cause <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ResolveNodeKey(`1)"/> to be called on each
            known delayed or forward node reference.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ResolveNodeKey(`1)">
            <summary>
            This is called repeatedly by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ResolveAllReferences"/>,
            once for each known delayed or forward node reference.
            </summary>
            <param name="nodekey"></param>
            <remarks>
            Depending on the situation, you may want to create and
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertNode(`0)"/> in order to resolve a reference.
            Or you may want to ignore it, and later call
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ClearUnresolvedReferences"/> to make sure no
            future node data addition might resolve the reference.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.HandleNodePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> event handler for node data.
            </summary>
            <param name="sender"></param>
            <param name="e">preferably a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that describes what changed and how</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <paramref name="e"/> argument is a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>,
            this first calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> in order to raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event
            to notify this model's consumers.
            </para>
            <para>
            If the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> is the same as the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath"/>, or <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath"/>,
            this automatically calls
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeKeyChanged(`0)"/>, <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoGroupNodeChanged(`0)"/>, or <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoMemberNodeKeysChanged(`0)"/>,
            respectively.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeAdded(`0)">
            <summary>
            This should be called when a node data object is added to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> has been augmented.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeRemoved(`0)">
            <summary>
            This should be called when a node data object is removed from the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> has been diminished.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeKeyChanged(`0)">
            <summary>
            This should be called when a node data's key value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeCategoryChanged(`0)">
            <summary>
            This should be called when a node data's category value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeCategoryPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoGroupNodeChanged(`0)">
            <summary>
            This should be called when a node data's membership in a group may have changed.
            </summary>
            <param name="nodedata">the modified node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindGroupKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedGroupNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoMemberNodeKeyAdded(`0,`1)">
            <summary>
            This should be called when a "member" node data key has been added to the collection of "member" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="memberkey">the key for the added "member" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "member" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedMemberNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoMemberNodeKeyRemoved(`0,`1)">
            <summary>
            This should be called when a "member" node data key has been removed from the collection of "member" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="memberkey">the key for the removed "member" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "member" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedMemberNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoMemberNodeKeysChanged(`0)">
            <summary>
            This should be called when a node data's list of "member" nodes has been replaced.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedMemberNodeKeys"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromNodeKeyForLink(`3)">
            <summary>
            Find the "from" node key for a given link data.
            </summary>
            <param name="linkdata"></param>
            <returns>
            a <typeparamref name="NodeKey"/> for the connected node
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromParameterForLink(`3)">
            <summary>
            Find additional information about the "from" node connection for a given link data.
            </summary>
            <param name="linkdata"></param>
            <returns>
            a <typeparamref name="PortKey"/>
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromParameterPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToNodeKeyForLink(`3)">
            <summary>
            Find the "to" node key for a given link data.
            </summary>
            <param name="linkdata"></param>
            <returns>
            a <typeparamref name="NodeKey"/> for the connected node
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToParameterForLink(`3)">
            <summary>
            Find additional information about the "to" node connection for a given link data.
            </summary>
            <param name="linkdata"></param>
            <returns>
            a <typeparamref name="PortKey"/>
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToParameterPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)">
            <summary>
            Find the "label" node key for a given link data, if any.
            </summary>
            <param name="linkdata"></param>
            <returns>
            a <typeparamref name="NodeKey"/> for the label node data
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkLabelNodePath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForLink(`3)">
            <summary>
            Find the category of a link data.
            </summary>
            <param name="linkdata"></param>
            <returns>by default an empty string</returns>
            <remarks>
            <para>
            This is called on each link data that is added to the model.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkCategoryPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsEqualPortParameters(`2,`2)">
            <summary>
            This predicate compares two <typeparamref name="PortKey"/> values
            and returns true if they are "equal".
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            Normally this uses the default <c>EqualityComparer</c> for the <typeparamref name="PortKey"/> type.
            But you may need to override this method if that kind of equality comparison is inappropriate
            for your port information.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.HandleLinkPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> event handler for link data.
            </summary>
            <param name="sender"></param>
            <param name="e">preferably a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that describes what changed and how</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <paramref name="e"/> argument is a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>,
            this first calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> in order to raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event
            to notify this model's consumers.
            </para>
            <para>
            If the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> is the same as the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToPath"/>,
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromParameterPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToParameterPath"/>,
            this automatically calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkPortsChanged(`3)"/>.
            If the property name is <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkLabelNodePath"/>,
            this automatically calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkLabelChanged(`3)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkAdded(`3)">
            <summary>
            This should be called when a link data object is added to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> has been augmented.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedLink"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkRemoved(`3)">
            <summary>
            This should be called when a link data object is removed from the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> has been diminished.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedLink"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkPortsChanged(`3)">
            <summary>
            This should be called when a link data's connected node or port, either "from" or "to", may have changed.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a link data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToPath"/>,
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromParameterPath"/>, or <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToParameterPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromNodeKeyForLink(`3)"/>, <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToNodeKeyForLink(`3)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromParameterForLink(`3)"/>, or <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToParameterForLink(`3)"/>
            has changed.
            </para>
            <para>
            This raises <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event(s) with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkFromPort"/>
            and/or <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkToPort"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkLabelChanged(`3)">
            <summary>
            This should be called when a link data's label node may have changed.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a link data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkLabelNodePath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkLabelKey"/>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoLinkCategoryChanged(`3)">
            <summary>
            This should be called when a link data's category value may have changed.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a link data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkCategoryPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForLink(`3)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkCategory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetNodeType">
            <summary>
            Return the <typeparamref name="NodeType"/>.
            </summary>
            <returns>a <see cref="T:System.Type"/>, not a node data object, nor a string</returns>
            <remarks>
            This is useful for data transfer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsNodeType(System.Object)">
            <summary>
            This predicate is true when the argument is an instance of <typeparamref name="NodeType"/>.
            </summary>
            <param name="nodedata">the arbitrary object to be checked for compatibility to be a node data</param>
            <returns>
            true if the <paramref name="nodedata"/> can be cast to the <typeparamref name="NodeType"/>;
            false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsNodeData(`0)">
            <summary>
            This predicate is true if the argument is a node data in this model.
            </summary>
            <param name="nodedata">the <typeparamref name="NodeType"/> object to be checked to see if it is a known node data in this model</param>
            <returns>
            true if the <paramref name="nodedata"/> is in the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            This uses a hash table lookup.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsLinkType(System.Object)">
            <summary>
            Return the <typeparamref name="LinkType"/>.
            </summary>
            <returns>a <see cref="T:System.Type"/>, not a link data object, nor a string</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsLinkData(`3)">
            <summary>
            This predicate is true if the argument is a link data in this model.
            </summary>
            <param name="linkdata">the object to be checked to see if it is a known link data in this model</param>
            <returns>
            true if the <paramref name="linkdata"/> is in the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            This uses a hash table lookup.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindNodeByKey(`1)">
            <summary>
            Given a key, find the node data with that key.
            </summary>
            <param name="key">
            a value of null for this argument will result in the default value for <typeparamref name="NodeType"/>
            </param>
            <returns>
            a <typeparamref name="NodeType"/>;
            the value will be the default for the type if no such node data is known to be in this model
            </returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyIsNodeData"/> is true,
            this just converts the <paramref name="key"/> argument
            to the <typeparamref name="NodeType"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsLinked(`0,`2,`0,`2)">
            <summary>
            This predicate is true if there is a link from one node data/port to another one.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetConnectedNodesForNode(`0,System.Predicate{`2})">
            <summary>
            Return a sequence of node data that are directly connected to a given node, in either direction.
            </summary>
            <param name="nodedata"></param>
            <param name="portpred">
            a predicate to be applied to each port parameter;
            if non-null, this predicate must be true for the node to be included in the return sequence
            </param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetConnectedNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected to a given node, in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetFromNodesForNode(`0,System.Predicate{`2})">
            <summary>
            Return a sequence of node data that are directly connected by links going into a given node.
            </summary>
            <param name="nodedata"></param>
            <param name="toportpred">
            a predicate to be applied to each "to" port parameter;
            if non-null, this predicate must be true for the "from" node to be included in the return sequence
            </param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetFromNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links going into a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetToNodesForNode(`0,System.Predicate{`2})">
            <summary>
            Return a sequence of node data that are directly connected by links coming out from a given node.
            </summary>
            <param name="nodedata"></param>
            <param name="fromportpred">
            a predicate to be applied to each "from" port parameter;
            if non-null, this predicate must be true for the "to" node to be included in the return sequence
            </param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetToNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links coming out from a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetFromNodeForLink(`3)">
            <summary>
            Return the "from" node data at which a link data is connected.
            </summary>
            <param name="linkdata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetFromParameterForLink(`3)">
            <summary>
            Return additional "port" information for the "from" end of a link data.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetToNodeForLink(`3)">
            <summary>
            Return the "to" node data at which a link data is connected.
            </summary>
            <param name="linkdata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetToParameterForLink(`3)">
            <summary>
            Return additional "port" information for the "to" end of a link data.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLinksForNode(`0)">
            <summary>
            Return a sequence of link data that are connnected at a given node data, in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLinksForNode(`0,System.Predicate{`3})">
            <summary>
            Return a sequence of link data that are connnected at a given node data, in either direction,
            that satisfy a given predicate.
            </summary>
            <param name="nodedata"></param>
            <param name="predicate">a delegate that takes a <typeparamref name="LinkType"/> as an argument and returns a boolean</param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetFromLinksForNode(`0)">
            <summary>
            Return a sequence of link data that are connnected at a given node data, only going into the given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetToLinksForNode(`0)">
            <summary>
            Return a sequence of link data that are connnected at a given node data, only coming out of the given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLinksBetweenNodes(`0,`2,`0,`2)">
            <summary>
            Return a sequence of all link data that go from one node to another, possibly restricted to certain "ports".
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetIsLinkLabelForNode(`0)">
            <summary>
            This predicate is true if the given node data may be used as a "label" for a link.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetHasLabelNodeForLink(`3)">
            <summary>
            This predicate is true if the given link data has a "label" node.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLabelNodeForLink(`3)">
            <summary>
            Get the "label" node data for a link data, if any.
            </summary>
            <param name="linkdata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetCategoryForLink(`3)">
            <summary>
            This method gets the category of a link.
            </summary>
            <param name="linkdata"></param>
            <returns>a String, defaulting to the empty string</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetHasLabeledLinkForNode(`0)">
            <summary>
            This predicate is true for a node data if it is associated with a link data as its "label".
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLabeledLinkForNode(`0)">
            <summary>
            Get the link data that refers to a given node data as its "label".
            </summary>
            <param name="nodedata"></param>
            <returns>a <typeparamref name="LinkType"/> link data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetCategoryForNode(`0)">
            <summary>
            This method gets the category of a node.
            </summary>
            <param name="nodedata"></param>
            <returns>a String, defaulting to the empty string</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetIsGroupForNode(`0)">
            <summary>
            This predicate is true if a given node data may be a group (i.e. a container) of other nodes.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsMember(`0,`0)">
            <summary>
            This predicate is true if the <paramref name="membernodedata"/> is a member
            of the <paramref name="groupnodedata"/> container group.
            </summary>
            <param name="groupnodedata"></param>
            <param name="membernodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetGroupForNode(`0)">
            <summary>
            Return the container group node data for a given node data, if there is one.
            </summary>
            <param name="nodedata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetMemberNodesForGroup(`0)">
            <summary>
            Return a sequence of node data that are immediate members of a given node data.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of member node data; an empty sequence if there are no members</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetGroupForLink(`3)">
            <summary>
            Return a container node data for a given link data, if the link belongs to a group.
            </summary>
            <param name="linkdata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetMemberLinksForGroup(`0)">
            <summary>
            Return a sequence of link data that are contained by a given node data.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of member link data; an empty sequence if there are no member links</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyNode1(`0,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)">
            <summary>
            This is the first pass of copying node data, responsible for constructing
            a copy and copying most of its properties.
            </summary>
            <param name="nodedata"></param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <returns>the copied node data</returns>
            <remarks>
            <para>
            By default this handles <c>ICloneable</c> or serializable objects.
            But you may want to override this method to customize which properties
            get copied or how they are copied or to provide a faster implementation.
            </para>
            <para>
            This does NOT ensure that the copied node data has a unique key.
            You must do that before adding it to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection,
            either by overriding the data's Clone method,
            by declaring the data Serializable (WPF), or
            by overriding this method.
            Or you can override the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.MakeNodeKeyUnique(`0)"/> method that is called when
            data is added to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection of the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyNode2(`0,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This is the second pass of copying node data, responsible for fixing up
            references to other objects.
            </summary>
            <param name="oldnodedata">the original node data</param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <param name="newnodedata">the copied node data</param>
            <param name="newgroup">for convenience, the copied "parent" node data</param>
            <param name="newmembers">for convenience, a list of newly copied member nodes</param>
            <remarks>
            <para>
            You will want to override this method if the node data should have any references
            to copied data.
            Otherwise the copied node will appear to have links to the original nodes,
            not to the copied nodes.
            </para>
            <para>
            Your overridden method may want to do something like what this method does by default:
            <code>
              // this assumes the node data has a reference to its container group
              if (this.GroupNodePath != "" &amp;&amp; newgroup != null) {
                ModifyGroupNodeKey(newnodedata, FindKeyForNode(newgroup));
              }
              // this assumes there's a modifiable collection that InsertMemberNodeKey can work with;
              // if not, you could instead construct your own list and call ModifyMemberNodeKeys.
              if (this.MemberNodesPath != "" &amp;&amp; newmembers != null) {
                // remove any old keys; not needed if the copied property value is empty
                foreach (NodeKey k in FindMemberNodeKeysForNode(newnodedata).OfType&lt;NodeKey&gt;().ToList()) {
                  DeleteMemberNodeKey(newnodedata, k);
                }
                // add new keys (which should be different from the old keys)
                foreach (NodeType newmem in newmembers) {
                  NodeKey newmemkey = FindKeyForNode(newmem);
                  InsertMemberNodeKey(newnodedata, newmemkey);
                }
              }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink1(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)">
            <summary>
            This is the first pass of copying link data, responsible for constructing
            a copy and copying most of its properties.
            </summary>
            <param name="linkdata"></param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <returns>the copied link data</returns>
            <remarks>
            <para>
            By default this handles <c>ICloneable</c> or serializable (WPF) objects.
            But you may want to override this method to customize which properties
            get copied or how they are copied or to provide a faster implementation.
            </para>
            <para>
            The resulting new link data may (temporarily) continue to refer to the same
            nodes/ports as the original did.  The second pass, <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink2(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`3,`0,`0,`0)"/>,
            should fix up those references.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink2(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`3,`0,`0,`0)">
            <summary>
            This is the second pass of copying link data, responsible for fixing up
            references to other objects.
            </summary>
            <param name="oldlinkdata">the original link data</param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <param name="newlinkdata">the copied link data</param>
            <param name="newfromnodedata">for convenience, the copied "from" node</param>
            <param name="newtonodedata">for convenience, the copied "to" node</param>
            <param name="newlinklabel">for convenience, the copied "label" node</param>
            <remarks>
            <para>
            You will want to override this method if the link data should have any references
            to copied data.
            Otherwise the copied link will appear to connect the original nodes,
            not the copied nodes.
            </para>
            <para>
            When <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidUnconnectedLinks"/> is <see cref="F:Northwoods.GoXam.Model.ValidUnconnectedLinks.None"/>
            (the default value), if either <paramref name="newfromnodedata"/> or <paramref name="newtonodedata"/>
            is null, this will remove the copied link from the model, to avoid having disconnected links.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateDataCollection">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateCopyDictionary">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> initialized for this model.
            </summary>
            <returns>Normally this will be an empty dictionary.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddNodeCopy(`0)">
            <summary>
            Add a copy of a node data to this model.
            </summary>
            <param name="nodedata"></param>
            <returns>the copied node data</returns>
            <remarks>
            <para>
            This is a convenience method that just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddLinkCopy(`3)">
            <summary>
            Add a copy of a link data to this model.
            </summary>
            <param name="linkdata"></param>
            <returns>the copied link data</returns>
            <remarks>
            <para>
            This is a convenience method that just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)">
            <summary>
            Copy existing node and link data and add to this model.
            </summary>
            <param name="coll">the collection of data to be copied</param>
            <param name="env">
            the <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> used to keep track of copied objects;
            if null, the method will call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateCopyDictionary"/>, use it, and return it
            </param>
            <returns>the updated copy dictionary, mapping original data to copied data</returns>
            <remarks>
            <para>
            The primary purpose of this method is to perform a two-pass copy of a part of a diagram,
            and add the resulting data to this model.
            </para>
            <para>
            Of course you can add data without copying them by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddNode(`0)"/> and <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddLink(`3)"/>
            or by just adding them directly to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>.
            </para>
            <para>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AugmentCopyCollection(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection)"/> on the source model to allow it to extend the
            collection to include parts that it thinks should be in the collection.
            </para>
            <para>
            Then it calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AugmentCopyDictionary(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/> on this, the destination model, to allow it
            to prepopulate the <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary"/> if it wants to guide the copying process to
            control the sharing of references in the copied parts.
            </para>
            <para>
            The first pass copies all of the nodes that are not already in the <paramref name="env"/>
            copy dictionary, by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyNode1(`0,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/>.  If the call returns a node data,
            it is added to this model by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddNode(`0)"/> and remembered in the
            <paramref name="env"/> copy dictionary, mapped to the original node data.
            </para>
            <para>
            The first pass also copies all of the links that are not already in the <paramref name="env"/>
            copy dictionary, by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink1(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/>.  If the call returns a link data,
            it is added to this model by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddLink(`3)"/> and remembered in the
            <paramref name="env"/> copy dictionary, mapped to the original link data.
            </para>
            <para>
            The second pass fixes up references in all of the copied nodes by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyNode2(`0,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0})"/>.
            It passes as arguments both the original node data and the copied node data, as well as the
            newly copied group node, if any, and a list of any member nodes.
            </para>
            <para>
            The second pass also fixes up references in all of the copied links by calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink2(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`3,`0,`0,`0)"/>.
            It passes as arguments both the original link data and the copied link data, as well as the
            newly copied from, to, and label nodes, if any.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AugmentCopyCollection(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection)">
            <summary>
            Override this method to add more (related) data to be copied.
            </summary>
            <param name="coll">the collection of data to be copied</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AugmentCopyDictionary(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)">
            <summary>
            Override this method to avoid copying some data, or to change how copied references are resolved.
            </summary>
            <param name="env">the dictionary mapping original objects to copied objects</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertNode(`0)">
            <summary>
            This method actually implements the addition of a node data to the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddNode(`0)">
            <summary>
            Add a node data to <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertNode(`0)"/> to actually perform the addition.
            This is a no-op if the node data is already in the model.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertLink(`3)">
            <summary>
            This method actually implements the addition of a link data to the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertLink(`0,`2,`0,`2)">
            <summary>
            This method actually implements the creation and addition of a link data to the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddLink(`3)">
            <summary>
            Add a link data to <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertLink(`3)"/> to actually perform the addition.
            This is a no-op if the link data is already in the model.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddLink(`0,`2,`0,`2)">
            <summary>
            Add a link data to <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertLink(`0,`2,`0,`2)"/> to actually perform the addition.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteNode(`0)">
            <summary>
            This method actually implements the removal of a node data from the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.RemoveNode(`0)">
            <summary>
            Remove a node data from <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This also removes any links connected to this node.
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteNode(`0)"/> to actually perform the removal.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteLink(`3)">
            <summary>
            This method actually implements the removal of a link data from the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteLink(`0,`2,`0,`2)">
            <summary>
            This method actually implements the removal of a link data from the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <remarks>
            By default this calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteLink(`3)"/> on each link found by
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.GetLinksBetweenNodes(`0,`2,`0,`2)"/>.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.RemoveLink(`3)">
            <summary>
            Remove a link data from <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            This also removes any links connected to this link.
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteLink(`3)"/> to actually perform the removal.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.RemoveLink(`0,`2,`0,`2)">
            <summary>
            Remove all link data from <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> that connect the two nodes/ports.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <remarks>
            This also removes any links connected to this link.
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteLink(`0,`2,`0,`2)"/> to actually perform the removal.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkFromPort(`3,`1,`2)">
            <summary>
            This method actually implements the modification of a link data
            to change the reference to the "from" node data and the link's "from" port information.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="nodekey">the new node data's <typeparamref name="NodeKey"/></param>
            <param name="portparam"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromPath"/>
            or <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromParameterPath"/>
            property paths are not flexible enough or fast enough to get the node and port for a link.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.SetLinkFromPort(`3,`1,`2)">
            <summary>
            Change a link data so that it refers to a different "from" node data and associated port information.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="nodekey">the new node data's <typeparamref name="NodeKey"/></param>
            <param name="portparam"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkFromPort(`3,`1,`2)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkToPort(`3,`1,`2)">
            <summary>
            This method actually implements the modification of a link data
            to change the reference to the "to" node data and the link's "to" port information.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="nodekey">the new node data's <typeparamref name="NodeKey"/></param>
            <param name="portparam"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToPath"/>
            or <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToParameterPath"/>
            property paths are not flexible enough or fast enough to get the node and port for a link.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.SetLinkToPort(`3,`1,`2)">
            <summary>
            Change a link data so that it refers to a different "to" node data and associated port information.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="nodekey">the new node data's <typeparamref name="NodeKey"/></param>
            <param name="portparam"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkToPort(`3,`1,`2)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyGroupNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that its reference to a containing group node data (if any) is the given <paramref name="groupkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="groupkey">the key value of the "group" node data</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.SetGroupNodeKey(`0,`1)">
            <summary>
            Change a node data so that it refers to a different container group node data, by node key.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="groupkey">the key value of the new "group" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyGroupNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertMemberNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of member node data includes a given <paramref name="memberkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="memberkey">the key value of the new "member" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddMemberNodeKey(`0,`1)">
            <summary>
            Add a "member" node data's key value to a node data's list of "members".
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="memberkey">the key value of the new "member" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertMemberNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteMemberNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of children node data does not include a given <paramref name="memberkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="memberkey">the key value of the "member" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.RemoveMemberNodeKey(`0,`1)">
            <summary>
            Remove a child node data's key value from a group node data's list of "member" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="memberkey">the key value of the "member" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DeleteMemberNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyMemberNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            This method actually implements the replacement of a group node data's
            collection of member node keys.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="membernodekeys">a sequence of "member" node data key values</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.SetMemberNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "member" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="membernodekeys">a sequence of "member" node data key values</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyMemberNodeKeys(`0,System.Collections.IEnumerable)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkLabelKey(`3,`1)">
            <summary>
            This method actually implements the modification of a link data
            to change the reference to the "label" node data.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="linklabelkey">the new label data's <typeparamref name="NodeKey"/></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkLabelNodePath"/>
            property path is not flexible enough or fast enough to get the node and port for a link.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.SetLinkLabelKey(`3,`1)">
            <summary>
            Change a link data so that it refers to a different "label" node data.
            </summary>
            <param name="linkdata">the link data to be modified</param>
            <param name="linklabelkey">the new label data's <typeparamref name="NodeKey"/></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.ModifyLinkLabelKey(`3,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsLinkValid(`0,`2,`0,`2)">
            <summary>
            This predicate is true if adding a link between two nodes/ports would result in a valid graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckLinkValid(`0,`2,`0,`2,System.Boolean,`3)"/> to do the actual graph structure check.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle"/>
            <seealso cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidUnconnectedLinks"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsRelinkValid(`0,`2,`0,`2,`3)">
            <summary>
            This predicate is true if replacing a link between two nodes/ports would result in a valid graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <param name="oldlinkdata">the original link data that might be modified</param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckLinkValid(`0,`2,`0,`2,System.Boolean,`3)"/> to do the actual graph structure check.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle"/>
            <seealso cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidUnconnectedLinks"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckLinkValid(`0,`2,`0,`2,System.Boolean,`3)">
            <summary>
            This predicate is true if adding a link between two nodes/ports would result in a validly structured graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="fromparam">an optional value identifying which port on the "from" node the link is connected to</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <param name="toparam">an optional value identifying which port on the "to" node the link is connected to</param>
            <param name="ignoreexistinglink">true if relinking; false if adding a new link</param>
            <param name="oldlinkdata">the original link data that might be modified, if <paramref name="ignoreexistinglink"/> is true</param>
            <returns>
            The behavior of this predicate depends on the value of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidUnconnectedLinks"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.IsMemberValid(`0,`0,System.Boolean)">
            <summary>
            This predicate is true if adding <paramref name="membernodedata"/> to a group node
            (<paramref name="groupnodedata"/>) would result in an invalid graph.
            </summary>
            <param name="groupnodedata">the node data that is a group</param>
            <param name="membernodedata">a node data</param>
            <param name="ignoreexistingmembership">
            whether to ignore the <paramref name="membernodedata"/>'s existing group membership,
            because that member is being transferred out of its existing group
            </param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckMemberValid(`0,`0,System.Boolean)"/> to do the actual graph structure check.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckMemberValid(`0,`0,System.Boolean)">
            <summary>
            This predicate is true if adding a node to a group node would result in an invalid graph.
            </summary>
            <param name="groupnodedata">the node data that is a group</param>
            <param name="membernodedata">a node data to be considered for adding to the group</param>
            <param name="ignoreexistingmembership">
            whether to ignore the <paramref name="membernodedata"/>'s existing group membership,
            because that member is being transferred out of its existing group
            </param>
            <returns>
            This returns false for membership that would break the tree structure of the model's graph of groups.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ChangeModelValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to this model.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to model data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.Save``2(System.Xml.Linq.XName,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Generate a Linq for XML <c>XElement</c> holding all of the node and link data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphLinksModelNodeData`1"/></typeparam>
            <typeparam name="LinkDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/></typeparam>
            <param name="rootname">the name of the returned <c>XElement</c></param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <param name="linkname">the name of each <c>XElement</c> holding link data</param>
            <returns>an <c>XElement</c></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node and link data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collections with collections
            of new node data and new link data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphLinksModelNodeData`1"/> with a public zero-argument constructor</typeparam>
            <typeparam name="LinkDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/> with a public zero-argument constructor</typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <param name="linkname">the name of each <c>XElement</c> holding link data</param>
            <remarks>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.Load``2(System.Xml.Linq.XContainer,System.Func{System.Xml.Linq.XElement,``0},System.Func{System.Xml.Linq.XElement,``1})">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node and link data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> and <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collections with collections
            of new node data and new link data.
            </summary>
            <typeparam name="NodeDataType">this must be a class inheriting from <see cref="T:Northwoods.GoXam.Model.GraphLinksModelNodeData`1"/></typeparam>
            <typeparam name="LinkDataType">this must be a class inheriting from <see cref="T:Northwoods.GoXam.Model.GraphLinksModelLinkData`2"/></typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodedataallocator">
            a function that takes an <c>XElement</c> and returns either a newly constructed object of type <typeparamref name="NodeDataType"/>
            or null if that <c>XElement</c> is to be ignored
            </param>
            <param name="linkdataallocator">
            a function that takes an <c>XElement</c> and returns either a newly constructed object of type <typeparamref name="LinkDataType"/>
            or null if that <c>XElement</c> is to be ignored
            </param>
            <remarks>
            <para>
            This will iterate over all of the child elements of the <paramref name="root"/> container,
            calling <paramref name="nodedataallocator"/> on each one.
            If that function returns non-null, it calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/> on the new data
            and then adds it to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            It will then iterate again over all of the child elements of the root container,
            calling <paramref name="linkdataallocator"/> on each one.
            If that function returns non-null, it calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModelLinkData`2.LoadFromXElement(System.Xml.Linq.XElement)"/> on the new data
            and then adds it to the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/> collection.
            </para>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource">
            <summary>
            Gets or sets the collection of node data items for the model.
            </summary>
            <value>
            Initially this value is an empty <c>ObservableCollection</c>.
            It cannot be set to a null value.
            For generality, this is of type <see cref="T:System.Collections.IEnumerable"/>.
            </value>
            <remarks>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodesSource"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyPath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for node data.
            </summary>
            <value>
            This defaults to an empty string, meaning to use the data as the key value.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyIsNodeData">
            <summary>
            Gets or sets whether all node data are also their own keys.
            </summary>
            <value>
            The default value is false.
            For this to be set to true, the <typeparamref name="NodeType"/> type
            and the <typeparamref name="NodeKey"/> types must be the same.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  It is an optimization that
            avoids the use of an additional hash table mapping
            <typeparamref name="NodeKey"/> values to their <typeparamref name="NodeType"/> data,
            and permits other optimizations as well.
            This can often be set to true when "references" to nodes
            are actually using .NET CLR references (i.e. "pointers") instead
            of values such as integer, strings, GUIDs et al.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyReferenceAutoInserts">
            <summary>
            Gets or sets whether a <typeparamref name="NodeKey"/> reference,
            when <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyIsNodeData"/> is true,
            automatically inserts the node into <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/>.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property only has an effect when <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeKeyIsNodeData"/> is true.
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.DoNodeAdded(`0)"/> calls <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.InsertNode(`0)"/> if the referred-to
            node is not already known to be in the <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeCategoryPath">
            <summary>
            Gets or sets a property path that that specifies how to find the category of a node data.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForNode(`0)"/> to return an empty string.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a string.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeIsGroupPath">
            <summary>
            Gets or sets a property path that that specifies how to find out whether
            a node data is also a "container" group.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsGroupForNode(`0)"/> to return false.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsGroupForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a boolean.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.GroupNodePath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for "container" or group node data of a node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindGroupKeyForNode(`0)"/>.
            Otherwise that method is called to try to find the container node for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindGroupKeyForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindGroupKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.MemberNodesPath">
            <summary>
            Gets or sets a property path that that specifies how to get a list of keys for the "member" nodes of a group node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/>.
            Otherwise that method is called to try to find the list of children for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindMemberNodeKeysForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <see cref="T:System.Collections.IEnumerable"/>,
            holding only instances of <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodeIsLinkLabelPath">
            <summary>
            Gets or sets a property path that that specifies how to find out whether
            a node data is also a "label" for a link data.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsLinkLabelForNode(`0)"/> to return false.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindIsLinkLabelForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a boolean.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource">
            <summary>
            Gets or sets the collection of link data items for the model.
            </summary>
            <value>
            Initially this value is an empty <c>ObservableCollection</c>.
            It cannot be set to a null value.
            For generality, this is of type <see cref="T:System.Collections.IEnumerable"/>.
            </value>
            <remarks>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedLinksSource"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromPath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for the "from" node data of a link data object.
            </summary>
            <value>
            This value is used by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromNodeKeyForLink(`3)"/> to get a reference
            to the node data from which this link comes.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromNodeKeyForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkFromParameterPath">
            <summary>
            Gets or sets a property path that that specifies how to get optional "port" parameter information
            for the "from" node data of a link data object.
            </summary>
            <value>
            This value is used by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromParameterForLink(`3)"/> to get an object
            describing the "from" end of this link data.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindFromParameterForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be of type <typeparamref name="PortKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToPath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for the "to" node data of a link data object.
            </summary>
            <value>
            This value is used by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToNodeKeyForLink(`3)"/> to get a reference
            to the node data to which this link goes.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToNodeKeyForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkToParameterPath">
            <summary>
            Gets or sets a property path that that specifies how to get optional "port" parameter information
            for the "to" node data of a link data object.
            </summary>
            <value>
            This value is used by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToParameterForLink(`3)"/> to get an object
            describing the "to" end of this link data.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindToParameterForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be of type <typeparamref name="PortKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkLabelNodePath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for the "label" node data of a link data object.
            </summary>
            <value>
            This value is used by <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)"/> to get a reference
            to the node data associated with this link.
            The default value, an empty string, means there is no label node for any link --
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)"/> will not be called.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindLabelNodeKeyForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinkCategoryPath">
            <summary>
            Gets or sets a property path that that specifies how to find the category of a link data.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForLink(`3)"/> to return an empty string.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.FindCategoryForLink(`3)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a link data object must be a string.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidCycle">
            <summary>
            Specify what kinds of graphs this model allows.
            </summary>
            <remarks>
            Changing this property will not remove or add any links,
            but will only affect future attempts to add or modify links
            by affecting the results of calling <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckLinkValid(`0,`2,`0,`2,System.Boolean,`3)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.ValidUnconnectedLinks">
            <summary>
            Gets or sets whether each link data must have both ends refer to node data.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Model.ValidUnconnectedLinks.None"/>.
            </value>
            <remarks>
            This affects the standard behavior of <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CheckLinkValid(`0,`2,`0,`2,System.Boolean,`3)"/> and <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyLink2(`3,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary,`3,`0,`0,`0)"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection">
            <summary>
            This nested class is a serializable collection of node data and link data.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> is used in various circumstances where
            there is a collection of node data and link data, particularly for copying.
            If the node data and link data are serializable, this collection can be serialized,
            which is useful when copying to the clipboard or pasting from it.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType, NodeKey, PortKey, and LinkType type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateDataCollection"/> to allocate an instance.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.IDataCollection">
            <summary>
            A serializable collection of data representing a set of nodes and links.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModel`2.DataCollection"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2.DataCollection"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.ContainsNode(System.Object)">
            <summary>
            This predicate is true if the given node data is in the collection of <see cref="P:Northwoods.GoXam.Model.IDataCollection.Nodes"/>.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.AddNode(System.Object)">
            <summary>
            Add a node data to this collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.RemoveNode(System.Object)">
            <summary>
            Remove a node data from this collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.ContainsLink(System.Object)">
            <summary>
            This predicate is true if the given link data is in the collection of <see cref="P:Northwoods.GoXam.Model.IDataCollection.Links"/>.
            </summary>
            <param name="linkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This will always be false for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.AddLink(System.Object)">
            <summary>
            Add a link data to this collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is an error for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.IDataCollection.RemoveLink(System.Object)">
            <summary>
            Remove a link data from this collection.
            </summary>
            <param name="linkdata"></param>
            <remarks>
            <para>
            This is an error for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDataCollection.Model">
            <summary>
            Gets or sets the model holds this collection's data.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDataCollection.Nodes">
            <summary>
            Gets or sets the collection of node data.
            </summary>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.IDataCollection.Links">
            <summary>
            Gets or sets the collection of link data.
            </summary>
            <remarks>
            <para>
            This will always be an empty sequence for those models that do not support separate link data.
            Setting this property is an error for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.#ctor">
            <summary>
            The default constructor produces an empty collection.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateDataCollection"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.ContainsNode(`0)">
            <summary>
            This predicate is true if the given node data is in the collection of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.Nodes"/>.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.AddNode(`0)">
            <summary>
            Add a node data to this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data is already in the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.RemoveNode(`0)">
            <summary>
            Remove a node data from this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data was not in the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.ContainsLink(`3)">
            <summary>
            This predicate is true if the given link data is in the collection of <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.Links"/>.
            </summary>
            <param name="linkdata">the data type is the model's LinkType type parameter</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.AddLink(`3)">
            <summary>
            Add a link data to this collection.
            </summary>
            <param name="linkdata">the data type is the model's LinkType type parameter</param>
            <remarks>
            This is a no-op if the link data is already in the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.RemoveLink(`3)">
            <summary>
            Remove a link data from this collection.
            </summary>
            <param name="linkdata">the data type is the model's LinkType type parameter</param>
            <remarks>
            This is a no-op if the link data was not in the collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.Model">
            <summary>
            Gets or sets the model that owns all of the nodes in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.Nodes">
            <summary>
            Gets or sets the collection of node data, each of type <typeparamref name="NodeType"/>.
            </summary>
            <value>
            Setting this property will enumerate all of the node data
            that the argument value collection contains.
            If the new value is null, this collection is cleared.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection.Links">
            <summary>
            Gets or sets the collection of link data, each of type <typeparamref name="LinkType"/>.
            </summary>
            <value>
            Setting this property will enumerate all of the link data
            that the argument value collection contains.
            If the new value is null, this collection is cleared.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary">
            <summary>
            This nested class is used during copying to hold a mapping of original nodes
            to newly copied nodes and original links to newly copied links.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> is used during the two-pass copying process
            to keep track of which newly copied node data correspond to which original node data
            and which newly copied link data correspond to which original link data.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType, NodeKey, PortKey, and LinkType type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateCopyDictionary"/> to allocate an instance.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.ICopyDictionary">
            <summary>
            A dictionary of data representing a set of nodes and links and their corresponding copies,
            used during the copying process.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary"/>
            <seealso cref="T:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.ContainsSourceNode(System.Object)">
            <summary>
            This predicate is true if the given node data is in the source collection.
            </summary>
            <param name="srcnodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.FindCopiedNode(System.Object)">
            <summary>
            Look up the copied node for a given source node.
            </summary>
            <param name="srcnodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.AddCopiedNode(System.Object,System.Object)">
            <summary>
            Declare the mapping of a source node data to a copied node data.
            </summary>
            <param name="srcnodedata"></param>
            <param name="dstnodedata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.RemoveSourceNode(System.Object)">
            <summary>
            Remove any association between a source node data and any copied node data.
            </summary>
            <param name="srcnodedata"></param>
            <remarks>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.ContainsSourceLink(System.Object)">
            <summary>
            This predicate is true if the given link data is in the source collection.
            </summary>
            <param name="srclinkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This will always be false for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.FindCopiedLink(System.Object)">
            <summary>
            Look up the copied link for a given source link.
            </summary>
            <param name="srclinkdata"></param>
            <returns></returns>
            <remarks>
            <para>
            This will always return null for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.AddCopiedLink(System.Object,System.Object)">
            <summary>
            Declare the mapping of a source link data to a copied link data.
            </summary>
            <param name="srclinkdata"></param>
            <param name="dstlinkdata"></param>
            <remarks>
            <para>
            This is an error for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ICopyDictionary.RemoveSourceLink(System.Object)">
            <summary>
            Remove any association between a source link data and any copied link data.
            </summary>
            <param name="srclinkdata"></param>
            <remarks>
            <para>
            This is an error for those models that do not support separate link data.
            </para>
            <para>
            Note that this method is universal, because it can only assume the link data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific link data type.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.ICopyDictionary.SourceModel">
            <summary>
            Gets or sets the source model for the copying operation.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ICopyDictionary.DestinationModel">
            <summary>
            Gets or sets the destination model for the copying operation.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ICopyDictionary.SourceCollection">
            <summary>
            Gets or sets the source collection of data to be copied for the copying operation.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ICopyDictionary.Copies">
            <summary>
            Gets the collection of copied nodes and copied links as an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.#ctor">
            <summary>
            The default constructor builds an empty dictionary.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.CreateCopyDictionary"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.ContainsSourceNode(`0)">
            <summary>
            This predicate is true if the given node data is in the source collection.
            </summary>
            <param name="oldnode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.FindCopiedNode(`0)">
            <summary>
            Look up the copied node for a given source node.
            </summary>
            <param name="oldnode">a source node data</param>
            <returns>the copied node data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.AddCopiedNode(`0,`0)">
            <summary>
            Declare the mapping of a source node data to a copied node data.
            </summary>
            <param name="oldnode">a node data in the source collection</param>
            <param name="newnode">
            a copied node data,
            or null to indicate that there is no copied node data for a given source node data
            </param>
            <remarks>
            This will add a node data to the copies collection, associated with the source node data.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.RemoveSourceNode(`0)">
            <summary>
            Remove any association between a source node data and any copied node data.
            </summary>
            <param name="srcnodedata">a node data in the source collection</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.ContainsSourceLink(`3)">
            <summary>
            This predicate is true if the given link data is in the source collection.
            </summary>
            <param name="oldlink"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.FindCopiedLink(`3)">
            <summary>
            Look up the copied link for a given source link.
            </summary>
            <param name="oldlink">a source link data</param>
            <returns>the copied link data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.AddCopiedLink(`3,`3)">
            <summary>
            Declare the mapping of a source link data to a copied link data.
            </summary>
            <param name="oldlink">a link data in the source collection</param>
            <param name="newlink">
            a copied link data,
            or null to indicate that there is no copied link data for a given source link data
            </param>
            <remarks>
            This will add a link data to the copies collection, associated with the source link data.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.RemoveSourceLink(`3)">
            <summary>
            Remove any association between a source link data and any copied link data.
            </summary>
            <param name="srclinkdata">a link data in the source collection</param>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.SourceModel">
            <summary>
            Gets or sets the source model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.DestinationModel">
            <summary>
            Gets or sets the destination model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.SourceCollection">
            <summary>
            Gets or sets the source collection of data to be copied for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphLinksModel`4.AddCollectionCopy(Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.DataCollection,Northwoods.GoXam.Model.GraphLinksModel{`0,`1,`2,`3}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphLinksModel`4.CopyDictionary.Copies">
            <summary>
            Gets the collection of copied nodes and copied links as a <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4.DataCollection"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.#ctor">
            <summary>
            Create an empty model of Parts.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.FindIsGroupForNode(Northwoods.GoXam.Node)">
            <summary>
            A node data is a group if it is a <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.FindIsLinkLabelForNode(Northwoods.GoXam.Node)">
            <summary>
            A node data is a link label if <see cref="P:Northwoods.GoXam.Node.IsLinkLabel"/> is true.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.MakeNodeKeyUnique(Northwoods.GoXam.Node)">
            <summary>
            This makes the node's <see cref="P:Northwoods.GoXam.Node.Id"/> string
            unique by suffixing an integer.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.CopyNode1(Northwoods.GoXam.Node,Northwoods.GoXam.Model.GraphLinksModel{Northwoods.GoXam.Node,System.String,System.String,Northwoods.GoXam.Link}.CopyDictionary)">
            <summary>
            This copies a node by copying its elements.
            </summary>
            <param name="nodedata"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.CopyNode2(Northwoods.GoXam.Node,Northwoods.GoXam.Model.GraphLinksModel{Northwoods.GoXam.Node,System.String,System.String,Northwoods.GoXam.Link}.CopyDictionary,Northwoods.GoXam.Node,Northwoods.GoXam.Node,System.Collections.Generic.IEnumerable{Northwoods.GoXam.Node})">
            <summary>
            This finishes the copying of a node by updating any reference to a containing group node.
            </summary>
            <param name="oldnodedata">the original <c>Node</c></param>
            <param name="env"></param>
            <param name="newnodedata">the copied <c>Node</c></param>
            <param name="newgroup">the node whose <c>Id</c> is the new value for the <c>PartsModelContainingSubGraph</c> property</param>
            <param name="newmembers">unused</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.CopyLink1(Northwoods.GoXam.Link,Northwoods.GoXam.Model.GraphLinksModel{Northwoods.GoXam.Node,System.String,System.String,Northwoods.GoXam.Link}.CopyDictionary)">
            <summary>
            This copies a link by copying its elements.
            </summary>
            <param name="linkdata"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.CopyLink2(Northwoods.GoXam.Link,Northwoods.GoXam.Model.GraphLinksModel{Northwoods.GoXam.Node,System.String,System.String,Northwoods.GoXam.Link}.CopyDictionary,Northwoods.GoXam.Link,Northwoods.GoXam.Node,Northwoods.GoXam.Node,Northwoods.GoXam.Node)">
            <summary>
            This finishes the copying of a link by updating any references to the "from" node,
            the "to" node, and any "label" node.
            </summary>
            <param name="oldlinkdata"></param>
            <param name="env"></param>
            <param name="newlinkdata"></param>
            <param name="newfromnodedata"></param>
            <param name="newtonodedata"></param>
            <param name="newlinklabel"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.PartsModel.InsertLink(Northwoods.GoXam.Node,System.String,Northwoods.GoXam.Node,System.String)">
            <summary>
            Create and insert a new link by constructing a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <param name="fromdata">a non-null <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="fromparam"></param>
            <param name="todata">a non-null <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="toparam"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Model.PartsModel.Diagram">
            <summary>
            Unlike most models, the <see cref="T:Northwoods.GoXam.Model.PartsModel"/> knows about the <see cref="T:Northwoods.GoXam.Diagram"/>
            that owns the <see cref="T:Northwoods.GoXam.Part"/>s that are this model's node data and link data.
            </summary>
            <value>
            This property is set by the <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/> setter.
            You should not need to set this property.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.PartsModel.LinkTemplate">
            <summary>
            Gets or sets a <c>DataTemplate</c> that implements the appearance of each link that
            is created by <see cref="M:Northwoods.GoXam.Model.PartsModel.InsertLink(Northwoods.GoXam.Node,System.String,Northwoods.GoXam.Node,System.String)"/>.
            </summary>
            <value>
            By default this is null, which results in a very boring looking link.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Model.IUndoableEdit">
            <summary>
            This interface specifies how a document change (an edit) can be
            managed by the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </summary>
            <seealso cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>
            <seealso cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IUndoableEdit.Clear">
            <summary>
            Forget about any state remembered in this edit.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.IUndoableEdit.CanUndo">
            <summary>
            Determine if this edit is ready to be and can be undone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IUndoableEdit.Undo">
            <summary>
            Restore the previous state of this edit.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.IUndoableEdit.CanRedo">
            <summary>
            Determine if this edit is ready to be and can be redone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.IUndoableEdit.Redo">
            <summary>
            Restore the new state of this edit after having been undone.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.ModelChange">
            <summary>
            An enumeration of the predefined ways in which models may be changed.
            </summary>
            <remarks>
            This is used by <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.Property">
            <summary>
            Changes to data properties and extended model properties, and other non-predefined property changes
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodesSource">
            <summary>
            Changed (replaced) the NodesSource collection property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeKeyPath">
            <summary>
            Changed the NodeKeyPath property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategoryPath">
            <summary>
            Changed the NodeCategoryPath property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeIsGroupPath">
            <summary>
            Changed the NodeIsGroupPath property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedGroupNodePath">
            <summary>
            Changed the GroupNodePath property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedMemberNodesPath">
            <summary>
            Changed the MemberNodesPath property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeIsLinkLabelPath">
            <summary>
            Changed the NodeIsLinkLabelPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinksSource">
            <summary>
            Changed (replaced) the LinksSource collection property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkFromPath">
            <summary>
            Changed the LinkFromPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkToPath">
            <summary>
            Changed the LinkToPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedFromNodesPath">
            <summary>
            Changed the FromNodesPath property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedToNodesPath">
            <summary>
            Changed the ToNodesPath property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkLabelNodePath">
            <summary>
            Changed the LinkLabelNodePath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkFromParameterPath">
            <summary>
            Changed the LinkFromParameterPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkToParameterPath">
            <summary>
            Changed the LinkToParameterPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkCategoryPath">
            <summary>
            Changed the LinkCategoryPath property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedName">
            <summary>
            Changed the Name property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedDataFormat">
            <summary>
            Changed the DataFormat property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedModifiable">
            <summary>
            Changed the Modifiable property (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedCopyingGroupCopiesMembers">
            <summary>
            Changed the CopyingGroupCopiesMembers property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedCopyingLinkCopiesLabel">
            <summary>
            Changed the CopyingLinkCopiesLabel property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedRemovingGroupRemovesMembers">
            <summary>
            Changed the RemovingGroupRemovesMembers property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedRemovingLinkRemovesLabel">
            <summary>
            Changed the RemovingLinkRemovesLabel property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedValidCycle">
            <summary>
            Changed the ValidCycle property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedValidUnconnectedLinks">
            <summary>
            Changed the ValidUnconnectedLinks property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedNode">
            <summary>
            Added a node data to NodesSource (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovingNode">
            <summary>
            About to remove a node data from NodesSource (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedNode">
            <summary>
            Removed a node data from NodesSource (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeKey">
            <summary>
            Changed the node key for a node data (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedLink">
            <summary>
            Added a link data to LinksSource (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovingLink">
            <summary>
            About to remove a link data from LinksSource (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedLink">
            <summary>
            Removed a link data from LinksSource (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkFromPort">
            <summary>
            Changed the LinkFromPort property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkToPort">
            <summary>
            Changed the LinkToPort property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkLabelKey">
            <summary>
            Changed the LinkLabelKey property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedFromNodeKeys">
            <summary>
            Changed (replaced) the FromNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedFromNodeKey">
            <summary>
            Added a node key to the FromNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedFromNodeKey">
            <summary>
            Removed a node key from the FromNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedToNodeKeys">
            <summary>
            Changed (replaced) the ToNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedToNodeKey">
            <summary>
            Added a node key to the ToNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedToNodeKey">
            <summary>
            Removed a node key from the ToNodeKeys collection property (GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedGroupNodeKey">
            <summary>
            Changed the GroupNodeKey property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkGroupNodeKey">
            <summary>
            Changed the LinkGroupKey property (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedMemberNodeKeys">
            <summary>
            Changed (replaced) the MemberNodeKeys collection property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedMemberNodeKey">
            <summary>
            Added a node key to the MemberNodeKeys collection property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedMemberNodeKey">
            <summary>
            Removed a node key from the MemberNodeKeys collection property (GraphLinksModel, GraphModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedParentNodeKey">
            <summary>
            Changed the ParentNodeKey property (TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedChildNodeKeys">
            <summary>
            Changed (replaced) the ChildNodeKeys collection property (TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.AddedChildNodeKey">
            <summary>
            Added a node key to the ChildNodeKeys collection property (TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RemovedChildNodeKey">
            <summary>
            Removed a node key from the ChildNodeKeys collection property (TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategory">
            <summary>
            Changed the value of the Category for a node data (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ChangedLinkCategory">
            <summary>
            Changed the value of the Category for a link data (GraphLinksModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.StartedTransaction">
            <summary>
            Started a transaction.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.CommittedTransaction">
            <summary>
            Committed the changes for a transaction.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.RolledBackTransaction">
            <summary>
            Rolled back the changes of a transaction and aborted it.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.StartingUndo">
            <summary>
            Starting an undo operation.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.StartingRedo">
            <summary>
            Starting a redo operation.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.FinishedUndo">
            <summary>
            Finished an undo operation.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.FinishedRedo">
            <summary>
            Finished a redo operation.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.InvalidateRelationships">
            <summary>
            Changed the shape or bounds of a node or one or more of its ports (GraphLinksModel, GraphModel, TreeModel)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ModelChange.ReplacedReference">
            <summary>
            (for internal use)
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.ITreeModel">
            <summary>
            This kind of diagram model only supports tree-structured relationships.
            </summary>
            <remarks>
            <para>
            Each node data may have a reference to a "parent" node.
            Each node data may have a collection of references to "children" nodes.
            All references are by key values.
            </para>
            <para>
            This kind of model assumes the links are implicit from the references in the lists.
            If you want to use separate data structures to explicitly represent link information,
            use the <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </para>
            <para>
            This model does not support links that would form a cycle, including reflexive links.
            Nor does it support more than one link between any pair of nodes.
            If you need to model multiple links between nodes, use the <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </para>
            <para>
            There are three categories of methods: updating, navigation, and modification.
            </para>
            <para>
            The updating methods need to be called when there has been a change to the data,
            so that the model can be kept up-to-date.
            These methods include changes to the "parent" node key:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.DoParentNodeChanged(System.Object)"/>.
            These methods also include changes to the collection of "children" node keys:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeyAdded(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeyRemoved(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeysChanged(System.Object)"/>.
            </para>
            <para>
            The navigation methods support examining and traversing the graph.
            Some of these methods are actually defined in the base interface, <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>.
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinked(System.Object,System.Object,System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetConnectedNodesForNode(System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/>.
            But this interface adds a few more methods:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.GetParentForNode(System.Object)"/> and <see cref="M:Northwoods.GoXam.Model.ITreeModel.GetChildrenForNode(System.Object)"/>.
            </para>
            <para>
            The modification methods are used to alter the graph.
            A number of these methods are defined in <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>, such as 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/>, 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>.
            But this interface adds several methods.
            For the "parent" node keys:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.SetParentNodeKey(System.Object,System.Object)"/>.
            For the collection of "children" node keys:
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.AddChildNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ITreeModel.RemoveChildNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.ITreeModel.SetChildNodeKeys(System.Object,System.Collections.IEnumerable)"/>.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.DoParentNodeChanged(System.Object)">
            <summary>
            This should be called when a node data's tree parent may have changed.
            </summary>
            <param name="nodedata">the modified node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeyAdded(System.Object,System.Object)">
            <summary>
            This should be called when a child node data has been added to the collection of child nodes.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="childkey">the key for the added child node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeyRemoved(System.Object,System.Object)">
            <summary>
            This should be called when a child node data has been removed from the collection of child nodes.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="childkey">the key for the removed child node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            Note that this method is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.DoChildNodeKeysChanged(System.Object)">
            <summary>
            This should be called when a node data's list of children nodes has been replaced.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.GetParentForNode(System.Object)">
            <summary>
            Return a parent node data for a given node data, if there is one.
            </summary>
            <param name="nodedata"></param>
            <returns>a node data, or null if there is no "parent"</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.GetChildrenForNode(System.Object)">
            <summary>
            Return a sequence of node data that are immediate children of a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of child node data; an empty sequence if there are none</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.SetParentNodeKey(System.Object,System.Object)">
            <summary>
            Change a node data so that it refers to a different parent node data, by node key.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="parentkey">the key value of the "parent" node data</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.AddChildNodeKey(System.Object,System.Object)">
            <summary>
            Add a "child" node data's key value to a node data's list of "children".
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkey">the key value of the "child" node data</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.RemoveChildNodeKey(System.Object,System.Object)">
            <summary>
            Remove a child node data's key value from a node data's list of "children" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkey">the key value of the "child" node data</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.SetChildNodeKeys(System.Object,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "children" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkeys">a sequence of "child" node data key values</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ITreeModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This predicate is true if changing an existing link between two nodes/ports would result in a valid graph
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the new link would come</param>
            <param name="newtodata">a node key identify the node data to which the new link would go</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.GoXam.Model.IConnectedModel">
            <summary>
            A model that supports directed link relationships between nodes,
            with the relationship information stored on each node as collections of connected nodes.
            </summary>
            <remarks>
            <para>
            Each node data has two collections of references to other nodes:
            one that lists the nodes from which there are links connecting to this node,
            and one that lists the nodes to which there are links connecting from this node.
            All node references are by node data key value.
            </para>
            <para>
            This kind of model assumes the links are implicit from the references in the lists.
            If you want to use separate data structures to explicitly represent link information,
            use the <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </para>
            <para>
            Although this model supports links between any pair of nodes in either or both
            directions, and supports reflexive links from a node to itself, it does not support
            more than one link between any pair of nodes in the same direction.
            If you need to model multiple links between nodes, use the <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>.
            </para>
            <para>
            There are three categories of methods: updating, navigation, and modification.
            </para>
            <para>
            The updating methods need to be called when there has been a change to the data,
            so that the model can be kept up-to-date.
            These methods include changes to the collection of "from" node keys:
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeyAdded(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeyRemoved(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeysChanged(System.Object)"/>.
            These methods also include changes to the collection of "to" node keys:
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeyAdded(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeyRemoved(System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeysChanged(System.Object)"/>.
            </para>
            <para>
            The navigation methods support examining and traversing the graph.
            These methods are actually defined in the base interface, <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>.
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.FindNodeByKey(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinked(System.Object,System.Object,System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetFromNodesForNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetToNodesForNode(System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetConnectedNodesForNode(System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/>.
            </para>
            <para>
            The modification methods are used to alter the graph.
            A number of these methods are defined in <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/>, such as 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddNode(System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveNode(System.Object)"/>, 
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/>, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddCollectionCopy(Northwoods.GoXam.Model.IDataCollection,Northwoods.GoXam.Model.ICopyDictionary)"/>.
            But this interface adds several methods.
            For the collection of "from" node keys:
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.AddFromNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.RemoveFromNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.SetFromNodeKeys(System.Object,System.Collections.IEnumerable)"/>.
            For the collection of "to" node keys:
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.AddToNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.RemoveToNodeKey(System.Object,System.Object)"/>, <see cref="M:Northwoods.GoXam.Model.IConnectedModel.SetToNodeKeys(System.Object,System.Collections.IEnumerable)"/>.
            </para>
            <para>
            Note that this interface is universal, because it can only assume the node data is of type <see cref="T:System.Object"/>.
            The corresponding methods in the generic model classes operate on and return a specific node data type.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeyAdded(System.Object,System.Object)">
            <summary>
            This should be called when a "from" node data key value has been added to the collection of "from" nodes.
            </summary>
            <param name="nodedata"></param>
            <param name="fromkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeyRemoved(System.Object,System.Object)">
            <summary>
            This should be called when a "from" node data key value has been removed from the collection of "from" nodes.
            </summary>
            <param name="nodedata"></param>
            <param name="fromkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoFromNodeKeysChanged(System.Object)">
            <summary>
            This should be called when the collection of "from" node keys has been replaced on a node data.
            </summary>
            <param name="nodedata"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeyAdded(System.Object,System.Object)">
            <summary>
            This should be called when a "to" node data key value has been added to the collection of "to" nodes.
            </summary>
            <param name="nodedata"></param>
            <param name="tokey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeyRemoved(System.Object,System.Object)">
            <summary>
            This should be called when a "to" node data key value has been removed from the collection of "to" nodes.
            </summary>
            <param name="nodedata"></param>
            <param name="tokey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.DoToNodeKeysChanged(System.Object)">
            <summary>
            This should be called when the collection of "to" node keys has been replaced on a node data.
            </summary>
            <param name="nodedata"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.AddFromNodeKey(System.Object,System.Object)">
            <summary>
            Modify the list of "from" node keys by adding another node data key value.
            </summary>
            <param name="nodedata"></param>
            <param name="fromkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.RemoveFromNodeKey(System.Object,System.Object)">
            <summary>
            Modify the list of "from" node keys by removing a node data key value.
            </summary>
            <param name="nodedata"></param>
            <param name="fromkey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.SetFromNodeKeys(System.Object,System.Collections.IEnumerable)">
            <summary>
            Replace the list of "from" node keys with another collection of key values.
            </summary>
            <param name="nodedata"></param>
            <param name="fromkeys"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.AddToNodeKey(System.Object,System.Object)">
            <summary>
            Modify the list of "to" node keys by adding another node data key value.
            </summary>
            <param name="nodedata"></param>
            <param name="tokey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.RemoveToNodeKey(System.Object,System.Object)">
            <summary>
            Modify the list of "to" node keys by removing a node data key value.
            </summary>
            <param name="nodedata"></param>
            <param name="tokey"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.SetToNodeKeys(System.Object,System.Collections.IEnumerable)">
            <summary>
            Replace the list of "to" node keys with another collection of key values.
            </summary>
            <param name="nodedata"></param>
            <param name="tokeys"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.IConnectedModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            This predicate is true if changing an existing link between two nodes/ports would result in a valid graph
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the new link would come</param>
            <param name="newtodata">a node key identify the node data to which the new link would go</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Model.IConnectedModel.ValidCycle">
            <summary>
            This property controls the overall graph structure that may be drawn.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.DiagramPanel">
            <summary>
            The <c>DiagramPanel</c> is the central class of a <see cref="T:Northwoods.GoXam.Diagram"/>,
            holding all of the <see cref="T:Northwoods.GoXam.Layer"/>s of <see cref="T:Northwoods.GoXam.Part"/>s,
            responsible for translation (scrolling) and scaling (zooming) and alignment,
            keeping track of the diagram's bounds,
            and having various hit-testing methods used to search the diagram for particular elements.
            </summary>
            <remarks>
            <para>
            A <c>DiagramPanel</c> must be in the <c>ControlTemplate</c> of a <see cref="T:Northwoods.GoXam.Diagram"/>.
            Both the <see cref="T:Northwoods.GoXam.Diagram"/> and the <c>DiagramPanel</c> are useless without each other.
            </para>
            <para>
            Because <c>DiagramPanel</c> is a <c>Panel</c>, you can define the layers of this panel
            in XAML by placing them nested within the definition of the <c>&lt;DiagramPanel&gt;</c> element.
            If you do not define any layers explicitly, the <see cref="M:Northwoods.GoXam.DiagramPanel.InitializeLayers"/> method
            will create the standard nine layers: "Background" nodes and links, default ("") nodes and links,
            "Foreground" nodes and links, "Tool" nodes and links, and "Adornment" nodes.
            </para>
            <para>
            This class is also responsible for mouse input.
            It redirects mouse events to the <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </para>
            <para>
            You may not apply any transforms to a <see cref="T:Northwoods.GoXam.Layer"/>; that is reserved for GoXam's use.
            This panel's <c>Background</c> is also reserved for GoXam's use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.#ctor">
            <summary>
            Construct an empty <see cref="T:Northwoods.GoXam.DiagramPanel"/>.
            </summary>
            <remarks>
            By default the <c>Background</c> is a solid transparent brush so that it can
            handle mouse events in the background.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Every <see cref="T:Northwoods.GoXam.DiagramPanel"/> should be in the visual tree of a <see cref="T:Northwoods.GoXam.Diagram"/>.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.DiagramBoundsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.FixedBoundsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.FixedBounds"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.PositionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ScaleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.MinimumScaleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.MinimumScale"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.MaximumScaleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.MaximumScale"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.PaddingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.Padding"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.VerticalContentAlignmentProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.StretchProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ZoomPointProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.ZoomPoint"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ZoomTimeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.ZoomTime"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.AutoScrollRegionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollRegion"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.AutoScrollTimeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollTime"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.AutoScrollDelayProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollDelay"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.DoAutoScroll(System.Windows.Point)">
            <summary>
            Start or continue automatically scrolling the view during a mouse drag.
            </summary>
            <param name="modelPnt">the current mouse point, in model coordinates</param>
            <remarks>
            <para>
            As soon <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeAutoScrollPosition(System.Windows.Point)"/> returns a new
            <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> value, this method starts a <c>Timer</c>
            that waits for <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollDelay"/> milliseconds.
            After waiting, it repeatedly sets <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            to the latest <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeAutoScrollPosition(System.Windows.Point)"/> value,
            until the position does not change (presumably because the 
            <see cref="T:Northwoods.GoXam.Diagram"/>'s last mouse point is no longer in the autoscroll
            margin).
            Setting this view's <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> occurs each
            <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollTime"/> milliseconds.
            </para>
            <para>
            This method is normally called by those tools that want to support
            auto-scrolling during a mouse move, such as dragging.
            The timer is stopped when the mouse leaves this view.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.GoXam.DiagramPanel.StopAutoScroll"/>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.StopAutoScroll">
            <summary>
            Stop any ongoing auto-scroll action.
            </summary>
            <remarks>
            This stops the Timer used to get repeating events to consider scrolling.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.DiagramPanel.DoAutoScroll(System.Windows.Point)"/>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ComputeAutoScrollPosition(System.Windows.Point)">
            <summary>
            This method is called to determine the next position in the document for this view,
            given a point at which the user is dragging the mouse.
            </summary>
            <param name="viewPnt">
            The mouse point, in control coordinates.
            </param>
            <value>
            The return value is in model coordinates.
            </value>
            <remarks>
            This uses the <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollRegion"/>, <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/>,
            and <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/> properties
            to calculate a new <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            The closer the point is to the edge of the view, the larger a multiple of
            the <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/> or <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/>
            is used as a scroll step in that direction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.InitializeLayers">
            <summary>
            If there are no <see cref="T:Northwoods.GoXam.Layer"/>s in this panel's collection of <c>Children</c>,
            create the standard set of layers.
            </summary>
            <remarks>
            This creates the following pairs of <see cref="T:Northwoods.GoXam.NodeLayer"/>s and <see cref="T:Northwoods.GoXam.LinkLayer"/>s,
            with <see cref="P:Northwoods.GoXam.Layer.Id"/>s of: "Background", default (""), "Foreground", and "Tool".
            Finally it creates and adds a <see cref="T:Northwoods.GoXam.NodeLayer"/> that is the <see cref="P:Northwoods.GoXam.DiagramPanel.AdornmentLayer"/>,
            in front of all of the other layers, for holding selection handles and tool handles.
            The "Tool" layers and <see cref="P:Northwoods.GoXam.DiagramPanel.AdornmentLayer"/> are layers holding temporary objects,
            so this sets their <see cref="P:Northwoods.GoXam.Layer.IsTemporary"/> property to true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindLayer``1(System.String)">
            <summary>
            Find a <see cref="T:Northwoods.GoXam.Layer"/> of the given type <typeparamref name="T"/>
            with exactly the same <see cref="P:Northwoods.GoXam.Layer.Id"/> as the given <paramref name="name"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.GetLayer``1(System.String)">
            <summary>
            Find a <see cref="T:Northwoods.GoXam.Layer"/> of the given type <typeparamref name="T"/>
            with exactly the same <see cref="P:Northwoods.GoXam.Layer.Id"/> as the given <paramref name="name"/>,
            or return a default layer of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            It is an error if it cannot find a layer with the given name nor
            with the name "" (an empty string).
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnBoundsAlignmentChanged">
            <summary>
            This overridable method is called when the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>
            or <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/> or <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/>
            or <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> properties change.
            </summary>
            <remarks>
            This may change the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and/or <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> in order to
            maintain the desired content alignment, depending on the <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> policy.
            The <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> will not be greater than 1.
            This respects the <c>UseLayoutRounding</c> property to round off the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            This method calls <see cref="M:Northwoods.GoXam.DiagramPanel.OnDiagramBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnSizeChanged(System.Windows.Size,System.Windows.Size)">
            <summary>
            This overridable method is called when the panel's actual size changes.
            </summary>
            <param name="oldsize">a <c>Size</c> in element coordinates</param>
            <param name="newsize">a <c>Size</c> in element coordinates</param>
            <remarks>
            This may change the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and/or <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> in order to
            maintain the desired content alignment, depending on the <see cref="P:Northwoods.GoXam.DiagramPanel.Stretch"/> policy.
            The <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> will not be greater than 1.
            This method may be called during initialization even if the old and new size values are the same.
            This respects the <c>UseLayoutRounding</c> property to round off the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            This method calls <see cref="M:Northwoods.GoXam.DiagramPanel.OnViewportBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnPositionChanged(System.Windows.Point,System.Windows.Point)">
            <summary>
            This overridable method is called when the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> changes.
            </summary>
            <param name="oldpos">a <c>Point</c> in model coordinates</param>
            <param name="newpos">a <c>Point</c> in model coordinates</param>
            <remarks>
            This may change the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> in order to maintain the desired content alignment.
            This method may be called during initialization even if the old and new position values are the same.
            This respects the <c>UseLayoutRounding</c> property to round off the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            This method calls <see cref="M:Northwoods.GoXam.DiagramPanel.OnViewportBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnScaleChanged(System.Double,System.Double)">
            <summary>
            This overridable method is called when the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> changes.
            </summary>
            <param name="oldscale">a <c>double</c></param>
            <param name="newscale">a <c>double</c></param>
            <remarks>
            This may change the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> in order to maintain the desired content alignment.
            This method may be called during initialization even if the old and new scale values are the same.
            This respects the <c>UseLayoutRounding</c> property to round off the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            This method calls <see cref="M:Northwoods.GoXam.DiagramPanel.OnViewportBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ViewportBoundsChangedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.DiagramPanel.ViewportBoundsChanged"/> routed event.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnViewportBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.DiagramPanel.ViewportBoundsChanged"/> event.
            </summary>
            <param name="e"></param>
            <remarks>
            The X or Y may have changed because of a change to <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            The Width or Height may have changed either because the <see cref="T:Northwoods.GoXam.DiagramPanel"/> has changed size
            or because the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> has changed value.
            If the Width or Height has changed, this invalidates a <see cref="P:Northwoods.GoXam.Diagram.Layout"/>
            that depends on <see cref="F:Northwoods.GoXam.Layout.LayoutChange.ViewportSizeChanged"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.DiagramBoundsChangedEvent">
            <summary>
            Identifies the <see cref="E:Northwoods.GoXam.DiagramPanel.DiagramBoundsChanged"/> routed event.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnDiagramBoundsChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Rect})">
            <summary>
            Raise the <see cref="E:Northwoods.GoXam.DiagramPanel.DiagramBoundsChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.TransformModelToView(System.Windows.Point)">
            <summary>
            Convert a <c>Point</c> in model coordinates to element coordinates.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            The transformation is affected by the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.TransformViewToModel(System.Windows.Point)">
            <summary>
            Convert a <c>Point</c> in element coordinates to model coordinates.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            The transformation is affected by the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure each of the <see cref="T:Northwoods.GoXam.Layer"/>s in this panel.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange each of the <see cref="T:Northwoods.GoXam.Layer"/>s in this panel.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.UpdateDiagramBounds">
            <summary>
            Request that the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> value be updated,
            with a call to <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnInitialLayoutCompleted">
            <summary>
            This overridable method is called after the first layout has been performed
            and the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> has been computed.
            </summary>
            <remarks>
            <para>
            This uses the <see cref="P:Northwoods.GoXam.Diagram.InitialStretch"/>,
            <see cref="P:Northwoods.GoXam.Diagram.InitialScale"/>,
            <see cref="P:Northwoods.GoXam.Diagram.InitialPosition"/>,
            <see cref="P:Northwoods.GoXam.Diagram.InitialDiagramBoundsSpot"/>,
            <see cref="P:Northwoods.GoXam.Diagram.InitialPanelSpot"/>
            properties to set the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> and/or <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            properties for the initial appearance of the diagram.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Diagram.InitialCenteredNodeData"/> has a non-null value,
            this calls <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part)"/> to try to center the <see cref="T:Northwoods.GoXam.Node"/>
            that is bound to that data.
            </para>
            <para>
            It then raises the <see cref="E:Northwoods.GoXam.Diagram.InitialLayoutCompleted"/> event.
            It also clears out any <see cref="T:Northwoods.GoXam.Model.UndoManager"/>'s recorded changes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnLayoutCompleted">
            <summary>
            This overridable method is called after each layout has been performed
            and the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> has been computed.
            </summary>
            <remarks>
            <para>
            This raises the <see cref="E:Northwoods.GoXam.Diagram.LayoutCompleted"/> event.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Diagram.CenteredNodeData"/> has a non-null value,
            this calls <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part)"/> to try to center the <see cref="T:Northwoods.GoXam.Node"/>
            that is bound to that data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds">
            <summary>
            This is called by <see cref="M:Northwoods.GoXam.DiagramPanel.UpdateDiagramBounds"/> to
            determine a new value for <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>.
            </summary>
            <returns>a <c>Rect</c> in model coordinates</returns>
            <remarks>
            By default this computes the bounds of all of the visible nodes and links,
            excluding any <see cref="T:Northwoods.GoXam.Adornment"/>s and parts that have <see cref="P:Northwoods.GoXam.Part.InDiagramBounds"/> false,
            and then adds the <see cref="P:Northwoods.GoXam.DiagramPanel.Padding"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ComputeBounds(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})">
            <summary>
            Compute the bounding rectangle that surrounds a given collection of parts.
            </summary>
            <param name="parts"></param>
            <returns>
            the union of the Bounds of all of the parts in <paramref name="parts"/>,
            or <c>Rect.Empty</c> if there are no parts
            </returns>
            <remarks>
            This does not skip parts that are not <c>Visible</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindElementAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Search all parts that are at a given point that meet a given predicate,
            and return the first element that matches.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            If the predicate returns true, this method returns that element;
            if it returns false, the search continues for elements at the given point.
            If this predicate argument is null, no filtering of elements is done -- the first one found is returned.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for a <see cref="T:Northwoods.GoXam.Node"/>, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignore layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>an element of type <typeparamref name="T"/>, or null if none is found</returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindElementsAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Search all parts that are at a given point that meet a given predicate,
            and return a collection of elements that match.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method includes that element in its results.
            If this predicate argument is null, no filtering of elements is done -- all are included.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>a perhaps empty collection of elements of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindElementsNear``1(System.Windows.Point,System.Double,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Find elements that are within a distance of a point.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="dist">the distance, in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method includes that element in its results.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>an element of type <typeparamref name="T"/>, or null if none is found</returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindElementsIn``1(System.Windows.Rect,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Find elements that are within a rectangle.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="rect">a <c>Rect</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method includes that element in its results.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>a perhaps empty collection of elements of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindElementsWithin``1(System.Windows.Media.Geometry,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Search all parts that are at inside a given geometry that meet a given predicate,
            and return a collection of elements that match.
            </summary>
            <typeparam name="T">the type of element being searched for</typeparam>
            <param name="geo">a <c>Geometry</c> in model coordinates</param>
            <param name="navig">
            This is a function that is given an element at the given point and
            returns an element of type <typeparamref name="T"/> to be considered by the predicate <paramref name="pred"/>.
            Typically the function will find the ancestor <see cref="T:Northwoods.GoXam.Part"/> or <see cref="T:Northwoods.GoXam.Node"/>.
            </param>
            <param name="pred">
            This is a predicate that is given an element of type <typeparamref name="T"/>;
            if the predicate returns true, this method includes that element in its results.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>a perhaps empty collection of elements of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindPartAt``1(System.Windows.Point,System.Predicate{``0},Northwoods.GoXam.SearchLayers)">
            <summary>
            Return the front-most <see cref="T:Northwoods.GoXam.Part"/> that is at a given point.
            </summary>
            <typeparam name="T">the Type of part to find</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="pred">
            This is a predicate that is given an part of type <typeparamref name="T"/>;
            if the predicate returns true, this method returns that part.
            If this argument is null, this returns the first part it finds at the point.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>null if no such part is found</returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindPartsAt``1(System.Windows.Point,Northwoods.GoXam.SearchLayers)">
            <summary>
            Return all of the <see cref="T:Northwoods.GoXam.Part"/>s that are at a given point.
            </summary>
            <typeparam name="T">the Type of part to find</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>
            All of the <see cref="T:Northwoods.GoXam.Part"/>s of the given type <typeparamref name="T"/>
            that are at the Point <paramref name="p"/>
            and that are in the kinds of layers indicated by <paramref name="layers"/>.
            This returns an empty list if no qualifying parts are found.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindPartsNear``1(System.Windows.Point,System.Double,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)">
            <summary>
            Find parts that are near a point.
            </summary>
            <typeparam name="T">the type of part being searched for, either the type <see cref="T:Northwoods.GoXam.Part"/> or inheriting from it</typeparam>
            <param name="p">a <c>Point</c> in model coordinates</param>
            <param name="dist">the distance, in model coordinates</param>
            <param name="srch">
            Which kinds of parts to include; a typical value might be <see cref="F:Northwoods.GoXam.SearchFlags.SelectableParts"/>.
            </param>
            <param name="overlap">
            The required geometric relationship with the part;
            the typical value is <see cref="F:Northwoods.GoXam.SearchInclusion.Inside"/>.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindPartsIn``1(System.Windows.Rect,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)">
            <summary>
            Find parts that are within a rectangle.
            </summary>
            <typeparam name="T">the type of part being searched for, either the type <see cref="T:Northwoods.GoXam.Part"/> or inheriting from it</typeparam>
            <param name="rect">a <c>Rect</c> in model coordinates</param>
            <param name="srch">
            Which kinds of parts to include; a typical value might be <see cref="F:Northwoods.GoXam.SearchFlags.SelectableParts"/>.
            </param>
            <param name="overlap">
            The required geometric relationship with the part;
            the typical value is <see cref="F:Northwoods.GoXam.SearchInclusion.Inside"/>.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.FindPartsWithin``1(System.Windows.Media.Geometry,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)">
            <summary>
            Search all parts that are at inside a given geometry that meet certain criteria
            and return a collection of those that match.
            </summary>
            <typeparam name="T">the type of part being searched for, either the type <see cref="T:Northwoods.GoXam.Part"/> or inheriting from it</typeparam>
            <param name="geo">a <c>Geometry</c> in model coordinates</param>
            <param name="srch">
            Which kinds of parts to include; a typical value might be <see cref="F:Northwoods.GoXam.SearchFlags.SelectableParts"/>.
            </param>
            <param name="overlap">
            The required geometric relationship with the <paramref name="geo"/> geometry;
            the typical value is <see cref="F:Northwoods.GoXam.SearchInclusion.Inside"/>.
            </param>
            <param name="layers">
            The kinds of <see cref="T:Northwoods.GoXam.Layer"/>s to search in.
            For example, if you are looking for <see cref="T:Northwoods.GoXam.Node"/>s, using the value <see cref="F:Northwoods.GoXam.SearchLayers.Nodes"/>,
            this will speed up the search by ignoring layers containing <see cref="T:Northwoods.GoXam.Link"/>s.
            </param>
            <returns>a perhaps empty collection of elements of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.CreateBackgroundGridPattern">
            <summary>
            Create the <see cref="T:Northwoods.GoXam.GridPattern"/> for the whole diagram,
            using the <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/> data template.
            </summary>
            <returns>the unbound <see cref="T:Northwoods.GoXam.Node"/> holding the <see cref="T:Northwoods.GoXam.GridPattern"/></returns>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Diagram.GridPatternTemplate"/> is null, this uses a default template.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.SetHorizontalOffset(System.Double)">
            <summary>
            Change the value of <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by changing the value of <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.SetVerticalOffset(System.Double)">
            <summary>
            Change the value of <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by changing the value of <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Scroll the diagram so that a given element (<paramref name="visual"/>)
            is in the viewport.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <param name="visual"></param>
            <param name="rectangle">
            The region of the element to bring into view.
            This value is normally <c>Rect.Empty</c>,
            meaning as much of the whole visual element as will fit into the viewport.
            </param>
            <returns>the result of calling <see cref="M:Northwoods.GoXam.DiagramPanel.DoMakeVisible(System.Windows.UIElement,System.Windows.Rect)"/></returns>
            <remarks>
            If the <see cref="T:Northwoods.GoXam.Part"/> is already visible in the viewport, the panel is not scrolled.
            If you always want to scroll the panel so that a part is centered,
            even when the part is already visible but not centered in the viewport,
            call <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part,System.Action)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.DoMakeVisible(System.Windows.UIElement,System.Windows.Rect)">
            <summary>
            This overridable method changes the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> so that the
            given element <paramref name="elt"/> becomes visible in the viewport.
            </summary>
            <param name="elt">
            a <c>UIElement</c> that is in the visual tree of this panel
            </param>
            <param name="rectangle">
            The region of the element to bring into view;
            if this is empty, this defaults to the element's parent <see cref="T:Northwoods.GoXam.Part"/>'s Bounds.
            </param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part)">
            <summary>
            Center a <see cref="T:Northwoods.GoXam.Part"/>'s bounds within this viewport.
            </summary>
            <param name="part"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part,System.Action)"/> with no after-Action.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part,System.Action)">
            <summary>
            Center a <see cref="T:Northwoods.GoXam.Part"/>'s bounds within this viewport.
            </summary>
            <param name="part"></param>
            <param name="afterwards">an <c>Action</c> to be performed after the animation is finished; may be null</param>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/>
            properties need to be "Stretch" if the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> are smaller than the viewport.
            But in any case, the <paramref name="part"/> might not be centered if the panel
            cannot be scrolled far enough.
            </para>
            <para>
            If you just want to make sure the panel is scrolled so that a part is visible,
            to avoid unnecessary scrolling when the part is already visible,
            call <see cref="M:Northwoods.GoXam.DiagramPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.CenterRect(System.Windows.Rect,System.Action)">
            <summary>
            Center a particular area of the diagram within this viewport.
            </summary>
            <param name="bounds">a <c>Rect</c> in model coordinates</param>
            <param name="afterwards">an <c>Action</c> to be performed after the animation is finished; may be null</param>
            <remarks>
            <para>
            The <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/>
            properties need to be "Stretch" if the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> are smaller than the viewport.
            But in any case, the <paramref name="bounds"/> might not be centered if the panel
            cannot be scrolled far enough.
            </para>
            <para>
            If you want to try to center the selection in the viewport, call:
            <code>
            myDiagram.Panel.CenterRect(myDiagram.Panel.ComputeBounds(myDiagram.SelectedParts), null);
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.SetScaleAndPosition(System.Double,System.Windows.Point,System.Int32,System.Action)">
            <summary>
            Set the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> properties with animation.
            </summary>
            <param name="newscale">the new positive <c>double</c> value for <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/></param>
            <param name="newpos">the new <c>Point</c> value for <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/></param>
            <param name="animationtime">a time in milliseconds; if a very short time, no animation occurs and the properties are simply set</param>
            <param name="act">an <c>Action</c> to perform after the animation is finished; null to do nothing afterwards</param>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ZoomToFit">
            <summary>
            Change the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> so that everything within the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>
            fits within the viewport.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.DiagramPanel.ZoomToFit(Northwoods.GoXam.StretchPolicy,System.Action)"/> with a <see cref="F:Northwoods.GoXam.StretchPolicy.Uniform"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.ZoomToFit(Northwoods.GoXam.StretchPolicy,System.Action)">
            <summary>
            Change the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> so that everything within the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>
            fits within the viewport.
            </summary>
            <param name="afterwards">an <c>Action</c> to be performed after the animation is finished; may be null</param>
            <param name="policy">normally a value of <see cref="F:Northwoods.GoXam.StretchPolicy.Uniform"/></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.DiagramPanel.SetScaleAndPosition(System.Double,System.Windows.Point,System.Int32,System.Action)"/> to animate the changing scale and position.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.LineDown">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.LineUp">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.LineRight">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.LineLeft">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.PageDown">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportHeight"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.PageUp">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportHeight"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.PageRight">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.PageLeft">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MouseWheelDown">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/> times the number of lines to scroll for mouse wheel rotation.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MouseWheelUp">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/> times the number of lines to scroll for mouse wheel rotation.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MouseWheelRight">
            <summary>
            Increases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/> times the number of lines to scroll for mouse wheel rotation.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MouseWheelLeft">
            <summary>
            Decreases the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset"/> by <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/> times the number of lines to scroll for mouse wheel rotation.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.CanHorizontallyScrollProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.CanHorizontallyScroll"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.CanVerticallyScrollProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.CanVerticallyScroll"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ScrollOwnerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollOwner"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChangeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChangeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle a mouse down event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.FirstMousePointInModel"/>,
            and <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/> and <see cref="P:Northwoods.GoXam.Diagram.LastMouseEventArgs"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseDown"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle a mouse move event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/> and <see cref="P:Northwoods.GoXam.Diagram.LastMouseEventArgs"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseMove"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle a mouse up event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/> and <see cref="P:Northwoods.GoXam.Diagram.LastMouseEventArgs"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseUp"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle a mouse enter event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/> and <see cref="P:Northwoods.GoXam.Diagram.LastMouseEventArgs"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle the event when mouse capture is lost.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoCancel"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handle a mouse wheel event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseWheel"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.PerformGesture(Northwoods.GoXam.GestureModifiers,Northwoods.GoXam.Gesture,System.Windows.Point,System.Windows.Point,Northwoods.GoXam.Diagram)">
            <summary>
            Simulate some mouse events.
            </summary>
            <param name="modifiers">
            a <see cref="T:Northwoods.GoXam.GestureModifiers"/> value, some combination of <see cref="F:Northwoods.GoXam.GestureModifiers.Control"/>,
            <see cref="F:Northwoods.GoXam.GestureModifiers.Shift"/>, and <see cref="F:Northwoods.GoXam.GestureModifiers.Alt"/>
            </param>
            <param name="action">
            a <see cref="T:Northwoods.GoXam.Gesture"/> value, typically <see cref="F:Northwoods.GoXam.Gesture.MouseLeftButton"/>;
            a value of <see cref="F:Northwoods.GoXam.Gesture.None"/> does nothing
            </param>
            <param name="down">
            the Point in model coordinates for the mouse down event;
            this value must be within the <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportBounds"/>
            </param>
            <param name="up">
            the Point in model coordinates for the mouse up event;
            this value must be within the <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportBounds"/>
            </param>
            <param name="other">
            The <see cref="T:Northwoods.GoXam.Diagram"/> where the mouse up occurs.
            If this is different from this panel's <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>,
            a simulated drag-and-drop will occur.
            (This does not use real Windows drag-and-drop in WPF.)
            This may be null to use this panel's diagram, thus keeping the whole gesture within this one diagram.
            </param>
            <remarks>
            <para>
            This method can have the same effect as several calls to "OnMouse..." methods,
            without requiring the use of any <b>MouseEventArgs</b>, <b>MouseButtonEventArgs</b>,
            or <b>MouseWheelEventArgs</b>.
            For the mouse double click gestures, such as <see cref="F:Northwoods.GoXam.Gesture.MouseLeftDoubleClick"/>,
            this is equivalent to a mouse down, mouse up, mouse down, and a mouse up.
            For the mouse button gestures, such as <see cref="F:Northwoods.GoXam.Gesture.MouseLeftButton"/>,
            this is equivalent to a mouse down, two mouse moves if <paramref name="down"/>
            is different than <paramref name="up"/>, and a mouse up.
            For the mouse wheel gestures, such as <see cref="F:Northwoods.GoXam.Gesture.MouseWheelForward"/>,
            this is equivalent to a mouse wheel turn.
            </para>
            <para>
            In all cases the <b>Point</b>s are in model coordinates, not in FrameworkElement coordinates.
            The down and up points must be within the current <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportBounds"/>.
            </para>
            <para>
            If you pass a different diagram as the <paramref name="other"/> argument instead of null,
            this simulates a drag-and-drop from this diagram to that other diagram.
            Even in WPF, the drag-and-drop will be simulated, rather than using real Windows drag-and-drop,
            as it would if it did not have permission.
            The various methods that take <b>DragEventArgs</b> are not called.
            Supplying a different diagram is not supported for wheel and double-click gestures.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.IsDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This predicate is true if the mouse button event represents a double-click.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Handle a DragEnter event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragEnter(System.Windows.DragEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnDragLeave(System.Windows.DragEventArgs)">
            <summary>
            Handle a DragLeave event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragLeave(System.Windows.DragEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnDragOver(System.Windows.DragEventArgs)">
            <summary>
            Handle a DragOver event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOver(System.Windows.DragEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnDrop(System.Windows.DragEventArgs)">
            <summary>
            Handle a Drop event.
            </summary>
            <param name="e"></param>
            <remarks>
            This sets <see cref="P:Northwoods.GoXam.Diagram.LastMousePointInModel"/>,
            and calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDrop(System.Windows.DragEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Handle a GiveFeedback event.
            </summary>
            <param name="e"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoGiveFeedback(System.Windows.GiveFeedbackEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Handle a QueryContinueDrag event.
            </summary>
            <param name="e"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)"/> on the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.DraggingTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MakeBitmap">
            <summary>
            Generates a bitmap displaying the parts currently visible in the diagram.
            </summary>
            <returns>a <c>BitmapSource</c>; in Silverlight the contents may not have been rendered until a later time</returns>
            <remarks>
            This just returns <c>MakeBitmap(new Size(this.ViewportWidth, this.ViewportHeight), 96, this.Position, this.Scale, null)</c>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MakeBitmap(System.Windows.Size,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Return a bitmap showing the parts in a particular area, drawn at a given scale.
            </summary>
            <param name="bmpsize">the size of the resulting bitmap</param>
            <param name="dpi">bitmap resolution [ignored in Silverlight]</param>
            <param name="viewpos">a <c>Point</c> in model coordinates</param>
            <param name="scale">
            a value of 1.0 is normal; the value must be a positive number.
            Smaller values produce smaller-looking parts.
            </param>
            <returns>a <c>BitmapSource</c>; in Silverlight the contents may not have been rendered until a later time</returns>
            <remarks>
            <para>
            The diagram must already be visible and fully initialized before this method is able to render anything.
            </para>
            <para>
            In Silverlight the rendering of the contents of the bitmap occurs asynchronously.
            Although a <c>BitmapSource</c> is returned immediately, it will not immediately contain the expected bits.
            In order to programmatically access the contents of the bitmap,
            you should call <see cref="M:Northwoods.GoXam.DiagramPanel.MakeBitmap(System.Windows.Size,System.Double,System.Windows.Point,System.Double,System.Action{System.Windows.Media.Imaging.BitmapSource})"/>.
            In Silverlight any background GridPattern is not rendered.
            </para>
            <para>
            This just returns <c>MakeBitmap(bmpsize, dpi, viewpos, scale, null)</c>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.MakeBitmap(System.Windows.Size,System.Double,System.Windows.Point,System.Double,System.Action{System.Windows.Media.Imaging.BitmapSource})">
            <summary>
            Return a bitmap showing the parts in a particular area, drawn at a given scale.
            </summary>
            <param name="bmpsize">the size of the resulting bitmap, rounded up to the nearest integer</param>
            <param name="dpi">bitmap resolution [ignored in Silverlight]</param>
            <param name="viewpos">
            a <c>Point</c> in model coordinates for the top-left corner of the area to be rendered
            </param>
            <param name="scale">
            a value of 1.0 is normal; the value must be a positive number.
            Smaller values produce smaller-looking parts.
            </param>
            <param name="act">
            an <c>Action</c> taking the <c>BitmapSource</c> to be performed later; this may be null
            </param>
            <returns>a <c>BitmapSource</c>; in Silverlight the contents may not have been rendered until a later time</returns>
            <remarks>
            <para>
            The diagram must already be visible and fully initialized before this method is able to render anything.
            </para>
            <para>
            In Silverlight the rendering of the contents of the bitmap occurs asynchronously.
            Although a <c>BitmapSource</c> is returned immediately, it will not immediately contain the expected bits.
            You may access the bitmap contents in the <paramref name="act"/> action or thereafter.
            In Silverlight any background GridPattern is not rendered.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DiagramPanel.IsUnoccupied(System.Windows.Rect,System.Predicate{Northwoods.GoXam.Part})">
            <summary>
            Returns true if there are any nodes within or
            intersecting the given rectangular region.
            </summary>
            <param name="r">a Rect in model coordinates</param>
            <param name="skip">
            a predicate that should return true for nodes to be ignored when checking for collisions,
            usually the node in the document that you are considering moving;
            may be <c>null</c> to consider all non-temporary nodes
            </param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.Diagram">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Diagram"/> that this panel is in.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.DiagramBounds">
            <summary>
            Gets or sets the model-coordinate bounds of the diagram.
            </summary>
            <value>
            This is normally set by <see cref="M:Northwoods.GoXam.DiagramPanel.UpdateDiagramBounds"/>
            with the value returned by <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>.
            </value>
            <remarks>
            This property affects how far one may scroll.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.FixedBounds">
            <summary>
            Gets or sets a fixed bounding rectangle to be returned by <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>.
            </summary>
            <value>
            By default this has Double.NaN values, meaning that <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>
            should actually compute the union of all of the parts in the diagram.
            If all X/Y/Width/Height values are actual numbers, this value is returned
            by <see cref="M:Northwoods.GoXam.DiagramPanel.ComputeDiagramBounds"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.Position">
            <summary>
            Gets or sets the point, in model coordinates, shown at the top-left corner of this panel.
            </summary>
            <value>
            The default value is (0,0).
            For example, increasing the X value of this property will cause all of the parts to appear farther to the left;
            some parts that are located at X coordinates just less than the new X value will "disappear" off-screen.
            This property changes as the user scrolls in any direction.
            </value>
            <remarks>
            The value may be limited by the size and extent of the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>,
            as <see cref="M:Northwoods.GoXam.DiagramPanel.OnPositionChanged(System.Windows.Point,System.Windows.Point)"/> tries to implement policies that limit how far one may scroll.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.Scale">
            <summary>
            Gets or sets the scale factor at which everything is rendered.
            </summary>
            <value>
            The default value is 1.0 -- one unit in model coordinates is the same size as a device-independent-pixel.
            Values larger than 1.0 result in parts that appear larger, as if zooming into the diagram.
            Values smaller than 1.0 make everything appear smaller, as if zooming out of the diagram.
            Any new value must be a number larger than zero.
            </value>
            <remarks>
            Changing the scale may also result in a change in <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>,
            as <see cref="M:Northwoods.GoXam.DiagramPanel.OnScaleChanged(System.Double,System.Double)"/> tries to keep the diagram's parts aligned in the panel.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.MinimumScale">
            <summary>
            Gets or sets the smallest value greater than zero that <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> may take.
            </summary>
            <value>
            The default value is 0.0001.
            Values must be larger than zero and no greater than one.
            This property is only used to limit the range of new values in the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> setter.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.MaximumScale">
            <summary>
            Gets or sets the largest value that <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> may take.
            </summary>
            <value>
            The default value is 100.0.
            Values must be no less than one.
            This property is only used to limit the range of new values in the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> setter.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.Padding">
            <summary>
            Gets or sets the amount of extra "empty" space is reserved around the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>.
            </summary>
            <value>
            This value is in model coordinates.
            The standard <c>ControlTemplate</c> for <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>
            uses a <c>TemplateBinding</c> to get this value from the <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment">
            <summary>
            Gets or sets how the parts are positioned in the panel when the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> width
            is smaller than the <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>.
            </summary>
            <value>
            A value of <c>HorizontalAlignment.Stretch</c> will not automatically scroll the diagram contents
            to be at the left, at the right, or centered.
            The standard <c>ControlTemplate</c> for <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>
            uses a <c>TemplateBinding</c> to get this value from the <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>.
            </value>
            <remarks>
            This value also affects how the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> changes as the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> changes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment">
            <summary>
            Gets or sets how the parts are positioned in the panel when the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> width
            is smaller than the <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>.
            </summary>
            <value>
            A value of <c>VerticalAlignment.Stretch</c> will not automatically scroll the diagram contents
            to be at the top, at the bottom, or centered.
            The standard <c>ControlTemplate</c> for <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>
            uses a <c>TemplateBinding</c> to get this value from the <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>.
            </value>
            <remarks>
            This value also affects how the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> changes as the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> changes.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.Stretch">
            <summary>
            Gets or sets how the panel's <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> property is set,
            depending on the size of the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>.
            </summary>
            <value>
            The standard <c>ControlTemplate</c> for <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>
            uses a <c>TemplateBinding</c> to get this value from the <see cref="P:Northwoods.GoXam.DiagramPanel.Diagram"/>.
            </value>
            <remarks>
            Set this property to <see cref="F:Northwoods.GoXam.StretchPolicy.Uniform"/>
            to cause the whole diagram to appear in the panel, at a small enough scale
            that everything fits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ZoomPoint">
            <summary>
            Gets or sets the apparent focus point used when zooming in or out.
            </summary>
            <value>
            This value is in element coordinates, not in model coordinates.
            The default value is (NaN, NaN), which means the actual zoom point used
            depends on the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/> and
            <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/> properties.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.GoXam.DiagramPanel.OnScaleChanged(System.Double,System.Double)"/>.
            It is temporarily set by <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseWheel"/>
            so that the user can zoom into a diagram at the mouse point when
            rotating the mouse wheel with the Control key modifier.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ZoomTime">
            <summary>
            Gets or sets how quickly to change the <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> and/or <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            properties when adapting to <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> changes or panel size changes
            causing content re-alignment, or in calls to <see cref="M:Northwoods.GoXam.DiagramPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)"/> or <see cref="M:Northwoods.GoXam.DiagramPanel.CenterPart(Northwoods.GoXam.Part,System.Action)"/>.
            </summary>
            <value>
            The time is in milliseconds.
            The default is 500 (one half of a second).
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.AutoScrollRegion">
            <summary>
            Gets or sets the margin in the panel where a mouse drag will automatically cause the view to scroll.
            </summary>
            <value>
            The <c>Thickness</c> value defaults to 16,16,16,16.
            </value>
            <remarks>
            When the mouse drag point is within this region on the left or right sides,
            the view will automatically scroll horizontally in that direction.  When the point is within
            the region on the top or bottom, the view will automatically scroll
            vertically in that direction.  You can specify a distance of zero to disable autoscrolling
            in a direction; a value of 0,0,0,0 turns off autoscrolling altogether.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.DiagramPanel.DoAutoScroll(System.Windows.Point)"/>
            <seealso cref="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange"/>
            <seealso cref="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange"/>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.AutoScrollTime">
            <summary>
            Gets or sets how quickly to change the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            when the mouse is in the <see cref="P:Northwoods.GoXam.DiagramPanel.AutoScrollRegion"/>.
            </summary>
            <value>
            The time is in milliseconds.
            The default is 33 milliseconds.
            The value must not be negative.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.AutoScrollDelay">
            <summary>
            Gets or sets how long to wait before autoscrolling.
            </summary>
            <value>
            The time is in milliseconds.
            The default is 1000 (one second).
            The value must not be negative.
            </value>
            <remarks>
            This is helpful in avoiding autoscrolling when the user is dragging something
            into the view and doesn't yet intend to autoscroll.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.AdornmentLayer">
            <summary>
            Gets the standard layer used to hold <see cref="T:Northwoods.GoXam.Adornment"/>s,
            which is normally in front of all of the other layers.
            </summary>
        </member>
        <member name="E:Northwoods.GoXam.DiagramPanel.ViewportBoundsChanged">
            <summary>
            This event occurs when the viewport changes.
            </summary>
            <remarks>
            The panel raises this event when the <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>,
            <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> or size properties change, since those
            properties affect the value of <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportBounds"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.DiagramPanel.DiagramBoundsChanged">
            <summary>
            This event occurs when the diagram's bounds or alignment changes.
            </summary>
            <remarks>
            The panel raises this event when the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>,
            the <see cref="P:Northwoods.GoXam.DiagramPanel.FixedBounds"/>, <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/>,
            or <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/> properties change.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the diagram's parts.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <value>
            This normally ranges from zero to <see cref="P:Northwoods.GoXam.DiagramPanel.ExtentWidth"/> - <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>,
            in control (device independent pixel) units.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.VerticalOffset">
            <summary>
            Gets the vertical offset of the diagram's parts.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <value>
            This normally ranges from zero to <see cref="P:Northwoods.GoXam.DiagramPanel.ExtentHeight"/> - <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportHeight"/>,
            in control (device independent pixel) units.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ViewportWidth">
            <summary>
            Get the horizontal size of the visible part of this panel,
            in control (device independent pixel) units.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ViewportHeight">
            <summary>
            Get the vertical size of the visible part of this panel,
            in control (device independent pixel) units.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ExtentWidth">
            <summary>
            Get the horizontal size of the scrollable part of this diagram,
            in control (device independent pixel) units.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ExtentHeight">
            <summary>
            Get the vertical size of the scrollable part of this diagram,
            in control (device independent pixel) units.
            (Implements <c>IScrollInfo</c>.)
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ViewportBounds">
            <summary>
            Gets the visible part of this panel, in model coordinates.
            </summary>
            <value>
            This is a combination of <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>, <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportWidth"/>,
            <see cref="P:Northwoods.GoXam.DiagramPanel.ViewportHeight"/>, and <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.CanHorizontallyScroll">
            <summary>
            Gets or sets whether the user can scroll horizontally.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.CanVerticallyScroll">
            <summary>
            Gets or sets whether the user can scroll vertically.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ScrollOwner">
            <summary>
            Gets or sets the <c>ScrollViewer</c> that lets the user scroll this panel.
            (Implements <c>IScrollInfo</c>.)
            </summary>
            <value>
            This will be null if there is no <c>ScrollViewer</c> containing this panel.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ScrollHorizontalLineChange">
            <summary>
            Gets or sets the size of a "line" when scrolling horizontally.
            </summary>
            <value>
            The default value is 16.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.DiagramPanel.ScrollVerticalLineChange">
            <summary>
            Gets or sets the size of a "line" when scrolling vertically.
            </summary>
            <value>
            The default value is 16.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.SearchFlags">
            <summary>
            This enumeration is used to control what kinds of parts are found,
            in calls to <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsNear``1(System.Windows.Point,System.Double,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/> and <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsIn``1(System.Windows.Rect,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.None">
            <summary>
            Include no parts (not very useful).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.SimpleNode">
            <summary>
            Include all nodes that are not groups or link label nodes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Group">
            <summary>
            Include all nodes that are groups.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Label">
            <summary>
            Include all nodes that are link labels.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Nodes">
            <summary>
            Include all kinds of nodes, including groups and link label nodes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Links">
            <summary>
            Include all links.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Parts">
            <summary>
            Include all parts.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.Selectable">
            <summary>
            Also require parts to be selectable.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchFlags.SelectableParts">
            <summary>
            Include all selectable parts.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.SearchInclusion">
            <summary>
            This enumeration is used to control how parts may overlap the given geometry,
            in calls to <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsNear``1(System.Windows.Point,System.Double,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/> and <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsIn``1(System.Windows.Rect,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchInclusion.Inside">
            <summary>
            To match, a part must be completely inside the given geometry.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchInclusion.Intersects">
            <summary>
            To match, a part may overlap the given geometry completely or only partly.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.SearchLayers">
            <summary>
            This enumeration is used to control which layers are considered,
            in calls to <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsNear``1(System.Windows.Point,System.Double,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/>, <see cref="M:Northwoods.GoXam.DiagramPanel.FindPartsIn``1(System.Windows.Rect,Northwoods.GoXam.SearchFlags,Northwoods.GoXam.SearchInclusion,Northwoods.GoXam.SearchLayers)"/>,
            <see cref="M:Northwoods.GoXam.DiagramPanel.FindElementAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)"/>, and <see cref="M:Northwoods.GoXam.DiagramPanel.FindElementsAt``1(System.Windows.Point,System.Func{System.Windows.Media.Visual,``0},System.Predicate{``0},Northwoods.GoXam.SearchLayers)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.None">
            <summary>
            Include no layers (not very useful).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.Nodes">
            <summary>
            Include all regular <see cref="T:Northwoods.GoXam.NodeLayer"/>s, but not any layers that are <see cref="P:Northwoods.GoXam.Layer.IsTemporary"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.Links">
            <summary>
            Include all regular <see cref="T:Northwoods.GoXam.LinkLayer"/>s, but not any layers that are <see cref="P:Northwoods.GoXam.Layer.IsTemporary"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.Parts">
            <summary>
            Include all regular <see cref="T:Northwoods.GoXam.Layer"/>s, holding nodes or links, but not any layers that are <see cref="P:Northwoods.GoXam.Layer.IsTemporary"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.Temporary">
            <summary>
            Also include temporary layers.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.SearchLayers.All">
            <summary>
            Include all layers.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.StretchPolicy">
            <summary>
            This lists the policies used to govern if and how the <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> is set automatically.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.StretchPolicy.None">
            <summary>
            The default policy, where the <see cref="P:Northwoods.GoXam.DiagramPanel.HorizontalContentAlignment"/>
            and <see cref="P:Northwoods.GoXam.DiagramPanel.VerticalContentAlignment"/> control the effective positioning
            of the parts in the panel when the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> fits
            within the panel's viewport.
            The <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> will not change.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.StretchPolicy.Unstretched">
            <summary>
            This is the same as <see cref="F:Northwoods.GoXam.StretchPolicy.None"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.StretchPolicy.Uniform">
            <summary>
            The <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> are
            automatically adjusted so that the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/> is fully
            visible in the panel.
            The new <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> will not be greater than 1.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.StretchPolicy.UniformToFill">
            <summary>
            The <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> are
            automatically adjusted so that one of the <see cref="P:Northwoods.GoXam.DiagramPanel.DiagramBounds"/>'s
            dimensions is fully visible in the panel.
            The new <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> will not be greater than 1.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Gesture">
            <summary>
            This enumerates the kinds of gestures that are implemented by <see cref="M:Northwoods.GoXam.DiagramPanel.PerformGesture(Northwoods.GoXam.GestureModifiers,Northwoods.GoXam.Gesture,System.Windows.Point,System.Windows.Point,Northwoods.GoXam.Diagram)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.None">
            <summary>
            No simulated mouse gesture is occuring.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseLeftButton">
            <summary>
            A simulated mouse gesture using the left button, a drag or a click.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseLeftDoubleClick">
            <summary>
            A simulated mouse double-click gesture using the left button.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseRightButton">
            <summary>
            A simulated mouse gesture using the right button, a drag or a click.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseRightDoubleClick">
            <summary>
            A simulated mouse double-click gesture using the right button.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseWheelForward">
            <summary>
            A simulated mouse wheel gesture, rolling forward.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Gesture.MouseWheelBackward">
            <summary>
            A simulated mouse wheel gesture, rolling backward.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.GestureModifiers">
            <summary>
            These gesture modifier flags are used by <see cref="M:Northwoods.GoXam.DiagramPanel.PerformGesture(Northwoods.GoXam.GestureModifiers,Northwoods.GoXam.Gesture,System.Windows.Point,System.Windows.Point,Northwoods.GoXam.Diagram)"/>,
            as if the corresponding keys were held down during the gesture.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GestureModifiers.None">
            <summary>
            No Control/Shift/Alt modifier for the simulated mouse gesture.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GestureModifiers.Control">
            <summary>
            As if the Control key is being held down during the simulated mouse gesture.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GestureModifiers.Shift">
            <summary>
            As if the Shift key is being held down during the simulated mouse gesture.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GestureModifiers.Alt">
            <summary>
            As if the Alt key is being held down during the simulated mouse gesture.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.ValidUnconnectedLinks">
            <summary>
            This enumeration controls whether link data must be connected at both "ends" to nodes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidUnconnectedLinks.None">
            <summary>
            All link data must have both the "from" and the "to" ends connected to nodes.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Model.ValidUnconnectedLinks.Allowed">
            <summary>
            Link data permits having no reference to nodes for either or both ends of the link.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.UniversalGraphLinksModel">
            <summary>
            This is a universal model, handling all kinds of datatypes representing nodes, node keys, and links.
            </summary>
            <remarks>
            <para>
            This assumes that each node or link can be a member of at most one subgraph node.
            Since it uses Object as the type for node data, this model class supports multiple instances
            of different (unrelated) types.
            </para>
            <para>
            For reasons of both compile-time type checking and run-time efficiency,
            we recommend defining your own model class derived from <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>.
            </para>
            <para>
            This defines nested classes: DataCollection and CopyDictionary.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalGraphLinksModel.#ctor">
            <summary>
            Create a modifiable <see cref="T:Northwoods.GoXam.Model.GraphLinksModel`4"/>
            with empty <c>ObservableCollection</c>s for the
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.NodesSource"/> and
            <see cref="P:Northwoods.GoXam.Model.GraphLinksModel`4.LinksSource"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphModel`2">
            <summary>
            The generic implementation of a diagram model consisting of nodes and subgraphs,
            with at most one link between any two nodes in one direction.
            </summary>
            <typeparam name="NodeType">the Type of node data</typeparam>
            <typeparam name="NodeKey">the Type of a value uniquely identifying a node data</typeparam>
            <seealso cref="T:Northwoods.GoXam.Model.IDiagramModel"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.#ctor">
            <summary>
            The default constructor produces an empty model.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CreateInitializedCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection)">
            <summary>
            Make a copy of this model, without sharing the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </summary>
            <param name="init">
            This is a <see cref="T:Northwoods.GoXam.Model.GraphModel`2.DataCollection"/> that provides the initial node data.
            (Such data is not copied.)
            If this is null, the initial <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> value is an empty collection.
            </param>
            <returns>a model just like this one, but with different data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindKeyForNode(`0)">
            <summary>
            Find the key for node data.
            </summary>
            <param name="nodedata"></param>
            <returns>the (hopefully) unique key for the given node data in this model</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyIsNodeData"/> is true, this just converts
            the <paramref name="nodedata"/> argument to the <typeparamref name="NodeKey"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.MakeNodeKeyUnique(`0)">
            <summary>
            This method is called when a duplicate key has been found.
            </summary>
            <param name="nodedata"></param>
            <returns>
            true to accept the data as a node after having made the key unique in the model;
            false to ignore this data.
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            When a node data is added to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection,
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeAdded(`0)"/> checks for a duplicate key value.
            If it is a duplicate key, this method is called to either modify the node
            data to have a unique key, or to return false to avoid adding the data
            to this model.  (However, the duplicate key node data will still be
            in the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.)
            </para>
            <para>
            This method is frequently overridden to implement the desired
            policy for your particular application model.
            </para>
            <para>
            When the user copies selected nodes into a diagram,
            it is likely that this method will be called.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)">
            <summary>
            Find the collection of "from" node key values.
            </summary>
            <param name="nodedata"></param>
            <returns>a collection of <typeparamref name="NodeKey"/> values</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/>
            property path is not flexible enough or fast enough to get the collection of "from" keys for a node.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)">
            <summary>
            Find the collection of "to" node key values.
            </summary>
            <param name="nodedata"></param>
            <returns>a collection of <typeparamref name="NodeKey"/> values</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/>
            property path is not flexible enough or fast enough to get the collection of "to" keys for a node.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindCategoryForNode(`0)">
            <summary>
            Find the category of a node data.
            </summary>
            <param name="nodedata"></param>
            <returns>by default an empty string</returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide which template to use.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeCategoryPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindIsGroupForNode(`0)">
            <summary>
            Find whether a node data is a group or container of other nodes.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide whether the data represents a group node.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeIsGroupPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindGroupKeyForNode(`0)">
            <summary>
            Find containing group node key for a given node data, if any.
            </summary>
            <param name="nodedata"></param>
            <returns>
            a <typeparamref name="NodeKey"/> for the containing group node,
            or the default value for that type if there is no container node for the node
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)">
            <summary>
            Find the list of keys of the children nodes for a node data object.
            </summary>
            <param name="nodedata"></param>
            <returns>the list of child keys, an <see cref="T:System.Collections.IEnumerable"/> of <typeparamref name="NodeKey"/></returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath"/>
            property path is not flexible enough or fast enough to get the collection of child node keys.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ClearUnresolvedReferences">
            <summary>
            Forget all unresolved delayed or forward references.
            </summary>
            <remarks>
            <para>
            The model may learn about node data in any order, so references to
            nodes may be unresolvable until later, perhaps never.
            Call this method to clear the internal table that keeps track
            of <typeparamref name="NodeKey"/>s that are not yet defined.
            </para>
            <para>
            This is called when setting a number of property path properties,
            because a model property path change can completely alter the references
            each node data might be making.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ResolveAllReferences">
            <summary>
            Cause <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ResolveNodeKey(`1)"/> to be called on each
            known delayed or forward node reference.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ResolveNodeKey(`1)">
            <summary>
            This is called repeatedly by <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ResolveAllReferences"/>,
            once for each known delayed or forward node reference.
            </summary>
            <param name="nodekey"></param>
            <remarks>
            Depending on the situation, you may want to create and
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertNode(`0)"/> in order to resolve a reference.
            Or you may want to ignore it, and later call
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ClearUnresolvedReferences"/> to make sure no
            future node data addition might resolve the reference.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.HandleNodePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> event handler for node data.
            </summary>
            <param name="sender"></param>
            <param name="e">preferably a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that describes what changed and how</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <paramref name="e"/> argument is a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>,
            this first calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> in order to raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event
            to notify this model's consumers.
            </para>
            <para>
            If the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> is the same as the
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/>, <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/>,
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath"/>, or <see cref="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath"/>,
            this automatically calls
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeKeyChanged(`0)"/>, <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoToNodeKeysChanged(`0)"/>, <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoFromNodeKeysChanged(`0)"/>,
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoGroupNodeChanged(`0)"/>, or <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoMemberNodeKeysChanged(`0)"/>,
            respectively.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeAdded(`0)">
            <summary>
            This should be called when a node data object is added to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> has been augmented.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeRemoved(`0)">
            <summary>
            This should be called when a node data object is removed from the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> has been diminished.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeKeyChanged(`0)">
            <summary>
            This should be called when a node data's key value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeCategoryChanged(`0)">
            <summary>
            This should be called when a node data's category value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeCategoryPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindCategoryForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoFromNodeKeyAdded(`0,`1)">
            <summary>
            This should be called when a "from" node data key has been added to the collection of "from" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="fromkey">the key for the added "from" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "from" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedFromNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoFromNodeKeyRemoved(`0,`1)">
            <summary>
            This should be called when a "from" node data key has been removed from the collection of "from" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="fromkey">the key for the removed "from" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "from" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedFromNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoFromNodeKeysChanged(`0)">
            <summary>
            This should be called when a node data's list of "from" nodes has been replaced.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedFromNodeKeys"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoToNodeKeyAdded(`0,`1)">
            <summary>
            This should be called when a "to" node data key has been added to the collection of "to" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="tokey">the key for the added "to" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "to" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedToNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoToNodeKeyRemoved(`0,`1)">
            <summary>
            This should be called when a "to" node data key has been removed from the collection of "to" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="tokey">the key for the removed "to" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "to" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedToNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoToNodeKeysChanged(`0)">
            <summary>
            This should be called when a node data's list of "to" nodes has been replaced.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedToNodeKeys"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoGroupNodeChanged(`0)">
            <summary>
            This should be called when a node data's membership in a group may have changed.
            </summary>
            <param name="nodedata">the modified node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindGroupKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedGroupNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoMemberNodeKeyAdded(`0,`1)">
            <summary>
            This should be called when a "member" node data key has been added to the collection of "member" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="memberkey">the key for the added "member" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "member" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedMemberNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoMemberNodeKeyRemoved(`0,`1)">
            <summary>
            This should be called when a "member" node data key has been removed from the collection of "member" node keys.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="memberkey">the key for the removed "member" node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of "member" keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedMemberNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DoMemberNodeKeysChanged(`0)">
            <summary>
            This should be called when a node data's list of "member" nodes has been replaced.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedMemberNodeKeys"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetNodeType">
            <summary>
            Return the <typeparamref name="NodeType"/>.
            </summary>
            <returns>a <see cref="T:System.Type"/>, not a node data object, nor a string</returns>
            <remarks>
            This is useful for data transfer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsNodeType(System.Object)">
            <summary>
            This predicate is true when the argument is an instance of <typeparamref name="NodeType"/>.
            </summary>
            <param name="nodedata">the arbitrary object to be checked for compatibility to be a node data</param>
            <returns>
            true if the <paramref name="nodedata"/> can be cast to the <typeparamref name="NodeType"/>;
            false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsNodeData(`0)">
            <summary>
            This predicate is true if the argument is a node data in this model.
            </summary>
            <param name="nodedata">the <typeparamref name="NodeType"/> object to be checked to see if it is a known node data in this model</param>
            <returns>
            true if the <paramref name="nodedata"/> is in the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            This uses a hash table lookup.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.FindNodeByKey(`1)">
            <summary>
            Given a key, find the node data with that key.
            </summary>
            <param name="key">
            a value of null for this argument will result in the default value for <typeparamref name="NodeType"/>
            </param>
            <returns>
            a <typeparamref name="NodeType"/>;
            the value will be the default for the type if no such node data is known to be in this model
            </returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyIsNodeData"/> is true,
            this just converts the <paramref name="key"/> argument
            to the <typeparamref name="NodeType"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsLinked(`0,`0)">
            <summary>
            This predicate is true if there is a link from one node data to another one.
            </summary>
            <param name="fromnodedata"></param>
            <param name="tonodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetConnectedNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected to a given node, in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetFromNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links going into a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetToNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links coming out from a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetCategoryForNode(`0)">
            <summary>
            This method gets the category of a node.
            </summary>
            <param name="nodedata"></param>
            <returns>a String, defaulting to the empty string</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetIsGroupForNode(`0)">
            <summary>
            This predicate is true if a given node data may be a group (i.e. a container) of other nodes.
            </summary>
            <param name="nodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsMember(`0,`0)">
            <summary>
            This predicate is true if the <paramref name="membernodedata"/> is a member
            of the <paramref name="groupnodedata"/> container group.
            </summary>
            <param name="groupnodedata"></param>
            <param name="membernodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetGroupForNode(`0)">
            <summary>
            Return the container group node data for a given node data, if there is one.
            </summary>
            <param name="nodedata"></param>
            <returns>a <typeparamref name="NodeType"/> node data</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.GetMemberNodesForGroup(`0)">
            <summary>
            Return a sequence of node data that are immediate members of a given node data.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of member node data; an empty sequence if there are no members</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyNode1(`0,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)">
            <summary>
            This is the first pass of copying node data, responsible for constructing
            a copy and copying most of its properties.
            </summary>
            <param name="nodedata"></param>
            <param name="env"></param>
            <returns></returns>
            <remarks>
            <para>
            By default this handles <c>ICloneable</c> or serializable objects.
            But you may want to override this method to customize which properties
            get copied or how they are copied or to provide a faster implementation.
            </para>
            <para>
            This does NOT ensure that the copied node data has a unique key.
            You must do that before adding it to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection,
            either by overriding the data's Clone method, or
            by declaring the data Serializable (WPF),
            by overriding this method.
            Or you can override the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.MakeNodeKeyUnique(`0)"/> method that is called when
            data is added to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection of the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyNode2(`0,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This is the second pass of copying node data, responsible for fixing up
            references to other objects.
            </summary>
            <param name="oldnodedata">the original node data</param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <param name="newnodedata">the copied node data</param>
            <param name="newgroup">for convenience, the copied "parent" node data</param>
            <param name="newmembers">for convenience, a list of newly copied member nodes</param>
            <param name="newfroms">for convenience, a list of newly copied nodes that the new data is connected from</param>
            <param name="newtos">for convenience, a list of newly copied nodes that the new data is connected to</param>
            <remarks>
            <para>
            You will want to override this method if the node data should have any references
            to copied data.
            Otherwise the copied node will appear to have links to the original nodes,
            not to the copied nodes.
            </para>
            <para>
            Your overridden method may want to do something like what this method does by default:
            <code>
              // this assumes the node data has a modifiable collection of "from" node references
              // if not, you could instead construct your own list of keys and call ModifyFromNodeKeys
              if (this.FromNodesPath != "" &amp;&amp; newfroms != null) {
                // remove any old keys; not needed if the copied property value is empty
                foreach (NodeKey k in FindFromNodeKeysForNode(newnodedata).OfType&lt;NodeKey&gt;().ToList()) {
                  DeleteFromNodeKey(newnodedata, k);
                }
                // add new keys (which should be different from the old keys)
                foreach (NodeType newfrom in newfroms) {
                  NodeKey newfromkey = FindKeyForNode(newfrom);
                  InsertFromNodeKey(newnodedata, newfromkey);
                }
              }
              // this assumes the node data has a modifiable collection of "to" node references;
              // if not, you could instead construct your own list of keys and call ModifyToNodeKeys
              if (this.ToNodesPath != "" &amp;&amp; newtos != null) {
                // remove any old keys; not needed if the copied property value is empty
                foreach (NodeKey k in FindToNodeKeysForNode(newnodedata).OfType&lt;NodeKey&gt;().ToList()) {
                  DeleteToNodeKey(newnodedata, k);
                }
                // add new keys (which should be different from the old keys)
                foreach (NodeType newto in newtos) {
                  NodeKey newtokey = FindKeyForNode(newto);
                  InsertToNodeKey(newnodedata, newtokey);
                }
              }
              // this assumes the node data has a reference to its container group
              if (this.GroupNodePath != "" &amp;&amp; newgroup != null) {
                ModifyGroupNodeKey(newnodedata, FindKeyForNode(newgroup));
              }
              // this assumes the node data has a modifiable collection that InsertMemberNodeKey can work with;
              // if not, you could instead construct your own list of keys and call ModifyMemberNodeKeys.
              if (this.MemberNodesPath != "" &amp;&amp; newmembers != null) {
                // remove any old keys; not needed if the copied property value is empty
                foreach (NodeKey k in FindMemberNodeKeysForNode(newnodedata).OfType&lt;NodeKey&gt;().ToList()) {
                  DeleteMemberNodeKey(newnodedata, k);
                }
                // add new keys (which should be different from the old keys)
                foreach (NodeType newmem in newmembers) {
                  NodeKey newmemkey = FindKeyForNode(newmem);
                  InsertMemberNodeKey(newnodedata, newmemkey);
                }
              }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CreateDataCollection">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CreateCopyDictionary">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> initialized for this model.
            </summary>
            <returns>Normally this will be an empty dictionary.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddNodeCopy(`0)">
            <summary>
            Add a copy of a node data to this model.
            </summary>
            <param name="nodedata"></param>
            <returns>the copied node data</returns>
            <remarks>
            <para>
            This is a convenience method that just calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddCollectionCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddCollectionCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)">
            <summary>
            Copy existing node data and add to this model.
            </summary>
            <param name="coll">the collection of data to be copied</param>
            <param name="env">
            the <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> used to keep track of copied objects;
            if null, the method will call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CreateCopyDictionary"/>, use it, and return it
            </param>
            <returns>the updated copy dictionary, mapping original data to copied data</returns>
            <remarks>
            <para>
            The primary purpose of this method is to perform a two-pass copy of a part of a diagram,
            and add the resulting data to this model.
            </para>
            <para>
            Of course you can add data without copying them by calling <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddNode(`0)"/>
            or by just adding them directly to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>.
            </para>
            <para>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AugmentCopyCollection(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection)"/> on the source model to allow it to extend the
            collection to include parts that it thinks should be in the collection.
            </para>
            <para>
            Then it calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AugmentCopyDictionary(Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/> on this, the destination model, to allow it
            to prepopulate the <see cref="T:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary"/> if it wants to guide the copying process to
            control the sharing of references in the copied parts.
            </para>
            <para>
            The first pass copies all of the nodes that are not already in the <paramref name="env"/>
            copy dictionary, by calling <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CopyNode1(`0,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/>.  If the call returns a node data,
            it is added to this model by calling <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddNode(`0)"/> and remembered in the
            <paramref name="env"/> copy dictionary, mapped to the original node data.
            </para>
            <para>
            The second pass fixes up references in all of the copied nodes by calling <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CopyNode2(`0,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})"/>.
            It passes as arguments both the original node data and the copied node data, as well as the
            newly copied group node, if any, and a list of member nodes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AugmentCopyCollection(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection)">
            <summary>
            Override this method to add more (related) data to be copied.
            </summary>
            <param name="coll">the collection of data to be copied</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AugmentCopyDictionary(Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)">
            <summary>
            Override this method to avoid copying some data, or to change how copied references are resolved.
            </summary>
            <param name="env">the dictionary mapping original objects to copied objects</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.InsertNode(`0)">
            <summary>
            This method actually implements the addition of a node data to the
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddNode(`0)">
            <summary>
            Add a node data to <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertNode(`0)"/> to actually perform the addition.
            This is a no-op if the node data is already in the model.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.InsertLink(`0,`0)">
            <summary>
            This method actually implements the addition of a link between two nodes.
            </summary>
            <param name="fromdata"></param>
            <param name="todata"></param>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddFromNodeKey(`0,`1)"/>.
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddToNodeKey(`0,`1)"/>.
            This method can be overridden in case the creation of a link
            is more complex than the default implementation.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddLink(`0,`0)">
            <summary>
            Create a link between two nodes.
            </summary>
            <param name="fromdata"></param>
            <param name="todata"></param>
            <remarks>
            This is a no-op if the two nodes are already linked, according to <see cref="M:Northwoods.GoXam.Model.GraphModel`2.IsLinked(`0,`0)"/>.
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertLink(`0,`0)"/> to actually create the link.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DeleteNode(`0)">
            <summary>
            This method actually implements the removal of a node data from the
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.RemoveNode(`0)">
            <summary>
            Remove a node data from <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This also removes any links connected to this node.
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DeleteNode(`0)"/> to actually perform the removal.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DeleteLink(`0,`0)">
            <summary>
            This method actually implements the removal of a link between two nodes.
            </summary>
            <param name="fromdata"></param>
            <param name="todata"></param>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.RemoveFromNodeKey(`0,`1)"/>.
            If <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.RemoveToNodeKey(`0,`1)"/>.
            This method can be overridden in case the deletion of a link
            is more complex than the default implementation.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.RemoveLink(`0,`0)">
            <summary>
            Remove any link between two nodes.
            </summary>
            <param name="fromdata"></param>
            <param name="todata"></param>
            <remarks>
            This is a no-op if there is no existing link between the nodes, according to <see cref="M:Northwoods.GoXam.Model.GraphModel`2.IsLinked(`0,`0)"/>.
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DeleteLink(`0,`0)"/> to actually delete the link.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.InsertFromNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of "from" node data keys includes a given <paramref name="fromkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="fromkey">the key value of the "from" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddFromNodeKey(`0,`1)">
            <summary>
            Add a "from" node data's key value to a node data's list of nodes from which links come.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="fromkey">the key value of the "from" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertFromNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DeleteFromNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of "from" node data keys does not include a given <paramref name="fromkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="fromkey">the key value of the "from" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.RemoveFromNodeKey(`0,`1)">
            <summary>
            Remove a "from" node data's key value from a node data's list of nodes from which links come.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="fromkey">the key value of the "from" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DeleteFromNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ModifyFromNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            This method actually implements the replacement of a node data's
            collection of "from" node keys.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="fromnodekeys">a sequence of "from" node data key values</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.SetFromNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "from" node key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="fromnodekeys">a sequence of "from" node data key values</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ModifyFromNodeKeys(`0,System.Collections.IEnumerable)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.InsertToNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of "to" node data keys includes a given <paramref name="tokey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="tokey">the key value of the "to" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddToNodeKey(`0,`1)">
            <summary>
            Add a "to" node data's key value to a node data's list of nodes to which links go.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="tokey">the key value of the "to" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertToNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DeleteToNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of "to" node data keys does not include a given <paramref name="tokey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="tokey">the key value of the "to" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.RemoveToNodeKey(`0,`1)">
            <summary>
            Remove a "to" node data's key value from a node data's list of nodes to which links go.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="tokey">the key value of the "to" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DeleteToNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ModifyToNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            This method actually implements the replacement of a node data's
            collection of "to" node keys.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="tonodekeys">a sequence of "to" node data key values</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.SetToNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "to" node key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="tonodekeys">a sequence of "to" node data key values</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ModifyToNodeKeys(`0,System.Collections.IEnumerable)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ModifyGroupNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that its reference to a containing group node data (if any) is the given <paramref name="groupkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="groupkey">the key value of the "group" node data</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.SetGroupNodeKey(`0,`1)">
            <summary>
            Change a node data so that it refers to a different container group node data, by node key.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="groupkey">the key value of the new "group" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ModifyGroupNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.InsertMemberNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of member node data includes a given <paramref name="memberkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="memberkey">the key value of the new "member" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.AddMemberNodeKey(`0,`1)">
            <summary>
            Add a "member" node data's key value to a node data's list of "members".
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="memberkey">the key value of the new "member" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertMemberNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DeleteMemberNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of children node data does not include a given <paramref name="memberkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="memberkey">the key value of the "member" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.RemoveMemberNodeKey(`0,`1)">
            <summary>
            Remove a child node data's key value from a group node data's list of "member" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="memberkey">the key value of the "member" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DeleteMemberNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ModifyMemberNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            This method actually implements the replacement of a group node data's
            collection of member node keys.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="membernodekeys">a sequence of "member" node data key values</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.SetMemberNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "member" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="membernodekeys">a sequence of "member" node data key values</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.ModifyMemberNodeKeys(`0,System.Collections.IEnumerable)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsLinkValid(`0,`0)">
            <summary>
            This predicate is true if adding a link between two nodes would result in a valid graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CheckLinkValid(`0,`0,System.Boolean,`0,`0)"/> to do the actual graph structure check.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.GraphModel`2.ValidCycle"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsRelinkValid(`0,`0,`0,`0)">
            <summary>
            This predicate is true if adding a link between two nodes after removing an existing one would result in a valid graph.
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the link would come</param>
            <param name="newtodata">a node key identify the node data to which the link would go</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CheckLinkValid(`0,`0,System.Boolean,`0,`0)">
            <summary>
            This predicate is true if adding a link between two nodes/ports would result in a validly structured graph.
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the link would come</param>
            <param name="newtodata">a node key identify the node data to which the link would go</param>
            <param name="ignoreexistinglink">true if relinking; false if adding a new link</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns>
            The behavior of this predicate depends on the value of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.ValidCycle"/>.
            This returns false for duplicate links.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.IsMemberValid(`0,`0,System.Boolean)">
            <summary>
            This predicate is true if adding <paramref name="membernodedata"/> to a group node
            (<paramref name="groupnodedata"/>) would result in an invalid graph.
            </summary>
            <param name="groupnodedata">the node data that is a group</param>
            <param name="membernodedata">a node data</param>
            <param name="ignoreexistingmembership">
            whether to ignore the <paramref name="membernodedata"/>'s existing group membership,
            because that member is being transferred out of its existing group
            </param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CheckMemberValid(`0,`0,System.Boolean)"/> to do the actual graph structure check.
            </remarks>
            <seealso cref="P:Northwoods.GoXam.Model.GraphModel`2.ValidCycle"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CheckMemberValid(`0,`0,System.Boolean)">
            <summary>
            This predicate is true if adding a node to a group node would result in an invalid graph.
            </summary>
            <param name="groupnodedata">the node data that is a group</param>
            <param name="membernodedata">a node data to be considered for adding to the group</param>
            <param name="ignoreexistingmembership">
            whether to ignore the <paramref name="membernodedata"/>'s existing group membership,
            because that member is being transferred out of its existing group
            </param>
            <returns>
            This returns false for membership that would break the tree structure of the model's graph of groups.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ChangeModelValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to this model.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to model data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Generate a Linq for XML <c>XElement</c> holding all of the node data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphModelNodeData`1"/></typeparam>
            <param name="rootname">the name of the returned <c>XElement</c></param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <returns>an <c>XElement</c></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection with a collection of new node data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.GraphModelNodeData`1"/> with a public zero-argument constructor</typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <remarks>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.Load``1(System.Xml.Linq.XContainer,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection with a collection of new node data.
            </summary>
            <typeparam name="NodeDataType">this must be a class inheriting from <see cref="T:Northwoods.GoXam.Model.GraphModelNodeData`1"/></typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodedataallocator">
            a function that takes an <c>XElement</c> and returns either a newly constructed object of type <typeparamref name="NodeDataType"/>
            or null if that <c>XElement</c> is to be ignored
            </param>
            <remarks>
            <para>
            This will iterate over all of the child elements of the <paramref name="root"/> container,
            calling <paramref name="nodedataallocator"/> on each one.
            If that function returns non-null, it calls <see cref="M:Northwoods.GoXam.Model.GraphModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/> on the new data
            and then adds it to the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </para>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource">
            <summary>
            Gets or sets the collection of node data items for the model.
            </summary>
            <value>
            Initially this value is an empty <c>ObservableCollection</c>.
            It cannot be set to a null value.
            For generality, this is of type <see cref="T:System.Collections.IEnumerable"/>.
            </value>
            <remarks>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodesSource"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyPath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for node data.
            </summary>
            <value>
            This defaults to an empty string, meaning to use the data as the key value.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyIsNodeData">
            <summary>
            Gets or sets whether all node data are also their own keys.
            </summary>
            <value>
            The default value is false.
            For this to be set to true, the <typeparamref name="NodeType"/> type
            and the <typeparamref name="NodeKey"/> types must be the same.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  It is an optimization that
            avoids the use of an additional hash table mapping
            <typeparamref name="NodeKey"/> values to their <typeparamref name="NodeType"/> data,
            and permits other optimizations as well.
            This can often be set to true when "references" to nodes
            are actually using .NET CLR references (i.e. "pointers") instead
            of values such as integer, strings, GUIDs et al.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyReferenceAutoInserts">
            <summary>
            Gets or sets whether a <typeparamref name="NodeKey"/> reference,
            when <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyIsNodeData"/> is true,
            automatically inserts the node into <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property only has an effect when <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodeKeyIsNodeData"/> is true.
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.DoNodeAdded(`0)"/> calls <see cref="M:Northwoods.GoXam.Model.GraphModel`2.InsertNode(`0)"/> if the referred-to
            node is not already known to be in the <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.FromNodesPath">
            <summary>
            Gets or sets a property path that that specifies how to get the collection of keys
            of node data from which links come.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/>
            not to be called to get a list of related nodes.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindFromNodeKeysForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object
            must be of type <see cref="T:System.Collections.IEnumerable"/>,
            holding only instances of <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.ToNodesPath">
            <summary>
            Gets or sets a property path that that specifies how to get the collection of keys
            of node data to which links go.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/>
            not to be called to get a list of related nodes.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindToNodeKeysForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object
            must be of type <see cref="T:System.Collections.IEnumerable"/>,
            holding only instances of <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodeCategoryPath">
            <summary>
            Gets or sets a property path that that specifies how to find the category of a node data.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindCategoryForNode(`0)"/> to return an empty string.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindCategoryForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a string.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.NodeIsGroupPath">
            <summary>
            Gets or sets a property path that that specifies how to find out whether
            a node data is also a "container" group.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindIsGroupForNode(`0)"/> to return false.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindIsGroupForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a boolean.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.GroupNodePath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for "container" or group node data of a node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindGroupKeyForNode(`0)"/>.
            Otherwise that method is called to try to find the container node for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindGroupKeyForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindGroupKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.MemberNodesPath">
            <summary>
            Gets or sets a property path that that specifies how to get a list of keys for the "member" nodes of a group node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/>.
            Otherwise that method is called to try to find the list of children for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.GraphModel`2.FindMemberNodeKeysForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <see cref="T:System.Collections.IEnumerable"/>,
            holding only instances of <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.ValidCycle">
            <summary>
            Specify what kinds of graphs this model allows.
            </summary>
            <remarks>
            Changing this property will not remove or add any links,
            but will only affect future attempts to add or modify links.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphModel`2.DataCollection">
            <summary>
            This nested class is a serializable collection of node data.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> is used in various circumstances where
            there is a collection of node data, particularly for copying.
            If the node data is serializable, this collection can be serialized,
            which is useful when copying to the clipboard or pasting from it.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType and NodeKey type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CreateDataCollection"/> to allocate an instance.
            </para>
            <para>
            This collection class does not support separate link data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DataCollection.#ctor">
            <summary>
            The default constructor produces an empty collection.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CreateDataCollection"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DataCollection.ContainsNode(`0)">
            <summary>
            This predicate is true if the given node data is in the collection of <see cref="P:Northwoods.GoXam.Model.GraphModel`2.DataCollection.Nodes"/>.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DataCollection.AddNode(`0)">
            <summary>
            Add a node data to this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data is already in the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.DataCollection.RemoveNode(`0)">
            <summary>
            Remove a node data from this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data was not in the collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.DataCollection.Model">
            <summary>
            Gets or sets the model that owns all of the nodes in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.DataCollection.Nodes">
            <summary>
            Gets or sets the collection of node data, each of type <typeparamref name="NodeType"/>.
            </summary>
            <value>
            Setting this property will enumerate all of the node data
            that the argument value collection contains.
            If the new value is null, this collection is cleared.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary">
            <summary>
            This nested class is used during copying to hold a mapping of original nodes
            to newly copied nodes.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> is used during the two-pass copying process
            to keep track of which newly copied node data correspond to which original node data.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType and NodeKey type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CreateCopyDictionary"/> to allocate an instance.
            </para>
            <para>
            This collection class does not support separate link data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.#ctor">
            <summary>
            The default constructor builds an empty dictionary.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.GraphModel`2.CreateCopyDictionary"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.ContainsSourceNode(`0)">
            <summary>
            This predicate is true if the given node data is in the source collection.
            </summary>
            <param name="oldnode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.FindCopiedNode(`0)">
            <summary>
            Look up the copied node for a given source node.
            </summary>
            <param name="oldnode">a source node data</param>
            <returns>the copied node data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.AddCopiedNode(`0,`0)">
            <summary>
            Declare the mapping of a source node data to a copied node data.
            </summary>
            <param name="oldnode">a node data in the source collection</param>
            <param name="newnode">
            a copied node data,
            or null to indicate that there is no copied node data for a given source node data
            </param>
            <remarks>
            This will add a node data to the copies collection, associated with the source node data.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.RemoveSourceNode(`0)">
            <summary>
            Remove any association between a source node data and any copied node data.
            </summary>
            <param name="srcnodedata">a node data in the source collection</param>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.SourceModel">
            <summary>
            Gets or sets the source model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddCollectionCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.DestinationModel">
            <summary>
            Gets or sets the destination model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddCollectionCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.SourceCollection">
            <summary>
            Gets or sets the source collection of data to be copied for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.GraphModel`2.AddCollectionCopy(Northwoods.GoXam.Model.GraphModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.GraphModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.GraphModel`2.CopyDictionary.Copies">
            <summary>
            Gets the collection of copied nodes as a <see cref="T:Northwoods.GoXam.Model.GraphModel`2.DataCollection"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.UniversalGraphModel">
            <summary>
            This is a universal model, handling all kinds of datatypes representing nodes.
            </summary>
            <remarks>
            <para>
            This assumes that each node can be a member of at most one subgraph node.
            Since it uses Object as the type for node data, this model class supports multiple instances
            of different (unrelated) types.
            </para>
            <para>
            For reasons of both compile-time type checking and run-time efficiency,
            we recommend defining your own model class derived from <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>.
            </para>
            <para>
            This defines nested classes: DataCollection and CopyDictionary.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalGraphModel.#ctor">
            <summary>
            Create a modifiable <see cref="T:Northwoods.GoXam.Model.GraphModel`2"/>
            with an empty <c>ObservableCollection</c> for the
            <see cref="P:Northwoods.GoXam.Model.GraphModel`2.NodesSource"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.ModelChangedEventArgs">
            <summary>
            This class represents a change to a model.
            </summary>
            <remarks>
            <para>
            This inherits from <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> so that it can be used as the
            <c>EventArgs</c> passed along for a <c>PropertyChanged</c> event
            for those data classes that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </para>
            <para>
            This also implements the <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> interface so that it
            can be used to remember changes in a <see cref="T:Northwoods.GoXam.Model.UndoManager"/>, as part of a
            <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.#ctor">
            <summary>
            The empty/default constructor produces an <see cref="T:System.EventArgs"/>
            whose properties still need to be initialized.
            </summary>
            <remarks>
            This is only used internally, for representing predefined <see cref="T:Northwoods.GoXam.Model.ModelChange"/> changes.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            This constructor initializes the mostly commonly used properties.
            </summary>
            <param name="pname">the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> property</param>
            <param name="data">the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/> property</param>
            <param name="oldval">the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue"/> property</param>
            <param name="newval">the <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewValue"/> property</param>
            <remarks>
            You may also need to initialize other properties, such as <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldParam"/> and <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewParam"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.#ctor(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            This is basically a "copy constructor", making a copy of the given <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.GetValue(System.Boolean)">
            <summary>
            This is a convenient method to get the right value,
            depending on the value of <paramref name="undo"/>.
            </summary>
            <param name="undo"></param>
            <returns>either <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue"/> or <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewValue"/></returns>
            <remarks>
            This is useful
            in implementations of <see cref="M:Northwoods.GoXam.Model.IChangeDataValue.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>
            or in overrides of <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.GetParam(System.Boolean)">
            <summary>
            This is a convenient method to get the right parameter value,
            depending on the value of <paramref name="undo"/>.
            </summary>
            <param name="undo"></param>
            <returns>either <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldParam"/> or <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewParam"/></returns>
            <remarks>
            This is useful
            in implementations of <see cref="M:Northwoods.GoXam.Model.IChangeDataValue.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>
            or in overrides of <see cref="M:Northwoods.GoXam.Model.DiagramModel.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.ToString">
            <summary>
            Produce a human-readable description of the change to the model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Clear">
            <summary>
            Forget any references that this object may have.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Undo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Undo">
            <summary>
            Reverse the effects of this document change
            by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoXam.Model.ModelChangedEventArgs.CanUndo"/> must be true for this method to call <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Redo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Redo">
            <summary>
            Re-perform the document change after an <see cref="M:Northwoods.GoXam.Model.ModelChangedEventArgs.Undo"/>
            by calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </summary>
            <remarks>
            <see cref="M:Northwoods.GoXam.Model.ModelChangedEventArgs.CanRedo"/> must be true for this method to call <see cref="M:Northwoods.GoXam.Model.IDiagramModel.ChangeModel(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Model">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/> that has been modified.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Change">
            <summary>
            Gets or sets the kind of change that this represents.
            </summary>
            <value>
            This is of type <see cref="T:Northwoods.GoXam.Model.ModelChange"/>.
            It defaults to <see cref="F:Northwoods.GoXam.Model.ModelChange.Property"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data">
            <summary>
            Gets or sets the data object, part of the model, that was modified.
            </summary>
            <remarks>
            Typically this will be either data representing a node or
            data representing a link.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue">
            <summary>
            Gets or sets the previous or old value that the property had.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldParam">
            <summary>
            Gets or sets an optional value associated with the old value.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewValue">
            <summary>
            Gets or sets the next or current value that the property has.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.ModelChangedEventArgs.NewParam">
            <summary>
            Gets or sets an optional value associated with the new value.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.TreeModel`2">
            <summary>
            The generic implementation of a diagram model consisting of only nodes, 
            with implicit links between a single parent and zero or more children.
            </summary>
            <typeparam name="NodeType">the Type of node data</typeparam>
            <typeparam name="NodeKey">the Type of a value uniquely identifying a node data</typeparam>
            <seealso cref="T:Northwoods.GoXam.Model.IDiagramModel"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.#ctor">
            <summary>
            The default constructor produces an empty model.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CreateInitializedCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection)">
            <summary>
            Make a copy of this model, without sharing the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </summary>
            <param name="init">
            This is a <see cref="T:Northwoods.GoXam.Model.TreeModel`2.DataCollection"/> that provides the initial node data.
            (Such data is not copied.)
            If this is null, the initial <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> value is an empty collection.
            </param>
            <returns>a model just like this one, but with different data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.FindKeyForNode(`0)">
            <summary>
            Find the key for node data.
            </summary>
            <param name="nodedata"></param>
            <returns>the (hopefully) unique key for the given node data in this model</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyIsNodeData"/> is true, this just converts
            the <paramref name="nodedata"/> argument to the <typeparamref name="NodeKey"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.MakeNodeKeyUnique(`0)">
            <summary>
            This method is called when a duplicate key has been found.
            </summary>
            <param name="nodedata"></param>
            <returns>
            true to accept the data as a node after having made the key unique in the model;
            false to ignore this data.
            </returns>
            <remarks>
            <para>
            This is used for model discovery.
            When a node data is added to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection,
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeAdded(`0)"/> checks for a duplicate key value.
            If it is a duplicate key, this method is called to either modify the node
            data to have a unique key, or to return false to avoid adding the data
            to this model.  (However, the duplicate key node data will still be
            in the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.)
            </para>
            <para>
            This method is frequently overridden to implement the desired
            policy for your particular application model.
            </para>
            <para>
            When the user copies selected nodes into a diagram,
            it is likely that this method will be called.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.FindParentNodeKeyForNode(`0)">
            <summary>
            Find the key of the parent node data for a node data object.
            </summary>
            <param name="nodedata"></param>
            <returns>a <typeparamref name="NodeKey"/>, the key of the parent node</returns>
            <remarks>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)">
            <summary>
            Find the list of keys of the children nodes for a node data object.
            </summary>
            <param name="nodedata"></param>
            <returns>the list of child keys, an <see cref="T:System.Collections.IEnumerable"/> of <typeparamref name="NodeKey"/></returns>
            <remarks>
            <para>
            This is used for model discovery.
            This is only called if <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/> is not an empty string.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.FindCategoryForNode(`0)">
            <summary>
            Find the category of a node data.
            </summary>
            <param name="nodedata"></param>
            <returns>by default an empty string</returns>
            <remarks>
            <para>
            This is called on each node data that is added to the model, to decide which template to use.
            </para>
            <para>
            This is used for model discovery.
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeCategoryPath"/>
            property path is not flexible enough or fast enough to determine the value.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ClearUnresolvedReferences">
            <summary>
            Forget all unresolved delayed or forward references.
            </summary>
            <remarks>
            <para>
            The model may learn about node data in any order, so references to
            nodes may be unresolvable until later, perhaps never.
            Call this method to clear the internal table that keeps track
            of <typeparamref name="NodeKey"/>s that are not yet defined.
            </para>
            <para>
            This is called when setting a number of property path properties,
            because a model property path change can completely alter the references
            each node data might be making.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ResolveAllReferences">
            <summary>
            Cause <see cref="M:Northwoods.GoXam.Model.TreeModel`2.ResolveNodeKey(`1)"/> to be called on each
            known delayed or forward node reference.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ResolveNodeKey(`1)">
            <summary>
            This is called repeatedly by <see cref="M:Northwoods.GoXam.Model.TreeModel`2.ResolveAllReferences"/>,
            once for each known delayed or forward node reference.
            </summary>
            <param name="nodekey"></param>
            <remarks>
            Depending on the situation, you may want to create and
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.InsertNode(`0)"/> in order to resolve a reference.
            Or you may want to ignore it, and later call
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.ClearUnresolvedReferences"/> to make sure no
            future node data addition might resolve the reference.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.HandleNodePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> event handler for node data.
            </summary>
            <param name="sender"></param>
            <param name="e">preferably a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that describes what changed and how</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <paramref name="e"/> argument is a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>,
            this first calls <see cref="M:Northwoods.GoXam.Model.DiagramModel.OnChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> in order to raise a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event
            to notify this model's consumers.
            </para>
            <para>
            If the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> is the same as the
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyPath"/>, <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/>, or <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/>,
            this automatically calls
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeKeyChanged(`0)"/>, <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DoParentNodeChanged(`0)"/>, or <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DoChildNodeKeysChanged(`0)"/>,
            respectively.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeAdded(`0)">
            <summary>
            This should be called when a node data object is added to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> has been augmented.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeRemoved(`0)">
            <summary>
            This should be called when a node data object is removed from the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> has been diminished.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedNode"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeKeyChanged(`0)">
            <summary>
            This should be called when a node data's key value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeCategoryChanged(`0)">
            <summary>
            This should be called when a node data's category value may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeCategoryPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindCategoryForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodeCategory"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoParentNodeChanged(`0)">
            <summary>
            This should be called when a node data's tree parent may have changed.
            </summary>
            <param name="nodedata">the modified node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindParentNodeKeyForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedParentNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoChildNodeKeyAdded(`0,`1)">
            <summary>
            This should be called when a child node data has been added to the collection of child nodes.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="childkey">the key for the added child node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of child keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.AddedChildNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoChildNodeKeyRemoved(`0,`1)">
            <summary>
            This should be called when a child node data has been removed from the collection of child nodes.
            </summary>
            <param name="nodedata">the modified node data</param>
            <param name="childkey">the key for the removed child node data</param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If the list of child keys implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.RemovedChildNodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DoChildNodeKeysChanged(`0)">
            <summary>
            This should be called when a node data's list of children nodes may have changed.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            <para>
            This is used for model update, when the model data has changed and the model itself
            needs to be updated to reflect those changes.
            </para>
            <para>
            If a node data object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and if the key is a simple property on the data as reflected by the
            value of <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/>,
            the model will automatically call this method.
            Otherwise, you need to do so immediately after the value of
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/> has changed.
            </para>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedChildNodeKeys"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetNodeType">
            <summary>
            Return the <typeparamref name="NodeType"/>.
            </summary>
            <returns>a <see cref="T:System.Type"/>, not a node data object, nor a string</returns>
            <remarks>
            This is useful for data transfer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.IsNodeType(System.Object)">
            <summary>
            This predicate is true when the argument is an instance of <typeparamref name="NodeType"/>.
            </summary>
            <param name="nodedata">the arbitrary object to be checked for compatibility to be a node data</param>
            <returns>
            true if the <paramref name="nodedata"/> can be cast to the <typeparamref name="NodeType"/>;
            false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.IsNodeData(`0)">
            <summary>
            This predicate is true if the argument is a node data in this model.
            </summary>
            <param name="nodedata">the <typeparamref name="NodeType"/> object to be checked to see if it is a known node data in this model</param>
            <returns>
            true if the <paramref name="nodedata"/> is in the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            This uses a hash table lookup.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.FindNodeByKey(`1)">
            <summary>
            Given a key, find the node data with that key.
            </summary>
            <param name="key">
            a value of null for this argument will result in the default value for <typeparamref name="NodeType"/>
            </param>
            <returns>
            a <typeparamref name="NodeType"/>;
            the value will be the default for the type if no such node data is known to be in this model
            </returns>
            <remarks>
            <para>
            This is used for model navigation.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyIsNodeData"/> is true,
            this just converts the <paramref name="key"/> argument
            to the <typeparamref name="NodeType"/> type and returns it.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.IsLinked(`0,`0)">
            <summary>
            This predicate is true if there is a link from one node data to another one.
            </summary>
            <param name="fromnodedata"></param>
            <param name="tonodedata"></param>
            <returns></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetConnectedNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected to a given node, in either direction.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetFromNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links going into a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetToNodesForNode(`0)">
            <summary>
            Return a sequence of node data that are directly connected by links coming out from a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetParentForNode(`0)">
            <summary>
            Return a parent node data for a given node data, if there is one.
            </summary>
            <param name="nodedata"></param>
            <returns>a <typeparamref name="NodeType"/></returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetChildrenForNode(`0)">
            <summary>
            Return a sequence of node data that are immediate children of a given node.
            </summary>
            <param name="nodedata"></param>
            <returns>an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of child node data; an empty sequence if there are none</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            It is the same as <see cref="M:Northwoods.GoXam.Model.TreeModel`2.GetToNodesForNode(`0)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.GetCategoryForNode(`0)">
            <summary>
            This method gets the category of a node.
            </summary>
            <param name="nodedata"></param>
            <returns>a String, defaulting to the empty string</returns>
            <remarks>
            <para>
            This is used for model navigation and graph traversal.
            </para>
            <para>
            This model assumes that the value will never change.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyNode1(`0,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)">
            <summary>
            This is the first pass of copying node data, responsible for constructing
            a copy and copying most of its properties.
            </summary>
            <param name="nodedata"></param>
            <param name="env"></param>
            <returns></returns>
            <remarks>
            <para>
            By default this handles <c>ICloneable</c> or serializable objects.
            But you may want to override this method to customize which properties
            get copied or how they are copied or to provide a faster implementation.
            </para>
            <para>
            This does NOT ensure that the copied node data has a unique key.
            You must do that before adding it to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection,
            either by overriding the data's Clone method,
            by declaring the data Serializable (WPF), or
            by overriding this method.
            Or you can override the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.MakeNodeKeyUnique(`0)"/> method that is called when
            data is added to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection of the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyNode2(`0,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This is the second pass of copying node data, responsible for fixing up
            references to other objects.
            </summary>
            <param name="oldnodedata">the original node data</param>
            <param name="env">the dictionary mapping original objects to copied objects</param>
            <param name="newnodedata">the copied node data</param>
            <param name="newtreeparent">for convenience, the copied "parent" node data</param>
            <param name="newtreechildren">for convenience, a list of newly copied "children" node data</param>
            <remarks>
            <para>
            You will want to override this method if the node data should have any references
            to copied data.
            Otherwise the copied node will appear to have links to the original nodes,
            not to the copied nodes.
            </para>
            <para>
            Your overridden method may want to do something like what this method does by default:
            <code>
              if (this.ParentNodePath != "" &amp;&amp; newtreeparent != null) {
                ModifyParentNodeKey(newnodedata, FindKeyForNode(newtreeparent));
              }
              if (this.ChildNodesPath != "" &amp;&amp; newtreechildren != null) {
                // remove any old keys; not needed if the copied property value is empty
                foreach (NodeKey k in FindChildNodeKeysForNode(newnodedata).OfType&lt;NodeKey&gt;().ToList()) {
                  DeleteChildNodeKey(newnodedata, k);
                }
                // add new keys (which should be different from the old keys)
                foreach (NodeType newto in newtreechildren) {
                  NodeKey newtokey = FindKeyForNode(newto);
                  InsertChildNodeKey(newnodedata, newtokey);
                }
              }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CreateDataCollection">
            <summary>
            Create an empty <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CreateCopyDictionary">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> initialized for this model.
            </summary>
            <returns>Normally this will be an empty dictionary.</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AddNodeCopy(`0)">
            <summary>
            Add a copy of a node data to this model.
            </summary>
            <param name="nodedata"></param>
            <returns>the copied node data</returns>
            <remarks>
            <para>
            This is a convenience method that just calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddCollectionCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AddCollectionCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)">
            <summary>
            Copy existing node data and add to this model.
            </summary>
            <param name="coll">the collection of data to be copied</param>
            <param name="env">
            the <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> used to keep track of copied objects;
            if null, the method will call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CreateCopyDictionary"/>, use it, and return it
            </param>
            <returns>the updated copy dictionary, mapping original data to copied data</returns>
            <remarks>
            <para>
            The primary purpose of this method is to perform a two-pass copy of a part of a diagram,
            and add the resulting data to this model.
            </para>
            <para>
            Of course you can add data without copying them by calling <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddNode(`0)"/>
            or by just adding them directly to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>.
            </para>
            <para>
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AugmentCopyCollection(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection)"/> on the source model to allow it to extend the
            collection to include parts that it thinks should be in the collection.
            </para>
            <para>
            Then it calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AugmentCopyDictionary(Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/> on this, the destination model, to allow it
            to prepopulate the <see cref="T:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary"/> if it wants to guide the copying process to
            control the sharing of references in the copied parts.
            </para>
            <para>
            The first pass copies all of the nodes that are not already in the <paramref name="env"/>
            copy dictionary, by calling <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CopyNode1(`0,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/>.  If the call returns a node data,
            it is added to this model by calling <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddNode(`0)"/> and remembered in the
            <paramref name="env"/> copy dictionary, mapped to the original node data.
            </para>
            <para>
            The second pass fixes up references in all of the copied nodes by calling <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CopyNode2(`0,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary,`0,`0,System.Collections.Generic.IEnumerable{`0})"/>.
            It passes as arguments both the original node data and the copied node data, as well as the
            newly copied tree-parent node, if any.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AugmentCopyCollection(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection)">
            <summary>
            Override this method to add more (related) data to be copied.
            </summary>
            <param name="coll">the collection of data to be copied</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AugmentCopyDictionary(Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)">
            <summary>
            Override this method to avoid copying some data, or to change how copied references are resolved.
            </summary>
            <param name="env">the dictionary mapping original objects to copied objects</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.InsertNode(`0)">
            <summary>
            This method actually implements the addition of a node data to the
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AddNode(`0)">
            <summary>
            Add a node data to <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.InsertNode(`0)"/> to actually perform the addition.
            This is a no-op if the node data is already in the model.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.InsertLink(`0,`0)">
            <summary>
            This method actually implements the addition of a link between two nodes.
            </summary>
            <param name="parentdata"></param>
            <param name="childdata"></param>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.SetParentNodeKey(`0,`1)"/>.
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddChildNodeKey(`0,`1)"/>.
            This method can be overridden in case the creation of a link
            is more complex than the default implementation.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AddLink(`0,`0)">
            <summary>
            Create a link between two nodes.
            </summary>
            <param name="parentdata"></param>
            <param name="childdata"></param>
            <remarks>
            This is a no-op if the two nodes are already linked, according to <see cref="M:Northwoods.GoXam.Model.TreeModel`2.IsLinked(`0,`0)"/>.
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.InsertLink(`0,`0)"/> to actually create the link.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DeleteNode(`0)">
            <summary>
            This method actually implements the removal of a node data from the
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.RemoveNode(`0)">
            <summary>
            Remove a node data from <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>.
            </summary>
            <param name="nodedata"></param>
            <remarks>
            This also removes any links connected to this node.
            This just calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DeleteNode(`0)"/> to actually perform the removal.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DeleteLink(`0,`0)">
            <summary>
            This method actually implements the removal of a link between two nodes.
            </summary>
            <param name="parentdata"></param>
            <param name="childdata"></param>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.SetParentNodeKey(`0,`1)"/>.
            If <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/> is not an empty string,
            this calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.RemoveChildNodeKey(`0,`1)"/>.
            This method can be overridden in case the deletion of a link
            is more complex than the default implementation.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.RemoveLink(`0,`0)">
            <summary>
            Remove any link between two nodes.
            </summary>
            <param name="parentdata"></param>
            <param name="childdata"></param>
            <remarks>
            This is a no-op if there is no existing link between the nodes, according to <see cref="M:Northwoods.GoXam.Model.TreeModel`2.IsLinked(`0,`0)"/>.
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DeleteLink(`0,`0)"/> to actually delete the link.
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ModifyParentNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that its reference to a parent node data (if any) is the given <paramref name="parentkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="parentkey">the key value of the "parent" node data</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.SetParentNodeKey(`0,`1)">
            <summary>
            Change a node data so that it refers to a different parent node data, by node key.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="parentkey">the key value of the "parent" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.ModifyParentNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.InsertChildNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of children node data includes a given <paramref name="childkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified; if null, this method does nothing</param>
            <param name="childkey">the key value of the "child" node data; if null, this method does nothing</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.AddChildNodeKey(`0,`1)">
            <summary>
            Add a "child" node data's key value to a node data's list of "children".
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkey">the key value of the "child" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.InsertChildNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DeleteChildNodeKey(`0,`1)">
            <summary>
            This method actually implements the modification of a node data
            so that it's collection of children node data does not include a given <paramref name="childkey"/>.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkey">the key value of the "child" node data</param>
            <remarks>
            This method can be overridden in case the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/>
            sequence is not an <see cref="T:System.Collections.IList"/> or an <see cref="T:System.Collections.Generic.IList`1"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.RemoveChildNodeKey(`0,`1)">
            <summary>
            Remove a child node data's key value from a node data's list of "children" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkey">the key value of the "child" node data</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DeleteChildNodeKey(`0,`1)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ModifyChildNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            This method actually implements the replacement of a node data's
            collection of child node keys.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkeys">a sequence of "child" node data key values</param>
            <remarks>
            This method can be overridden in case the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath"/>
            property path is not flexible enough or fast enough to get the key for a node.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.SetChildNodeKeys(`0,System.Collections.IEnumerable)">
            <summary>
            Replace a node data's list of "children" key values.
            </summary>
            <param name="nodedata">the node data to be modified</param>
            <param name="childkeys">a sequence of "child" node data key values</param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.ModifyChildNodeKeys(`0,System.Collections.IEnumerable)"/>
            This is an error if <see cref="P:Northwoods.GoXam.Model.DiagramModel.Modifiable"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.IsLinkValid(`0,`0)">
            <summary>
            This predicate is true if adding a link between two nodes would result in a valid graph.
            </summary>
            <param name="fromdata">a node key identifying the node data from which the link comes</param>
            <param name="todata">a node key identify the node data to which the link goes</param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CheckLinkValid(`0,`0,System.Boolean,`0,`0)"/> to do the actual graph structure check.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.IsRelinkValid(`0,`0,`0,`0)">
            <summary>
            This predicate is true if replacing a link between two nodes would result in a valid graph.
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the link would come</param>
            <param name="newtodata">a node key identify the node data to which the link would go</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CheckLinkValid(`0,`0,System.Boolean,`0,`0)"/> to do the actual graph structure check.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CheckLinkValid(`0,`0,System.Boolean,`0,`0)">
            <summary>
            This predicate is true if adding a link between two nodes/ports would result in a valid tree-structured graph.
            </summary>
            <param name="newfromdata">a node key identifying the node data from which the link would come</param>
            <param name="newtodata">a node key identify the node data to which the link would go</param>
            <param name="ignoreexistinglink">true if relinking; false if adding a new link</param>
            <param name="oldfromdata">a node key identifying the node data from which the existing link comes</param>
            <param name="oldtodata">a node key identify the node data to which the existing link goes</param>
            <returns>
            This returns false for links that would break the tree structure of the model's graph,
            due to either cycles or multiple "parent"s.
            This also returns false for duplicate links, even if they would otherwise be valid.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ChangeModelValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to this model.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.ChangeDataValue(Northwoods.GoXam.Model.ModelChangedEventArgs,System.Boolean)">
            <summary>
            This is called during undo or redo to effect state changes to model data.
            </summary>
            <param name="e">an edit describing the change to be performed</param>
            <param name="undo">true if undoing; false if redoing</param>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.Save``1(System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Generate a Linq for XML <c>XElement</c> holding all of the node data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.TreeModelNodeData`1"/></typeparam>
            <param name="rootname">the name of the returned <c>XElement</c></param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <returns>an <c>XElement</c></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.Load``1(System.Xml.Linq.XContainer,System.Xml.Linq.XName)">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection with a collection of new node data.
            </summary>
            <typeparam name="NodeDataType">this must be a <see cref="T:Northwoods.GoXam.Model.TreeModelNodeData`1"/> with a public zero-argument constructor</typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodename">the name of each <c>XElement</c> holding node data</param>
            <remarks>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.Load``1(System.Xml.Linq.XContainer,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Given a Linq for XML <c>XContainer</c> holding node data, replace this model's
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection with a collection of new node data.
            </summary>
            <typeparam name="NodeDataType">this must be a class inheriting from <see cref="T:Northwoods.GoXam.Model.TreeModelNodeData`1"/></typeparam>
            <param name="root">the <c>XContainer</c> holding all of the data</param>
            <param name="nodedataallocator">
            a function that takes an <c>XElement</c> and returns either a newly constructed object of type <typeparamref name="NodeDataType"/>
            or null if that <c>XElement</c> is to be ignored
            </param>
            <remarks>
            <para>
            This will iterate over all of the child elements of the <paramref name="root"/> container,
            calling <paramref name="nodedataallocator"/> on each one.
            If that function returns non-null, it calls <see cref="M:Northwoods.GoXam.Model.TreeModelNodeData`1.LoadFromXElement(System.Xml.Linq.XElement)"/> on the new data
            and then adds it to the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </para>
            <para>
            All of the changes to this model are performed within a transaction.
            </para>
            <para>
            This does not set the <see cref="P:Northwoods.GoXam.Model.DiagramModel.IsModified"/> property to false.
            You may wish to do so, depending on your application requirements.
            You might also wish to clear the <see cref="T:Northwoods.GoXam.Model.UndoManager"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource">
            <summary>
            Gets or sets the collection of node data items for the model.
            </summary>
            <value>
            Initially this value is an empty <c>ObservableCollection</c>.
            It cannot be set to a null value.
            For generality, this is of type <see cref="T:System.Collections.IEnumerable"/>.
            </value>
            <remarks>
            <para>
            This raises a <see cref="E:Northwoods.GoXam.Model.DiagramModel.Changed"/> event with a value of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.ChangedNodesSource"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyPath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for node data.
            </summary>
            <value>
            This defaults to an empty string, meaning to use the data as the key value.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyIsNodeData">
            <summary>
            Gets or sets whether all node data are also their own keys.
            </summary>
            <value>
            The default value is false.
            For this to be set to true, the <typeparamref name="NodeType"/> type
            and the <typeparamref name="NodeKey"/> types must be the same.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  It is an optimization that
            avoids the use of an additional hash table mapping
            <typeparamref name="NodeKey"/> values to their <typeparamref name="NodeType"/> data,
            and permits other optimizations as well.
            This can often be set to true when "references" to nodes
            are actually using .NET CLR references (i.e. "pointers") instead
            of values such as integer, strings, GUIDs et al.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyReferenceAutoInserts">
            <summary>
            Gets or sets whether a <typeparamref name="NodeKey"/> reference,
            when <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyIsNodeData"/> is true,
            automatically inserts the node into <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property only has an effect when <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodeKeyIsNodeData"/> is true.
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.DoNodeAdded(`0)"/> calls <see cref="M:Northwoods.GoXam.Model.TreeModel`2.InsertNode(`0)"/> if the referred-to
            node is not already known to be in the <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/> collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.ParentNodePath">
            <summary>
            Gets or sets a property path that that specifies how to get the key for "parent" node data of a node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindParentNodeKeyForNode(`0)"/>.
            Otherwise that method is called to try to find the parent node for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindParentNodeKeyForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindParentNodeKeyForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.ChildNodesPath">
            <summary>
            Gets or sets a property path that that specifies how to get a list of keys for the "children" nodes of a node data object.
            </summary>
            <value>
            This defaults to an empty string, meaning not to call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/>.
            Otherwise that method is called to try to find the list of children for each node.
            A null value may be used to indicate that there is no property path but that
            <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/> should still be called because it has been overridden.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindChildNodeKeysForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be of type <see cref="T:System.Collections.IEnumerable"/>,
            holding only instances of <typeparamref name="NodeKey"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.NodeCategoryPath">
            <summary>
            Gets or sets a property path that that specifies how to find the category of a node data.
            </summary>
            <value>
            This defaults to an empty string, which causes <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindCategoryForNode(`0)"/> to return an empty string.
            The value must not be null.
            </value>
            <remarks>
            <para>
            This is used for model discovery.  This is a declarative way to
            define the behavior of <see cref="M:Northwoods.GoXam.Model.TreeModel`2.FindCategoryForNode(`0)"/> for most cases.
            </para>
            <para>
            The value of this property path applied to a node data object must be a string.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Model.TreeModel`2.DataCollection">
            <summary>
            This nested class is a serializable collection of node data.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> is used in various circumstances where
            there is a collection of node data, particularly for copying.
            If the node data is serializable, this collection can be serialized,
            which is useful when copying to the clipboard or pasting from it.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType and NodeKey type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CreateDataCollection"/> to allocate an instance.
            </para>
            <para>
            This collection class does not support separate link data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DataCollection.#ctor">
            <summary>
            The default constructor produces an empty collection.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CreateDataCollection"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DataCollection.ContainsNode(`0)">
            <summary>
            This predicate is true if the given node data is in the collection of <see cref="P:Northwoods.GoXam.Model.TreeModel`2.DataCollection.Nodes"/>.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DataCollection.AddNode(`0)">
            <summary>
            Add a node data to this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data is already in the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.DataCollection.RemoveNode(`0)">
            <summary>
            Remove a node data from this collection.
            </summary>
            <param name="nodedata">the data type is the model's NodeType type parameter</param>
            <remarks>
            This is a no-op if the node data was not in the collection.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.DataCollection.Model">
            <summary>
            Gets or sets the model that owns all of the nodes in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.DataCollection.Nodes">
            <summary>
            Gets or sets the collection of node data, each of type <typeparamref name="NodeType"/>.
            </summary>
            <value>
            Setting this property will enumerate all of the node data
            that the argument value collection contains.
            If the new value is null, this collection is cleared.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary">
            <summary>
            This nested class is used during copying to hold a mapping of original nodes
            to newly copied nodes.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Northwoods.GoXam.Model.ICopyDictionary"/> is used during the two-pass copying process
            to keep track of which newly copied node data correspond to which original node data.
            </para>
            <para>
            Although this nested type is not a generic class, it is parameterized
            by the NodeType and NodeKey type parameters of the containing generic model class.
            You should call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CreateCopyDictionary"/> to allocate an instance.
            </para>
            <para>
            This collection class does not support separate link data.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.#ctor">
            <summary>
            The default constructor builds an empty dictionary.
            </summary>
            <remarks>
            Don't use this constructor -- call <see cref="M:Northwoods.GoXam.Model.TreeModel`2.CreateCopyDictionary"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.ContainsSourceNode(`0)">
            <summary>
            This predicate is true if the given node data is in the source collection.
            </summary>
            <param name="oldnode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.FindCopiedNode(`0)">
            <summary>
            Look up the copied node for a given source node.
            </summary>
            <param name="oldnode">a source node data</param>
            <returns>the copied node data</returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.AddCopiedNode(`0,`0)">
            <summary>
            Declare the mapping of a source node data to a copied node data.
            </summary>
            <param name="oldnode">a node data in the source collection</param>
            <param name="newnode">
            a copied node data,
            or null to indicate that there is no copied node data for a given source node data
            </param>
            <remarks>
            This will add a node data to the copies collection, associated with the source node data.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.RemoveSourceNode(`0)">
            <summary>
            Remove any association between a source node data and any copied node data.
            </summary>
            <param name="srcnodedata">a node data in the source collection</param>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.SourceModel">
            <summary>
            Gets or sets the source model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddCollectionCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.DestinationModel">
            <summary>
            Gets or sets the destination model for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddCollectionCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.SourceCollection">
            <summary>
            Gets or sets the source collection of data to be copied for the copying operation.
            </summary>
            <remarks>
            This will be set by the <see cref="M:Northwoods.GoXam.Model.TreeModel`2.AddCollectionCopy(Northwoods.GoXam.Model.TreeModel{`0,`1}.DataCollection,Northwoods.GoXam.Model.TreeModel{`0,`1}.CopyDictionary)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.TreeModel`2.CopyDictionary.Copies">
            <summary>
            Gets the collection of copied nodes as a <see cref="T:Northwoods.GoXam.Model.TreeModel`2.DataCollection"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.UniversalTreeModel">
            <summary>
            This is a universal model, handling all kinds of datatypes representing nodes.
            </summary>
            <remarks>
            <para>
            There are no container nodes, nor are there link labels.
            Since it uses Object as the type for node data, this model class supports multiple instances
            of different (unrelated) types.
            </para>
            <para>
            For reasons of both compile-time type checking and run-time efficiency,
            we recommend defining your own model class derived from <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>.
            </para>
            <para>
            This defines nested classes: DataCollection and CopyDictionary.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UniversalTreeModel.#ctor">
            <summary>
            Create a modifiable <see cref="T:Northwoods.GoXam.Model.TreeModel`2"/>
            with an empty <c>ObservableCollection</c> for the
            <see cref="P:Northwoods.GoXam.Model.TreeModel`2.NodesSource"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Model.UndoManager">
            <summary>
            The UndoManager class observes and records model changes and supports
            undo and redo operations.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.Model.UndoManager"/> that is ready to record model
            modifications, but that does not know about any models yet.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.ToString">
            <summary>
            For debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>s and reset all other state.
            </summary>
            <remarks>
            However, this does not forget the models that this undo manager is managing.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.AddModel(Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Make sure this undo manager knows about a <see cref="T:Northwoods.GoXam.Model.IDiagramModel"/> for which
            it is receiving model Changed event notifications.
            </summary>
            <param name="model"></param>
            <remarks>
            This just adds <paramref name="model"/> to the list of <see cref="P:Northwoods.GoXam.Model.UndoManager.Models"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.RemoveModel(Northwoods.GoXam.Model.IDiagramModel)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.RemoveModel(Northwoods.GoXam.Model.IDiagramModel)">
            <summary>
            Call this method to inform this undo manager that it no longer will be
            notified of model Changed events.
            </summary>
            <param name="model"></param>
            <remarks>
            This just removes <paramref name="model"/> from the list of <see cref="P:Northwoods.GoXam.Model.UndoManager.Models"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.AddModel(Northwoods.GoXam.Model.IDiagramModel)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CanUndo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform an undo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToUndo"/> that itself
            is ready to be undone, because its <see cref="M:Northwoods.GoXam.Model.IUndoableEdit.CanUndo"/>
            predicate is true.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.Undo">
            <summary>
            Restore the state of some models to before the current <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.IUndoableEdit.Undo"/> on the current <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToUndo"/>.
            This will raise a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event with a hint of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.StartingUndo"/> before actually performing the undo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.FinishedUndo"/> afterwards.
            The <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/>
            is the <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToUndo"/> before calling Undo.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.CanUndo"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CanRedo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform a redo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToRedo"/> that itself
            is ready to be redone, because its <see cref="M:Northwoods.GoXam.Model.IUndoableEdit.CanRedo"/>
            predicate is true.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.Redo">
            <summary>
            Restore the state of some models to after the current <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.IUndoableEdit.Redo"/> on the current <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToRedo"/>.
            This will raise a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event with a hint of
            <see cref="F:Northwoods.GoXam.Model.ModelChange.StartingRedo"/> before actually performing the redo, and will raise a
            Changed event with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.FinishedRedo"/> afterwards.
            The <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.Data"/>
            is the <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/> that was the value of
            <see cref="P:Northwoods.GoXam.Model.UndoManager.EditToRedo"/> before calling Redo.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.CanRedo"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.HandleModelChanged(System.Object,Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            Create an <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> for a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Model.UndoManager.SkipEvent(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> if for some reason we should ignore
            the <paramref name="e"/>.
            This then creates a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> and adds it to the
            <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/>, a <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/> which it allocates
            if needed.
            This method always ignores all Changed events while we are performing an
            <see cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/> or <see cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.SkipEvent(Northwoods.GoXam.Model.ModelChangedEventArgs)">
            <summary>
            This predicate is responsible for deciding if a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>
            is not interesting enough to be recorded.
            </summary>
            <param name="evt"></param>
            <returns>normally false, which causes the given event to be remembered;
            but true for negative valued enumerations of <see cref="T:Northwoods.GoXam.Model.ModelChange"/>.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.StartTransaction(System.String)">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>.
            </summary>
            <returns>true if starting a top-level transaction</returns>
            <remarks>
            Transactions can be nested:
            <list type="numbered">
            <item><c>StartTransaction</c> returns true</item>
            <item><c>StartTransaction</c> returns false</item>
            <item><c>CommitTransaction</c> returns false</item>
            <item><c>CommitTransaction</c> returns true</item>
            </list>
            Nested transactions will share the same compound edit as the top-level one.
            This will raise a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event for each of the <see cref="P:Northwoods.GoXam.Model.UndoManager.Models"/>,
            with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.StartedTransaction"/>.
            </remarks>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.RollbackTransaction">
            <summary>
            Just call <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/>, rolling back the current transaction.
            </summary>
            <returns>the value of the call to <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CommitTransaction(System.String)">
            <summary>
            Just call <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/>, committing the current transaction,
            with the presentation name for the transaction.
            </summary>
            <param name="tname">
            the transaction name
            </param>
            <returns>the value of the call to <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)">
            <summary>
            Stop the current transaction, either rolling it back or committing it.
            </summary>
            <param name="commit">true to terminate the transaction normally;
            false to abort it and rollback the existing edits</param>
            <param name="tname">the internal locale-neutral name for the transaction</param>
            <returns>true for a committed top-level transaction</returns>
            <remarks>
            <para>
            If this call stops a top-level transaction, a value of false for
            <paramref name="commit"/> just undoes and discards the information in the
            <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/>.
            If <paramref name="commit"/> is true for a top-level transaction,
            we mark the <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/> complete,
            call <see cref="M:Northwoods.GoXam.Model.UndoManager.CommitCompoundEdit(Northwoods.GoXam.Model.UndoManager.CompoundEdit)"/>,
            and add the resulting <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>
            to the list of compound edits that this undo manager is recording.
            </para>
            <para>
            Committing a transaction when there have been some undos without
            corresponding redos will throw away the compound edits holding
            changes that happened after the current state, before adding this
            new compound edit to the undo manager's list of edits.
            </para>
            <para>
            This method raises a <see cref="E:Northwoods.GoXam.Model.IDiagramModel.Changed"/> event
            for each of this undo manager's <see cref="P:Northwoods.GoXam.Model.UndoManager.Models"/>,
            with a hint of <see cref="F:Northwoods.GoXam.Model.ModelChange.CommittedTransaction"/>,
            and with a <see cref="P:Northwoods.GoXam.Model.ModelChangedEventArgs.OldValue"/>
            that is the <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>
            that has been added to the list of <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/>.
            Similarly, if the transaction is aborted, either because <paramref name="commit"/>
            is false or because there is no <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/> to commit,
            all of the <see cref="P:Northwoods.GoXam.Model.UndoManager.Models"/> get a <see cref="F:Northwoods.GoXam.Model.ModelChange.RolledBackTransaction"/>
            Changed event.  The values passed in the <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>
            may all be null, however.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CommitCompoundEdit(Northwoods.GoXam.Model.UndoManager.CompoundEdit)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/> when committing a
            compound edit. 
            </summary>
            <param name="cedit">
            the <see cref="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit"/>;
            this may be null if there had been no changes at commit time
            </param>
            <returns>By default, the unmodified <paramref name="cedit"/>.</returns>
            <remarks>
            You may wish to override this method in order to perform optimizations,
            such as removing duplicate or unnecessary <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>s.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.FindPrimaryObject(Northwoods.GoXam.Model.IUndoableEdit)">
            <summary>
            Given an <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> return an edited object
            that represents what was modified.
            </summary>
            <param name="edit">
            an <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>,
            usually either a <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> or a <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>
            </param>
            <returns>
            typically a <see cref="T:Northwoods.GoXam.Node"/> or a <see cref="T:Northwoods.GoXam.Link"/>,
            but this may be null if there is no such object,
            perhaps because a model property was modified,
            or because there were no real edits in the argument <paramref name="edit"/>.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.Models">
            <summary>
            Gets a list of models for which this UndoManager is recording undo/redo
            information.
            </summary>
            <remarks>
            You can manipulate this list explicitly by calling
            <see cref="M:Northwoods.GoXam.Model.UndoManager.AddModel(Northwoods.GoXam.Model.IDiagramModel)"/> and <see cref="M:Northwoods.GoXam.Model.UndoManager.RemoveModel(Northwoods.GoXam.Model.IDiagramModel)"/>.
            Setting <see cref="P:Northwoods.GoXam.Model.IDiagramModel.UndoManager"/> automatically calls these methods.
            <see cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/> and <see cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/> use this list to call
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RaiseChanged(Northwoods.GoXam.Model.ModelChangedEventArgs)"/> with notices about starting and
            ending undo and redo actions, and about starting/finishing/rollingback edits.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.EditToUndo">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> to be undone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.CanUndo"/>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/>
            <seealso cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/>
            <seealso cref="P:Northwoods.GoXam.Model.UndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.IsUndoingRedoing">
            <summary>
            This property is true during a call to <see cref="M:Northwoods.GoXam.Model.UndoManager.Undo"/> or <see cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>.
            </summary>
            <remarks>
            When this property is true, <see cref="M:Northwoods.GoXam.Model.UndoManager.CanUndo"/> and
            <see cref="M:Northwoods.GoXam.Model.UndoManager.CanRedo"/> will be false.
            To avoid confusion, <see cref="M:Northwoods.GoXam.Model.UndoManager.HandleModelChanged(System.Object,Northwoods.GoXam.Model.ModelChangedEventArgs)"/> ignores all model change events
            when this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.EditToRedo">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> to be redone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.CanRedo"/>
            <seealso cref="M:Northwoods.GoXam.Model.UndoManager.Redo"/>
            <seealso cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/>
            <seealso cref="P:Northwoods.GoXam.Model.UndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits">
            <summary>
            Gets a list of all of the compound edits.
            </summary>
            <value>This will be a <c>List</c> of mostly <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>s</value>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.MaximumEditCount">
            <summary>
            Gets or sets the maximum number of compound edits that this undo manager will remember.
            </summary>
            <value>
            If the value is negative, no limit is assumed.
            A new value of zero is treated as if the new value were one.
            The initial value is 999.
            </value>
            <remarks>
            <para>
            This property is useful in helping limit the memory consumption of typical application usage.
            But note that this only limits the number of compound edits, not the size of any individual
            <see cref="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit"/>, which may still have an unlimited number of
            <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>s.
            </para>
            <para>
            Decreasing this value will not necessarily remove any existing edits
            if there currently exist more edits in <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/> than the new value would allow.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.UndoEditIndex">
            <summary>
            Gets the index into <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/> for the current undoable edit.
            </summary>
            <value>
            -1 if there's no undoable edit to be undone.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CurrentEdit">
            <summary>
            Gets the current compound edit for recording additional model change events.
            </summary>
            <remarks>
            This is initialized and augmented by <see cref="M:Northwoods.GoXam.Model.UndoManager.HandleModelChanged(System.Object,Northwoods.GoXam.Model.ModelChangedEventArgs)"/>
            before it is added to <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdits"/> by a top-level call to <see cref="M:Northwoods.GoXam.Model.UndoManager.CommitTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.TransactionLevel">
            <summary>
            Gets the current transaction level.
            </summary>
            <value>
            This value is zero when no transaction is in progress.
            The initial value is zero.
            <see cref="M:Northwoods.GoXam.Model.UndoManager.StartTransaction(System.String)"/> will increment this value;
            <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/> will decrement it.
            When this value is greater than zero, <see cref="M:Northwoods.GoXam.Model.UndoManager.CanUndo"/>
            and <see cref="M:Northwoods.GoXam.Model.UndoManager.CanRedo"/> will be false, because
            additional logically related model change events may occur.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.ChecksTransactionLevel">
            <summary>
             Gets or sets whether this undo manager will output warnings to Trace listeners
             when model changes occur outside of a transaction.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.NestedTransactionNames">
            <summary>
            Gets a stack of ongoing transaction names.
            </summary>
            <remarks>
            The outermost transaction name will be the first item in the list.
            The last one will be the name of the most recent (nested) call to <see cref="M:Northwoods.GoXam.Model.UndoManager.StartTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CurrentTransactionName">
            <summary>
            Gets the current transaction name given by <see cref="M:Northwoods.GoXam.Model.UndoManager.StartTransaction(System.String)"/>.
            </summary>
            <value>
            If no transaction is ongoing, this will be an empty string.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Model.UndoManager.CompoundEdit">
            <summary>
            This class is used to hold a list of <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/> that
            should be undone or redone all together because it represents the side-effects
            of a single logical operation, including user-driven events.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.#ctor">
            <summary>
            Construct an empty list of edits.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.ToString">
            <summary>
            For debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>s and forget all references to them.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Undo"/>--
            namely when <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdit.IsComplete"/> is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Undo">
            <summary>
            Undo all of the <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>s, in reverse order.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Redo"/>--
            namely when <see cref="P:Northwoods.GoXam.Model.UndoManager.CompoundEdit.IsComplete"/> is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Redo">
            <summary>
            Redo all of the <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>s, in forwards order.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Edits">
            <summary>
            Gets a list of all the <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>s in this compound edit.
            </summary>
            <value>A <c>List&lt;T&gt;</c> of <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/>s</value>
            <remarks>
            Each item is normally an instance of <see cref="T:Northwoods.GoXam.Model.ModelChangedEventArgs"/>.
            However, you may add your own <see cref="T:Northwoods.GoXam.Model.IUndoableEdit"/> objects.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CompoundEdit.IsComplete">
            <summary>
            Gets or sets whether we can add more undoable edits to this compound edit.
            </summary>
            <value>
            This is initially false.  It can only be set to true,
            which is what <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/> does.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Model.UndoManager.CompoundEdit.Name">
            <summary>
            Gets or sets a name for this group of edits.
            </summary>
            <value>
            The default value is null.
            This is set by <see cref="M:Northwoods.GoXam.Model.UndoManager.EndTransaction(System.Boolean,System.String)"/> with the name passed to <see cref="M:Northwoods.GoXam.Model.UndoManager.CommitTransaction(System.String)"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.GroupPanel">
            <summary>
            An auto-resizing <see cref="T:Northwoods.GoXam.SpotPanel"/> that always surrounds its <see cref="T:Northwoods.GoXam.Group"/>'s
            <see cref="P:Northwoods.GoXam.Group.MemberNodes"/> plus some <see cref="P:Northwoods.GoXam.GroupPanel.Padding"/>.
            </summary>
            <remarks>
            <para>
            Note that the member nodes of a group are NOT children of this panel.
            Typically only decorative elements and ports are part of a <c>GroupPanel</c>.
            </para>
            <para>
            A node template representing a group, if it contains a <c>GroupPanel</c>,
            must name that <c>GroupPanel</c> as the node's <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>,
            resulting in <see cref="P:Northwoods.GoXam.Node.LocationElement"/> referring to that panel.
            </para>
            <para>
            For example, the following <c>DataTemplate</c> for <see cref="T:Northwoods.GoXam.Group"/>s
            results in a thick border around the group's member nodes with some text above the
            top-left corner of the border and a port on each side in the middle of the border.
            <code>
              &lt;DataTemplate x:Key="ExampleGroupTemplate"&gt;
                &lt;StackPanel go:Node.LocationElementName="GroupPanel"&gt;
                  &lt;TextBlock Text="{Binding Path=Data.Name}" /&gt;
                  &lt;Border BorderBrush="Gray" BorderThickness="6" CornerRadius="5" Margin="0"&gt;
                    &lt;go:GroupPanel x:Name="GroupPanel" Padding="10" &gt;
                      &lt;Path go:SpotPanel.Spot="0 0.5 -3 0" Data="M0 0 L6 3 L 0 6 Z" Fill="Blue"
                            Width="6" Height="6" go:Node.PortId="input" go:Node.LinkableTo="True" /&gt;
                      &lt;Path go:SpotPanel.Spot="1 0.5 3 0" Data="M0 0 L6 3 L 0 6 Z" Fill="Green"
                            Width="6" Height="6" go:Node.PortId="output" go:Node.LinkableFrom="True" /&gt;
                    &lt;/go:GroupPanel&gt;
                  &lt;/Border&gt;
                &lt;/StackPanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.GroupPanel.PaddingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.GroupPanel.Padding"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.GroupPanel.SurroundsMembersAfterDropProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.GroupPanel.SurroundsMembersAfterDrop"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.GroupPanel.ComputeMemberBounds">
            <summary>
            Compute the union of the Bounds of this <see cref="T:Northwoods.GoXam.Group"/>'s <see cref="P:Northwoods.GoXam.Group.MemberNodes"/>.
            </summary>
            <returns>a <c>Rect</c> in model coordinates</returns>
            <remarks>
            If there are no members, this returns a <c>Rect</c> with Width and Height of zero
            and an X and Y that are this panel's original position in model coordinates.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.GroupPanel.ComputeBorder">
            <summary>
            Normally this just returns the result of <see cref="M:Northwoods.GoXam.GroupPanel.ComputeMemberBounds"/> expanded by the <see cref="P:Northwoods.GoXam.GroupPanel.Padding"/>.
            </summary>
            <returns>
            However, if <see cref="P:Northwoods.GoXam.GroupPanel.SurroundsMembersAfterDrop"/> is true,
            and if the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/> is the <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/>,
            and if this <see cref="T:Northwoods.GoXam.Group"/> is not being dragged,
            this method returns the last value of <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/> before dragging began.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.GroupPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure any children.
            </summary>
            <param name="availableSize"></param>
            <returns>This returns the size computed by <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/></returns>
            <remarks>
            <para>
            <see cref="T:Northwoods.GoXam.GroupPanel"/> requires that the <see cref="T:Northwoods.GoXam.Group"/>'s <see cref="P:Northwoods.GoXam.Node.LocationElement"/>
            (i.e. the element in the group's visual tree named by <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>)
            is this panel itself, not some other element.
            </para>
            <para>
            The member nodes and links, as described by <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/>, act as the "main" child.
            Any child elements for which <see cref="M:Northwoods.GoXam.SpotPanel.GetMain(System.Windows.DependencyObject)"/> are true are measured and arranged
            to occupy the whole <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/> area.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.GroupPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange any children according to their <see cref="M:Northwoods.GoXam.SpotPanel.GetSpot(System.Windows.DependencyObject)"/> and <see cref="M:Northwoods.GoXam.SpotPanel.GetAlignment(System.Windows.DependencyObject)"/> values.
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
            <remarks>
            <para>
            The member nodes and links, as described by <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/>, act as the "main" child.
            Any child elements for which <see cref="M:Northwoods.GoXam.SpotPanel.GetMain(System.Windows.DependencyObject)"/> are true are measured and arranged
            to occupy the whole <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/> area.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.GroupPanel.Padding">
            <summary>
            Gets or sets the extra space inside the border but around the member nodes.
            </summary>
            <value>
            The default value is a uniform <c>Thickness</c> of 5.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.GroupPanel.SurroundsMembersAfterDrop">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.GoXam.GroupPanel.ComputeBorder"/> should keep the same bounds
            during a <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/> move.
            </summary>
            <value>
            The default value is false -- this <see cref="T:Northwoods.GoXam.GroupPanel"/> surrounds all of its members
            even while the dragging tool is moving any of its member nodes.
            </value>
            <remarks>
            In other words, when the value is true, re-computing the bounds of the
            members is suspended until a drop occurs, at which time the border is recomputed,
            perhaps not including some members that had been dragged out and reparented.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Group">
            <summary>
            A <c>Group</c> is a <see cref="T:Northwoods.GoXam.Node"/> that may logically contain
            other <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s.
            </summary>
            <remarks>
            <para>
            You can get a collection of member nodes using the <see cref="P:Northwoods.GoXam.Group.MemberNodes"/> property.
            You can get a collection of member links using the <see cref="P:Northwoods.GoXam.Group.MemberLinks"/> property.
            Changing group membership requires modifying the diagram's model.
            </para>
            <para>
            The member nodes and links are NOT visual children of this group.
            Instead they are direct visual children of a <see cref="T:Northwoods.GoXam.Layer"/>,
            just as this group is.
            </para>
            <para>
            If one expects that the rendering of a group should grow and shrink
            based on the sizes and positions of its member nodes, the
            <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>
            should make use of a <see cref="T:Northwoods.GoXam.GroupPanel"/>.
            The <see cref="P:Northwoods.GoXam.Group.GroupPanel"/> property finds this panel for you.
            If there is a <see cref="P:Northwoods.GoXam.Group.GroupPanel"/>, it must be named and referred to
            by the <see cref="P:Northwoods.GoXam.Node.LocationElementName"/>.
            </para>
            <para>
            This class also supports the notion of expanding/collapsing.
            There are two attached properties, <see cref="F:Northwoods.GoXam.Group.IsSubGraphExpandedProperty"/>
            and <see cref="F:Northwoods.GoXam.Group.WasSubGraphExpandedProperty"/>, that can be data-bound, as well as two methods,
            <see cref="M:Northwoods.GoXam.Group.CollapseSubGraph"/> and <see cref="M:Northwoods.GoXam.Group.ExpandSubGraph"/>.
            </para>
            <para>
            Each group can have its own <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> to govern
            how the member nodes and links are laid out, independently of the
            <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.
            </para>
            <para>
            You may not apply any transforms to a <c>Group</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Group.#ctor">
            <summary>
            Create an empty group with a default <see cref="P:Northwoods.GoXam.Group.Layout"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.Move(System.Windows.Point,System.Boolean)">
            <summary>
            Move not only this node but also all member nodes and links recursively.
            </summary>
            <param name="newpos">a new <see cref="P:Northwoods.GoXam.Node.Position"/> in model coordinates; not a new <see cref="P:Northwoods.GoXam.Node.Location"/></param>
            <param name="animated">whether the movement is animated by the diagram's <see cref="T:Northwoods.GoXam.LayoutManager"/></param>
            <remarks>
            This uses the diagram's <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/> by calling its <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MoveParts(System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info},System.Windows.Point)"/> method
            in order to respect grid snapping and to try to avoid rerouting links.
            Currently, member nodes and links are not moved with animation.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Group.OnApplyTemplate">
            <summary>
            Initialize <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/> with the possibly bound value of <see cref="M:Northwoods.GoXam.Group.GetIsSubGraphExpanded(System.Windows.DependencyObject)"/>
            on this group's root visual element, and initialize the <see cref="P:Northwoods.GoXam.Group.Layout"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Group.IsExpandedSubGraphProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.OnIsExpandedSubGraphChanged">
            <summary>
            This virtual method is called whenever the value of <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/> changes.
            </summary>
            <remarks>
            <para>
            By default this will call <see cref="M:Northwoods.GoXam.Group.ExpandSubGraph"/> if <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/>
            has become true, else it will call <see cref="M:Northwoods.GoXam.Group.CollapseSubGraph"/>.
            </para>
            <para>
            In Silverlight, if the <see cref="P:Northwoods.GoXam.Part.VisualElement"/> is a <c>Control</c>,
            this will also call <c>VisualStateManager.GoToState</c> with a new state
            of either "Expanded" or "Collapsed".
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Group.UngroupableProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Group.Ungroupable"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.GetUngroupable(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Group.Ungroupable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Group.SetUngroupable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Group.Ungroupable"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Group.CanUngroup">
            <summary>
            This predicate is true if the user may ungroup this node.
            </summary>
            <returns>
            Return true if this group is <see cref="P:Northwoods.GoXam.Group.Ungroupable"/>,
            if this node's layer's <see cref="P:Northwoods.GoXam.Layer.AllowUngroup"/> is true,
            and if this node's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowUngroup"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Group.IsSubGraphExpandedProperty">
            <summary>
            Identifies the <c>IsSubGraphExpanded</c> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.GetIsSubGraphExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Group.IsSubGraphExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Group.SetIsSubGraphExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Group.IsSubGraphExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
            <remarks>
            Changing this attached property toggles the <see cref="P:Northwoods.GoXam.Part.Visible"/> property of
            member nodes and links.
            Setting this attached property also sets the <see cref="P:Northwoods.GoXam.Group.IsExpandedSubGraph"/> dependency property.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Group.WasSubGraphExpandedProperty">
            <summary>
            Identifies the <c>WasSubGraphExpanded</c> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.GetWasSubGraphExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Group.WasSubGraphExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Group.SetWasSubGraphExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Group.WasSubGraphExpandedProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="F:Northwoods.GoXam.Group.LayoutProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Group.Layout"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Group.GetLayout(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Northwoods.GoXam.Group.LayoutProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Group.SetLayout(System.Windows.DependencyObject,Northwoods.GoXam.Layout.IDiagramLayout)">
            <summary>
            Sets the value of the <see cref="F:Northwoods.GoXam.Group.LayoutProperty"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Group.FindSubGraphParts">
            <summary>
            Return a collection of <see cref="T:Northwoods.GoXam.Part"/>s that are all of the nodes and links
            that are members of this group, including inside nested groups,
            but excluding this <see cref="T:Northwoods.GoXam.Group"/> itself.
            </summary>
            <remarks>
            <para>
            For member nodes that are <see cref="T:Northwoods.GoXam.Group"/>s, this will include its members recursively.
            </para>
            <para>
            If you only want the immediate member nodes of this group, use <see cref="P:Northwoods.GoXam.Group.MemberNodes"/>.
            If you only want the immediate member links of this group, use <see cref="P:Northwoods.GoXam.Group.MemberLinks"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Group.CollapseSubGraph">
            <summary>
            Collapse each of the member nodes and links,
            and recursively collapse any member groups.
            </summary>
            <remarks>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Group.SetIsSubGraphExpanded(System.Windows.DependencyObject,System.Boolean)"/> to set that attached property,
            and <see cref="M:Northwoods.GoXam.Group.SetWasSubGraphExpanded(System.Windows.DependencyObject,System.Boolean)"/> to remember whether a nested group had been expanded,
            to support data binding the state of the group.
            </para>
            <para>
            This operation is performed within a "Collapse SubGraph" transaction.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Group.ExpandSubGraph">
            <summary>
            Make visible each member node and link,
            and perhaps recursively expand nested subgraphs.
            </summary>
            <remarks>
            <para>
            This will expand a nested member group only if its <see cref="M:Northwoods.GoXam.Group.GetWasSubGraphExpanded(System.Windows.DependencyObject)"/> was true.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Group.SetIsSubGraphExpanded(System.Windows.DependencyObject,System.Boolean)"/> to set that attached property,
            to support data binding the state of the group.
            </para>
            <para>
            This operation is performed within an "Expand SubGraph" transaction.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Group.GroupPanel">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.GroupPanel"/> representing the group's member nodes and links.
            </summary>
            <value>
            This will be null if this group does not use a <see cref="T:Northwoods.GoXam.GroupPanel"/>.
            </value>
            <remarks>
            <para>
            This group's member <see cref="T:Northwoods.GoXam.Node"/>s and <see cref="T:Northwoods.GoXam.Link"/>s are not visual children of this group.
            However, if there is a <see cref="P:Northwoods.GoXam.Group.GroupPanel"/> in the group's visual tree,
            it will be measured and arranged to have the same bounds as the collection of member nodes.
            </para>
            <para>
            The location of the <see cref="T:Northwoods.GoXam.Group"/> is always the location of its <see cref="P:Northwoods.GoXam.Group.GroupPanel"/>, if it has one.
            If there is a <see cref="P:Northwoods.GoXam.Group.GroupPanel"/>, it must be named and referred to as the
            <see cref="P:Northwoods.GoXam.Node.LocationElementName"/> for the group.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Group.IsExpandedSubGraph">
            <summary>
            Gets or sets whether this group is considered "expanded".
            </summary>
            <value>
            The default value is false.
            Changing this value calls either <see cref="M:Northwoods.GoXam.Group.ExpandSubGraph"/> or <see cref="M:Northwoods.GoXam.Group.CollapseSubGraph"/>.
            </value>
            <remarks>
            If you want to data bind whether this group is expanded,
            bind <see cref="F:Northwoods.GoXam.Group.IsSubGraphExpandedProperty"/> and <see cref="F:Northwoods.GoXam.Group.WasSubGraphExpandedProperty"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Group.Ungroupable">
            <summary>
            Gets or sets whether the user may delete this group without removing any members.
            </summary>
            <value>
            The default value is true.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Group.CanUngroup"/> to see
            if a particular node is ungroupable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Group.Layout">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Layout.IDiagramLayout"/> used to position the member nodes
            and route the member links of this <see cref="T:Northwoods.GoXam.Group"/>.
            </summary>
            <value>
            Initially this is an instance of <see cref="T:Northwoods.GoXam.Layout.DiagramLayout"/>.
            If the value is null, there is no automatic layout of the member nodes of this group,
            and the member nodes may be laid out by the containing group's layout, or else by
            the diagram's <see cref="P:Northwoods.GoXam.Diagram.Layout"/>.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting or data-binding the attached property on the
            root element of the DataTemplate.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Group.MemberNodes">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Node"/>s that are immediate members of this group.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Group.MemberLinks">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Link"/>s that are immediate members of this group.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Link">
            <summary>
            A <c>Link</c> is a <see cref="T:Northwoods.GoXam.Part"/> that represents a relationship between <see cref="T:Northwoods.GoXam.Node"/>s.
            </summary>
            <remarks>
            <para>
            A link connects the <see cref="P:Northwoods.GoXam.Link.FromNode"/> to the <see cref="P:Northwoods.GoXam.Link.ToNode"/>.
            </para>
            <para>
            The rendering of a link is determined by the <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/>.
            This <c>DataTemplate</c> may be a simple <c>LinkShape</c> (WPF) or <c>Path</c> (Silverlight).
            However it is usually a <see cref="T:Northwoods.GoXam.LinkPanel"/>, which supports child elements that act as arrowheads
            or text labels or other decoration on the link.
            </para>
            <para>
            A link may also have a <see cref="P:Northwoods.GoXam.Link.LabelNode"/>.
            In this case there is a separate <see cref="T:Northwoods.GoXam.Node"/> that is associated with the link.
            The node's <see cref="P:Northwoods.GoXam.Node.IsLinkLabel"/> property will be true.
            It is usually positioned at the mid-point of the link.
            It supports its own link connections and may be independently selected or moved.
            The label node may be a <see cref="T:Northwoods.GoXam.Group"/>, in which case all of its member nodes
            are link label nodes that are positioned by the <see cref="T:Northwoods.GoXam.LinkPanel"/>.
            </para>
            <para>
            You may not apply any transforms to a <c>Link</c>; that is reserved to GoXam for future use.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Link.ToString">
            <summary>
            For convenience in debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.GetAngle(System.Windows.UIElement)">
            <summary>
            The angle of any <see cref="T:Northwoods.GoXam.Link"/>'s <see cref="P:Northwoods.GoXam.Part.VisualElement"/> or <see cref="P:Northwoods.GoXam.Link.Path"/> is zero,
            however an element within the visual tree may have an angle.
            </summary>
            <param name="elt"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.SetAngle(System.Windows.UIElement,System.Double,Northwoods.GoXam.Spot)">
            <summary>
            You cannot set the angle of the link's <see cref="P:Northwoods.GoXam.Part.VisualElement"/> or <see cref="P:Northwoods.GoXam.Link.Path"/>,
            since they must always be zero, but you can set the angle of other elements in the visual tree.
            </summary>
            <param name="elt"></param>
            <param name="angle"></param>
            <param name="focus"></param>
        </member>
        <member name="M:Northwoods.GoXam.Link.OnApplyTemplate">
            <summary>
            Initialize the <see cref="P:Northwoods.GoXam.Link.Route"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.PartsModelFromNodeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.PartsModelFromNode"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.PartsModelFromPortIdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.PartsModelFromPortId"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.PartsModelToNodeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.PartsModelToNode"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.PartsModelToPortIdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.PartsModelToPortId"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.PartsModelLabelNodeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.PartsModelLabelNode"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Link.RouteProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Link.Route"/> attached dependency property
            that must only be on the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Link.GetRoute(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Northwoods.GoXam.Link.Route"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.SetRoute(System.Windows.DependencyObject,Northwoods.GoXam.Route)">
            <summary>
            Sets the value of the <see cref="P:Northwoods.GoXam.Link.Route"/> attached dependency property.
            </summary>
            <param name="d">the root <see cref="P:Northwoods.GoXam.Part.VisualElement"/></param>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.GoXam.Link.CanRelinkFrom">
            <summary>
            This predicate is true if the user may reconnect the "from" end of
            this link.
            </summary>
            <returns>
            Return true if this link is <see cref="P:Northwoods.GoXam.Link.RelinkableFrom"/>,
            if this link's layer's <see cref="P:Northwoods.GoXam.Layer.AllowRelink"/> is true,
            and if this link's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowRelink"/> is true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.CanRelinkTo">
            <summary>
            This predicate is true if the user may reconnect the "to" end of
            this link.
            </summary>
            <returns>
            Return true if this link is <see cref="P:Northwoods.GoXam.Link.RelinkableTo"/>,
            if this link's layer's <see cref="P:Northwoods.GoXam.Layer.AllowRelink"/> is true,
            and if this link's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowRelink"/> is true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.GetOtherNode(Northwoods.GoXam.Node)">
            <summary>
            Given a <see cref="T:Northwoods.GoXam.Node"/>, return the node at the other end of this link.
            </summary>
            <param name="node"></param>
            <returns>This may return the same node, if the link is reflexive</returns>
        </member>
        <member name="M:Northwoods.GoXam.Link.GetOtherPort(System.Windows.FrameworkElement)">
            <summary>
            Given a <c>FrameworkElement</c> that is a "port", return the port at the other end of this link.
            </summary>
            <param name="port"></param>
            <returns>This may return the same element, if the link is reflexive</returns>
        </member>
        <member name="P:Northwoods.GoXam.Link.Path">
            <summary>
            Gets the <c>Shape</c> representing the path used to render the route of this link.
            </summary>
            <value>
            This will be null if this link uses a <see cref="T:Northwoods.GoXam.LinkPanel"/> and if
            that panel's <see cref="P:Northwoods.GoXam.LinkPanel.Implementation"/> is not <see cref="F:Northwoods.GoXam.LinkPanelImplementation.Path"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.PartsModelFromNode">
            <summary>
            Gets or sets the identifier naming the "from" node for this link in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
            <value>
            The default value is null, indicating that this link is not connected to any node.
            </value>
            <remarks>
            This property is only used by unbound links that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.PartsModelFromPortId">
            <summary>
            Gets or sets a particular value identifying the "from" port that this link is connected to.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            This property is only used by unbound links that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.PartsModelToNode">
            <summary>
            Gets or sets the identifier naming the "to" node for this link in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
            <value>
            The default value is null, indicating that this link is not connected to any node.
            </value>
            <remarks>
            This property is only used by unbound links that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.PartsModelToPortId">
            <summary>
            Gets or sets a particular value identifying the "to" port that this link is connected to.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            This property is only used by unbound links that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.PartsModelLabelNode">
            <summary>
            Gets or sets the identifier naming the "label" node for this link in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
            <value>
            The default value is null, indicating that this link does not have any node as a label.
            </value>
            <remarks>
            This property is only used by unbound links that are in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/> model.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.Route">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Route"/> implementing the path that
            this link will take.
            </summary>
            <value>
            A <see cref="T:Northwoods.GoXam.Route"/> that was specified as an attached property on
            the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            If none was defined, this creates one automatically.
            The value is actually stored on the <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            One normally sets it by setting the attached property on the
            root element of the DataTemplate.
            This property should not be data-bound.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.RelinkableFrom">
            <summary>
            Gets or sets whether the user may reconnect the "from" end of this link.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Link.CanRelinkFrom"/> to see
            if a particular link is relinkable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.RelinkFromAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>
            when this part is selected.
            </summary>
            <value>
            The default value is null, meaning use the default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.RelinkableTo">
            <summary>
            Gets or sets whether the user may reconnect the "to" end of this link.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Link.CanRelinkTo"/> to see
            if a particular link is relinkable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Link.RelinkToAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>
            when this part is selected.
            </summary>
            <value>
            The default value is null, meaning use the default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.LinkReshapeHandleTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by the <see cref="T:Northwoods.GoXam.Tool.LinkReshapingTool"/>
            for each <see cref="P:Northwoods.GoXam.Link.Route"/> point's handle.
            </summary>
            <value>
            The default value is null, meaning use the default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.FromData">
            <summary>
            Get the data object that this link is coming from.
            </summary>
            <value>
            This is not a <see cref="T:Northwoods.GoXam.Node"/> unless this link is in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.FromNode">
            <summary>
            Get the <see cref="T:Northwoods.GoXam.Node"/> that corresponds to the
            <see cref="P:Northwoods.GoXam.Link.FromData"/> for this link.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.FromPortId">
            <summary>
            Get the name of the port associated with the "from" end of this link.
            </summary>
            <value>
            This only returns a string when the model is an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>,
            at which time it converts to a string the value returned by <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetFromParameterForLink(System.Object)"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.FromPort">
            <summary>
            Get the <c>FrameworkElement</c> that corresponds to the
            <see cref="P:Northwoods.GoXam.Link.FromPortId"/> for this link.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.ToData">
            <summary>
            Get the data object that this link is going to.
            </summary>
            <value>
            This is not a <see cref="T:Northwoods.GoXam.Node"/> unless this link is in a <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.ToNode">
            <summary>
            Get the <see cref="T:Northwoods.GoXam.Node"/> that corresponds to the
            <see cref="P:Northwoods.GoXam.Link.ToData"/> for this link.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.ToPortId">
            <summary>
            Get the name of the port associated with the "to" end of this link.
            </summary>
            <value>
            This only returns a string when the model is an <see cref="T:Northwoods.GoXam.Model.ILinksModel"/>,
            at which time it converts to a string the value returned by <see cref="M:Northwoods.GoXam.Model.ILinksModel.GetToParameterForLink(System.Object)"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Link.ToPort">
            <summary>
            Get the <c>FrameworkElement</c> that corresponds to the
            <see cref="P:Northwoods.GoXam.Link.ToPortId"/> for this link.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.ContainingGroups">
            <summary>
            Get a collection of <see cref="T:Northwoods.GoXam.Group"/>s of which this part is a member.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.ContainingSubGraph">
            <summary>
            Get the group <see cref="T:Northwoods.GoXam.Group"/> that this part is a member of, if any.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Link.LabelNode">
            <summary>
            Gets the <see cref="T:Northwoods.GoXam.Node"/>, if any, that is a label for this link.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.DropOntoBehavior">
            <summary>
            Specify additional behavior when dragging and dropping the selection
            onto existing parts in the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DropOntoBehavior.None">
            <summary>
            Don't do anything else besides the standard result of moving or copying the selection.
            This is the default value for <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DropOntoBehavior.AddsToGroup">
            <summary>
            If the drop occurs on a <see cref="T:Northwoods.GoXam.Group"/>, and if the group can accept having
            the selected nodes and links added as new members, then add them to that group.
            This is only effective if <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkFromNode">
            <summary>
            If the drop occurs on a <see cref="T:Northwoods.GoXam.Node"/>, new links are created from the 
            dropped-onto node to each selected dropped node.
            This does not draw new links to dropped nodes that were members of dropped groups
            (i.e. members of selected groups).
            This is only effective if <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkToNode">
            <summary>
            If the drop occurs on a <see cref="T:Northwoods.GoXam.Node"/>, new links are created from the 
            each selected dropped node to the dropped-onto node.
            This does not draw new links from dropped nodes that were members of dropped groups
            (i.e. members of selected groups).
            This is only effective if <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.DropOntoBehavior.SplicesIntoLink">
            <summary>
            If the drop occurs on a <see cref="T:Northwoods.GoXam.Link"/>, each selected dropped node is
            connected by a link from the original link's <see cref="P:Northwoods.GoXam.Link.FromNode"/>
            and by a link to the original link's <see cref="P:Northwoods.GoXam.Link.ToNode"/>, and the
            original link is removed.
            This is only effective if <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkShape">
            <summary>
            This <c>Shape</c> is typically used as the line, perhaps curved or with multiple segments,
            representing a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            This shape must be either the only element of a <see cref="T:Northwoods.GoXam.Link"/> <c>DataTemplate</c> or a child
            element of a <see cref="T:Northwoods.GoXam.LinkPanel"/> which is itself the root element of a Link.
            </para>
            <para>
            In WPF, you must use the <c>&lt;go:LinkShape&gt;</c> element instead of a <c>&lt;Path&gt;</c> element.
            In Silverlight, you may use either the <c>&lt;go:LinkShape&gt;</c> element or a <c>&lt;Path&gt;</c> element.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.LinkShape.#ctor">
            <summary>
            Construct a <see cref="T:Northwoods.GoXam.LinkShape"/> that will get its geometry from its <see cref="T:Northwoods.GoXam.Link"/>'s <see cref="T:Northwoods.GoXam.Route"/>.
            </summary>
            <remarks>
            This sets the <see cref="F:Northwoods.GoXam.LinkPanel.IsLinkShapeProperty"/> to true.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.LinkShape.DefiningGeometry">
            <summary>
            Gets the <c>Geometry</c> from the <see cref="T:Northwoods.GoXam.Route"/> of the <see cref="T:Northwoods.GoXam.Link"/> that contains this shape.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Route">
            <summary>
            A <c>Route</c> is an object associated with a <see cref="P:Northwoods.GoXam.Route.Link"/> that
            computes and remembers the set of points that the link should follow to
            connect two nodes.
            </summary>
            <remarks>
            <para>
            The only use of a <see cref="T:Northwoods.GoXam.Route"/> in XAML is as the value of the
            <see cref="P:Northwoods.GoXam.Link.Route"/> attached property:
            <code>
              &lt;DataTemplate x:Key="MyLinkTemplate"&gt;
                &lt;go:LinkPanel go:Link.SelectionElementName="Path" go:Part.SelectionAdorned="True"&gt;
                  &lt;go:Link.Route&gt;
                    &lt;go:Route Routing="Orthogonal" Corner="10" RelinkableFrom="True" RelinkableTo="True" /&gt;
                  &lt;/go:Link.Route&gt;
                  &lt;go:LinkShape x:Name="Path" Stroke="Black" StrokeThickness="1" /&gt;
                  &lt;Path Fill="Black" go:LinkPanel.ToArrow="Standard" /&gt;
                &lt;/go:LinkPanel&gt;
              &lt;/DataTemplate&gt;
            </code>
            </para>
            <para>
            Although this class inherits from <c>FrameworkElement</c>
            in order to support data binding,
            it is not really a <c>FrameworkElement</c> or <c>UIElement</c>!
            Please ignore all of the properties, methods, and events defined by
            <c>FrameworkElement</c> and <c>UIElement</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.#ctor">
            <summary>
            Construct an empty <see cref="T:Northwoods.GoXam.Route"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.FromSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.FromSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.ToSpotProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.ToSpot"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.FromEndSegmentLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.FromEndSegmentLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.ToEndSegmentLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.ToEndSegmentLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.FromEndSegmentDirectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.FromEndSegmentDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.ToEndSegmentDirectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.ToEndSegmentDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.FromShortLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.FromShortLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.ToShortLengthProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.ToShortLength"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.CurveProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Curve"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.CurvinessProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Curviness"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.CornerProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Corner"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.RoutingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Routing"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.SmoothnessProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Smoothness"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.AdjustingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.Adjusting"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.RelinkableFromProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.RelinkableFrom"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Route.CanRelinkFrom">
            <summary>
            This predicate is true if the user may reconnect the "from" end of
            this link.
            </summary>
            <returns>
            Return true if this link is <see cref="P:Northwoods.GoXam.Route.RelinkableFrom"/>,
            if this link's layer's <see cref="P:Northwoods.GoXam.Layer.AllowRelink"/> is true,
            and if this link's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowRelink"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Route.RelinkFromAdornmentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.RelinkFromAdornmentTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.RelinkableToProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.RelinkableTo"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Route.CanRelinkTo">
            <summary>
            This predicate is true if the user may reconnect the "to" end of
            this link.
            </summary>
            <returns>
            Return true if this link is <see cref="P:Northwoods.GoXam.Route.RelinkableTo"/>,
            if this link's layer's <see cref="P:Northwoods.GoXam.Layer.AllowRelink"/> is true,
            and if this link's diagram's <see cref="P:Northwoods.GoXam.Diagram.AllowRelink"/> is true.
            </returns>
        </member>
        <member name="F:Northwoods.GoXam.Route.RelinkToAdornmentTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.RelinkToAdornmentTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Route.LinkReshapeHandleTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Route.LinkReshapeHandleTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Route.ToString">
            <summary>
            Produce a string rendering that may help in debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetPoint(System.Int32)">
            <summary>
            Gets a particular point of the route.
            </summary>
            <param name="i">the zero-based index of the desired point</param>
            <returns>
            if the index is negative or beyond the list of <see cref="P:Northwoods.GoXam.Route.Points"/>,
            this method will return <c>Point(Double.NaN, Double.NaN)</c>
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.SetPoint(System.Int32,System.Windows.Point)">
            <summary>
            Modify a particular point of the route.
            </summary>
            <param name="i">the zero-based index of the point; if beyond range this does nothing</param>
            <param name="p">the new point, which should not have infinite coordinate values</param>
        </member>
        <member name="M:Northwoods.GoXam.Route.InsertPoint(System.Int32,System.Windows.Point)">
            <summary>
            Insert a point at a particular position in the route.
            </summary>
            <param name="i">
            the zero-based index of the new point;
            if less than zero this does nothing;
            if greater than the number of points it adds the point at the end
            </param>
            <param name="p">the new point, which should not have infinite coordinate values</param>
        </member>
        <member name="M:Northwoods.GoXam.Route.AddPoint(System.Windows.Point)">
            <summary>
            Add a point at the end of the route.
            </summary>
            <param name="p">the new point, which should not have infinite coordinate values</param>
        </member>
        <member name="M:Northwoods.GoXam.Route.RemovePoint(System.Int32)">
            <summary>
            Remove a particular point from the route.
            </summary>
            <param name="i">the zero-based index of the point to extract; if beyond range this does nothing</param>
        </member>
        <member name="M:Northwoods.GoXam.Route.MovePoints(System.Windows.Point)">
            <summary>
            Modify all of the points by adding a constant offset to each one.
            </summary>
            <param name="offset">the values must be a number other than infinity</param>
        </member>
        <member name="M:Northwoods.GoXam.Route.ClearPoints">
            <summary>
            Remove all of the points of the route.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Route.InvalidateRoute">
            <summary>
            Declare that the points in this <see cref="T:Northwoods.GoXam.Route"/> are invalid and request
            that it call <see cref="M:Northwoods.GoXam.Route.RecomputePoints"/> soon.
            </summary>
            <remarks>
            This is called when a node invalidates its connected links (<see cref="M:Northwoods.GoXam.Part.InvalidateRelationships"/>)
            or when some Route properties have been changed.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.UpdatePoints">
            <summary>
            Recalculate route points by calling <see cref="M:Northwoods.GoXam.Route.RecomputePoints"/> only if needed.
            </summary>
            <remarks>
            In case the route has become invalid, e.g. because <see cref="M:Northwoods.GoXam.Route.InvalidateRoute"/> was called,
            you need to call this method before you can call <see cref="M:Northwoods.GoXam.Route.GetPoint(System.Int32)"/>.
            This method is also called by property getters such as <see cref="P:Northwoods.GoXam.Route.DefiningGeometry"/>
            and <see cref="P:Northwoods.GoXam.Route.MidPoint"/> and <see cref="P:Northwoods.GoXam.Route.MidAngle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.RecomputePoints">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> right now.
            </summary>
            <remarks>
            This method calls <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> in order to calculate a new route.
            If you just want to make sure the points are up-to-date, call <see cref="M:Northwoods.GoXam.Route.UpdatePoints"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.ComputeMidPoint">
            <summary>
            Computes the point at the middle of the route.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.ComputeMidAngle">
            <summary>
            Compute the angle of the route at the <see cref="P:Northwoods.GoXam.Route.MidPoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.ComputePoints">
            <summary>
            Compute all of the points of this route.
            </summary>
            <returns>true if the points were calculated</returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetLinkPointFromPoint(Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Compute the intersection point for the edge of a particular port element, given a point,
            when no particular spot or side has been specified.
            </summary>
            <param name="node"></param>
            <param name="port">the <c>FrameworkElement</c> representing a port on the node</param>
            <param name="focus">the point in model coordinates to/from which the link should point, normally the center of the port</param>
            <param name="p">often this point is far away from the node, to give a general direction, particularly an orthogonal one</param>
            <param name="from">true if the link is coming out of the port; false if going to the port</param>
            <returns>the point in model coordinates of the intersection point on the edge of the port</returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetLinkPoint(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Spot,System.Boolean,System.Boolean,Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            Compute the point on a node/port at which the route of a link should end.
            </summary>
            <param name="node"></param>
            <param name="port">the <c>FrameworkElement</c> representing a port on the node</param>
            <param name="spot">a <see cref="T:Northwoods.GoXam.Spot"/> value describing where the link should connect</param>
            <param name="from">true if the link is coming out of the port; false if going to the port</param>
            <param name="ortho">whether the link should have orthogonal segments</param>
            <param name="othernode">the node at the other end of the link</param>
            <param name="otherport">the FrameworkElement port at the other end of the link</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetLinkDirection(Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Windows.Point,Northwoods.GoXam.Spot,System.Boolean,System.Boolean,Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            Compute the direction in which a link should go from a given point.
            </summary>
            <param name="node"></param>
            <param name="port">the <c>FrameworkElement</c> representing a port on the node</param>
            <param name="linkpoint"></param>
            <param name="spot">a <see cref="T:Northwoods.GoXam.Spot"/> value describing where the link should connect</param>
            <param name="from">true if the link is coming out of the port; false if going to the port</param>
            <param name="ortho">whether the link should have orthogonal segments</param>
            <param name="othernode">the node at the other end of the link</param>
            <param name="otherport">the FrameworkElement port at the other end of the link</param>
            <returns>an angle in degrees</returns>
            <remarks>
            <para>
            If the <paramref name="spot"/> is a specific spot or is a side,
            this will return the corresponding multiple of 90 degrees.
            For example, the spot <see cref="F:Northwoods.GoXam.Spot.MiddleLeft"/> will return 180 and a spot near the bottom will return 90.
            For spots that are exactly toward the corners, this will return a multiple of 45 degrees.
            For example, the spot <see cref="F:Northwoods.GoXam.Spot.BottomLeft"/> will return 135.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Route.FromEndSegmentDirection"/> or <see cref="P:Northwoods.GoXam.Route.ToEndSegmentDirection"/>
            is <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNode"/>
            or <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNodeOrthogonal"/>,
            these values are rotated according to the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/>,
            unless the <paramref name="spot"/> is <see cref="F:Northwoods.GoXam.Spot.None"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetEndSegmentLength(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Spot,System.Boolean)">
            <summary>
            Get the length of the end segment, typically a short distance.
            </summary>
            <param name="node"></param>
            <param name="port">the <c>FrameworkElement</c> representing a port on the node</param>
            <param name="spot">a <see cref="T:Northwoods.GoXam.Spot"/> value describing where the link should connect</param>
            <param name="from">true if the link is coming out of the port; false if going to the port</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.ComputeCorner">
            <summary>
            Returns the <see cref="P:Northwoods.GoXam.Route.Corner"/>, if it's a non-negative number, or else 10.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.ComputeCurviness">
            <summary>
            Returns the <see cref="P:Northwoods.GoXam.Route.Curviness"/>, if it's a number,
            or else a computed value based on how many links connect this pair of nodes/ports.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Route.HasCurviness">
            <summary>
            Returns true if an extra or a different point is needed based on <see cref="P:Northwoods.GoXam.Route.Curviness"/>.
            </summary>
            <returns></returns>
            <remarks>
            This is only called when the <see cref="P:Northwoods.GoXam.Route.Curve"/> is not <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>,
            by <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> and <see cref="M:Northwoods.GoXam.Route.GetMidOrthoPosition(System.Double,System.Double,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)">
            <summary>
            Adjust all of the existing points in this link's stroke in an inclusive range
            according to new first and last stroke points.
            </summary>
            <param name="startIndex">the zero-based index of the first point to be changed, to be
            the value of <paramref name="newFromPoint"/></param>
            <param name="newFromPoint"></param>
            <param name="endIndex">the zero-based index of the last point to be changed, to be
            the value of <paramref name="newToPoint"/></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> to plot the standard path.
            </value>
            <remarks>
            <para>
            This is primarily useful to help maintain intermediate inflection points
            in a link when one or both ports moves.
            By default this just calls <see cref="M:Northwoods.GoXam.Route.RescalePoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>, <see cref="M:Northwoods.GoXam.Route.StretchPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>,
            or <see cref="M:Northwoods.GoXam.Route.ModifyEndPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>.
            This method is not called when there are no existing points to be adjusted
            or when <see cref="P:Northwoods.GoXam.Route.Adjusting"/> is <see cref="F:Northwoods.GoXam.LinkAdjusting.None"/>.
            </para>
            <para>
            When this link is <see cref="P:Northwoods.GoXam.Route.Orthogonal"/>, an <see cref="P:Northwoods.GoXam.Route.Adjusting"/> of
            <see cref="F:Northwoods.GoXam.LinkAdjusting.Scale"/> will just return false to result in
            the standard orthogonal path.
            An <see cref="P:Northwoods.GoXam.Route.Adjusting"/> of <see cref="F:Northwoods.GoXam.LinkAdjusting.Stretch"/>
            for an orthogonal link is treated as if it were <see cref="F:Northwoods.GoXam.LinkAdjusting.End"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.RescalePoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)">
            <summary>
            Maintain the same shape for the stroke, but scale and rotate according to
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/> and <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be scaled and rotated accordingly to
            maintain the same shape as the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive.
            <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/> calls this method when <see cref="P:Northwoods.GoXam.Route.Adjusting"/>
            is <see cref="F:Northwoods.GoXam.LinkAdjusting.Scale"/>.
            This method should not be used when <see cref="P:Northwoods.GoXam.Route.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.StretchPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)">
            <summary>
            Stretch the points of this stroke by interpolating the points
            from <paramref name="startIndex"/> to <paramref name="endIndex"/> between the
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/> and <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be interpolated linearly to
            stretch or compress the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive, along each of the X and Y dimensions.
            <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/> calls this method when <see cref="P:Northwoods.GoXam.Route.Adjusting"/>
            is <see cref="F:Northwoods.GoXam.LinkAdjusting.Stretch"/>.
            This method should not be used when <see cref="P:Northwoods.GoXam.Route.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.ModifyEndPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)">
            <summary>
            Modify only the end points of this stroke to match any new
            <paramref name="newFromPoint"/> or <paramref name="newToPoint"/> points;
            intermediate points are not changed.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/> and <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and the intermediate points should be not be changed unless needed to maintain
            orthogonality when <see cref="P:Northwoods.GoXam.Route.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.AddOrthoPoints(System.Windows.Point,System.Double,System.Windows.Point,System.Double,Northwoods.GoXam.Node,Northwoods.GoXam.Node)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> when <see cref="P:Northwoods.GoXam.Route.Orthogonal"/>
            is true and at least one port has a link spot that is not <see cref="P:Northwoods.GoXam.Spot.IsNoSpot"/>.
            </summary>
            <param name="startFrom">
            this point will already have been added to the stroke by <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> before calling this method
            </param>
            <param name="fromDir">normally 0, 90, 180, or 270 degrees</param>
            <param name="endTo">
            <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> will add this point after calling this method
            </param>
            <param name="toDir">normally 0, 90, 180, or 270 degrees</param>
            <param name="fromnode">the <see cref="T:Northwoods.GoXam.Node"/> that the link is coming from</param>
            <param name="tonode">the <see cref="T:Northwoods.GoXam.Node"/> that the link is going to</param>
            <remarks>
            <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> is responsible for adding the first two
            and the last two points of the stroke, including <paramref name="startFrom"/> and <paramref name="endTo"/>.
            This method is responsible for adding any additional points in the middle of the stroke.
            This method calls <see cref="M:Northwoods.GoXam.Route.GetMidOrthoPosition(System.Double,System.Double,System.Boolean)"/> to determine the
            distance of the middle segment between the two ports.
            It also tries to avoid the source node and the destination node.
            When the <see cref="P:Northwoods.GoXam.Route.Routing"/> property is not <see cref="F:Northwoods.GoXam.LinkRouting.Normal"/>,
            this method uses another, more computationally expensive,
            method for determining the proper path of the link, which may have many segments.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.GetMidOrthoPosition(System.Double,System.Double,System.Boolean)">
            <summary>
            This method is called by <see cref="M:Northwoods.GoXam.Route.AddOrthoPoints(System.Windows.Point,System.Double,System.Windows.Point,System.Double,Northwoods.GoXam.Node,Northwoods.GoXam.Node)"/> to determine the distance
            of the middle segment between the two ports.
            </summary>
            <param name="fromPosition">The first point's X or Y coordinate, depending on the direction</param>
            <param name="toPosition">The last point's X or Y coordinate, depending on the direction</param>
            <param name="vertical">Whether the mid-position is along the vertical axis or horizontal</param>
            <returns></returns>
            <remarks>
            By default this returns the midpoint between the two coordinates.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.FindClosestSegment(System.Windows.Point)">
            <summary>
            Find the index of the segment that is closest to a given point.
            </summary>
            <param name="q">the <c>Point</c>, in model coordinates</param>
            <returns>The index of the segment, from zero to the number of points minus 2</returns>
            <remarks>
            This assumes the route only has straight line segments.
            It ignores any jump-overs or jump-gaps.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Route.MakeGeometry">
            <summary>
            Produce a <c>Geometry</c> given the points of this <see cref="T:Northwoods.GoXam.Route"/>,
            depending on the value of <see cref="P:Northwoods.GoXam.Route.Curve"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Route.Link">
            <summary>
            Gets the <see cref="P:Northwoods.GoXam.Route.Link"/> that owns this <see cref="T:Northwoods.GoXam.Route"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Route.FromSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> at which the route should connect to the port.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.
            If this value is not <see cref="F:Northwoods.GoXam.Spot.Default"/>, it takes precedence
            over the <c>Node.FromSpot</c> attached property on the port element.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.ToSpot">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Spot"/> at which the route should connect to the port.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Spot.Default"/>.
            If this value is not <see cref="F:Northwoods.GoXam.Spot.Default"/>, it takes precedence
            over the <c>Node.ToSpot</c> attached property on the port element.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.FromEndSegmentLength">
            <summary>
            Gets or sets the length of the short segment that should start the route.
            </summary>
            <value>
            This defaults to <c>Double.NaN</c>.
            If the value is a number, it takes precedence over the <c>Node.FromEndSegmentLength</c>
            attached property on the port element.
            The effective value is determined by <see cref="M:Northwoods.GoXam.Route.GetEndSegmentLength(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Spot,System.Boolean)"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.ToEndSegmentLength">
            <summary>
            Gets or sets the length of the short segment that should end the route.
            </summary>
            <value>
            This defaults to <c>Double.NaN</c>.
            If the value is a number, it takes precedence over the <c>Node.ToEndSegmentLength</c>
            attached property on the port element.
            The effective value is determined by <see cref="M:Northwoods.GoXam.Route.GetEndSegmentLength(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Spot,System.Boolean)"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.FromEndSegmentDirection">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoXam.Route.GetLinkDirection(Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Windows.Point,Northwoods.GoXam.Spot,System.Boolean,System.Boolean,Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> behaves.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.Absolute"/>.
            </value>
            <remarks>
            Typically when you have orthogonal links and nodes with ports that have particular spots
            along the edge of the node, if the whole node is rotated, you would want the connected links to
            be re-routed to go "around" to connect to the ports as if the spots had changed appropriately
            for that side of the node.
            You can get that effect by setting this property to <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNode"/>
            or <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNodeOrthogonal"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.ToEndSegmentDirection">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoXam.Route.GetLinkDirection(Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Windows.Point,Northwoods.GoXam.Spot,System.Boolean,System.Boolean,Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> behaves.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.Absolute"/>.
            </value>
            <remarks>
            Typically when you have orthogonal links and nodes with ports that have particular spots
            along the edge of the node, if the whole node is rotated, you would want the connected links to
            be re-routed to go "around" to connect to the ports as if the spots had changed appropriately
            for that side of the node.
            You can get that effect by setting this property to <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNode"/>
            or <see cref="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNodeOrthogonal"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.FromShortLength">
            <summary>
            Gets or sets the length of the segment between the far edge of the <c>Arrowhead</c> and the <c>Node</c> at the start of the route.
            </summary>
            <value>
            This defaults to <c>Double.NaN</c>.
            </value>
            <remarks>
            The value for this property cannot exceed the length of the first segment of the Route.
            Except in the case where there is only one segment, in which the value cannot exceed half the length of the single segment.
            Setting the value to be greater than the limiting length has the same effect as setting it equal to that length.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.ToShortLength">
            <summary>
            Gets or sets the length of the segment between the far edge of the <c>Arrowhead</c> and the <c>Node</c> at the end of the route.
            </summary>
            <value>
            This defaults to <c>Double.NaN</c>.
            </value>
            <remarks>
            The value for this property cannot exceed the length of the last segment of the Route.
            Except in the case where there is only one segment, in which the value cannot exceed half the length of the single segment.
            Setting the value to be greater than the limiting length has the same effect as setting it equal to that length.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.Curve">
            <summary>
            Gets or sets the way the path is generated from the route's points.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.LinkCurve.None"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.Curviness">
            <summary>
            Gets or sets how far the control points are offset when the curve is <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>
            or when there are multiple links between the same two ports.
            </summary>
            <value>
            This is used to determine the offset distance for the control points of
            a <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/> style link when connecting two ports
            whose spots are <see cref="F:Northwoods.GoXam.Spot.None"/>, or when there
            are multiple links between two ports.
            This defaults to NaN.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.Corner">
            <summary>
            Gets or sets how rounded the corners are for adjacent line segments when the
            <see cref="P:Northwoods.GoXam.Route.Curve"/> is <see cref="F:Northwoods.GoXam.LinkCurve.None"/>,
            <see cref="F:Northwoods.GoXam.LinkCurve.JumpOver"/>, or <see cref="F:Northwoods.GoXam.LinkCurve.JumpGap"/> and the two line segments are orthogonal to each other.
            </summary>
            <value>
            This describes the maximum radius of rounded corners, in model coordinates.
            This defaults to 0.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.Orthogonal">
            <summary>
            Gets whether the segments of the link are always horizontal or vertical.
            </summary>
            <remarks>
            You can change the value of this property by setting <see cref="P:Northwoods.GoXam.Route.Routing"/>.
            This property primarily controls the behavior of <see cref="M:Northwoods.GoXam.Route.ComputePoints"/>,
            to position the points of the stroke so that straight line segments will
            be horizontal or vertical.
            You can have a link drawn with only horizontal and vertical segments if the
            link's curve is <see cref="F:Northwoods.GoXam.LinkCurve.None"/>, <see cref="F:Northwoods.GoXam.LinkCurve.JumpOver"/>,
            or <see cref="F:Northwoods.GoXam.LinkCurve.JumpGap"/>.
            If the curve is <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>, some of the orthogonally
            positioned points act as control points to help form the curve.
            The orthogonal <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> algorithm adds two segments to
            the normal three segments so that it is possible to connect two ports using only
            orthogonal lines.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.Routing">
            <summary>
            Gets or sets whether the link's path tries to avoid other nodes.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoXam.LinkRouting.Normal"/>.
            </value>
            <remarks>
            Setting this property to <see cref="F:Northwoods.GoXam.LinkRouting.Orthogonal"/> or
            <see cref="F:Northwoods.GoXam.LinkRouting.AvoidsNodes"/> is not recommended when the <see cref="P:Northwoods.GoXam.Route.Curve"/>
            is <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>.
            Changing this property will eventually result in a call to <see cref="M:Northwoods.GoXam.Route.ComputePoints"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.Smoothness">
            <summary>
            Gets or sets how far control points are from the points of the Route when
            Routing is <see cref="F:Northwoods.GoXam.LinkRouting.Orthogonal"/> and Curve is <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>.
            </summary>
            <value>
            This defaults to 0.5.
            </value>
            <remarks>
            Values of this property typically fall in the range of 0.0 to 1.0.  
            A value of 0.0 indicates that the control points of the curve are at the end points, which will result in straight line segments.
            A value of 1.0 indicates that the control points are one-third of the link's length away from the end point along the direction of the link,
            and the same distance away in a perpendicular direction. The distance scales linearly with the value of this property, 
            even with negative values and values greater than 1.0.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.Adjusting">
            <summary>
            Gets or sets how <see cref="M:Northwoods.GoXam.Route.ComputePoints"/> behaves.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.LinkAdjusting.None"/>.
            </value>
            <remarks>
            The effectiveness of this property depends on the value of <see cref="P:Northwoods.GoXam.Route.Routing"/>.
            For example, if the routing is <see cref="F:Northwoods.GoXam.LinkRouting.AvoidsNodes"/>,
            this property is ignored, because <see cref="M:Northwoods.GoXam.Route.ComputePoints"/>
            will compute the route in <see cref="M:Northwoods.GoXam.Route.AddOrthoPoints(System.Windows.Point,System.Double,System.Windows.Point,System.Double,Northwoods.GoXam.Node,Northwoods.GoXam.Node)"/>
            without calling <see cref="M:Northwoods.GoXam.Route.AdjustPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.RelinkableFrom">
            <summary>
            Gets or sets whether the user may reconnect the "from" end of this link.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Route.CanRelinkFrom"/> to see
            if a particular link is relinkable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.RelinkFromAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>
            to create the <see cref="T:Northwoods.GoXam.Adornment"/> for allowing the user to relink the "from" end of a <see cref="P:Northwoods.GoXam.Route.Link"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Route.RelinkableTo">
            <summary>
            Gets or sets whether the user may reconnect the "to" end of this link.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            In general one should call <see cref="M:Northwoods.GoXam.Route.CanRelinkTo"/> to see
            if a particular link is relinkable, not get this property value.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.RelinkToAdornmentTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>
            to create the <see cref="T:Northwoods.GoXam.Adornment"/> for allowing the user to relink the "to" end of a <see cref="P:Northwoods.GoXam.Route.Link"/>.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Route.LinkReshapeHandleTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used by <see cref="T:Northwoods.GoXam.Tool.LinkReshapingTool"/>
            to create a handle for allowing the user to reshape the route of a <see cref="P:Northwoods.GoXam.Route.Link"/>.
            </summary>
            <remarks>
            This <c>DataTemplate</c> only defines the reshape handle, not the whole <see cref="T:Northwoods.GoXam.Adornment"/>
            for reshaping the link.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Route.Points">
            <summary>
            Gets or sets the list of <c>Point</c>s in model coordinates that form the route.
            </summary>
            <value>
            The returned list of points should be treated as read-only.
            Instead of modifying it, call <see cref="M:Northwoods.GoXam.Route.SetPoint(System.Int32,System.Windows.Point)"/>, <see cref="M:Northwoods.GoXam.Route.InsertPoint(System.Int32,System.Windows.Point)"/>,
            <see cref="M:Northwoods.GoXam.Route.RemovePoint(System.Int32)"/>, or <see cref="M:Northwoods.GoXam.Route.ClearPoints"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.PointsCount">
            <summary>
            Gets the number of points in the route.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Route.MidPoint">
            <summary>
            Gets the point at the middle of the route.
            </summary>
            <value>
            This is determined by <see cref="M:Northwoods.GoXam.Route.ComputeMidPoint"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.MidAngle">
            <summary>
            Gets the angle of the route at the <see cref="P:Northwoods.GoXam.Route.MidPoint"/>.
            </summary>
            <value>
            This is determined by <see cref="M:Northwoods.GoXam.Route.ComputeMidAngle"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.DefiningGeometry">
            <summary>
            Gets the <c>Geometry</c> for this <see cref="T:Northwoods.GoXam.Route"/>.
            </summary>
            <value>
            This is the cached value of <see cref="M:Northwoods.GoXam.Route.MakeGeometry"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Route.FirstPickIndex">
            <summary>
            Return the index of the first stroke point to get a handle.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Route.LastPickIndex">
            <summary>
            Return the index of the last stroke point to get a handle.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkCurve">
            <summary>
            This enumeration defines how a path is drawn through a <see cref="T:Northwoods.GoXam.Route"/>'s points.
            </summary>
            <remarks>
            This is used as the value of <see cref="P:Northwoods.GoXam.Route.Curve"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkCurve.None">
            <summary>
            Straight line segments between the <see cref="T:Northwoods.GoXam.Route"/>'s points.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkCurve.JumpOver">
            <summary>
            Straight line segments that also hop over other orthogonal link segments that it crosses.
            <see cref="F:Northwoods.GoXam.LinkCurve.JumpGap"/> is similar.
            (Only applies when the route is orthogonal.)
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkCurve.Bezier">
            <summary>
            A Bezier curve, perhaps using the <see cref="P:Northwoods.GoXam.Route.Curviness"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkCurve.JumpGap">
            <summary>
            Like <see cref="F:Northwoods.GoXam.LinkCurve.JumpOver"/>, but leaves a gap in the path when it crosses other orthogonal link segments.
            (Only applies when the route is orthogonal.)
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkAdjusting">
            <summary>
            This enumeration describes how a <see cref="T:Northwoods.GoXam.Route"/> computes its points.
            </summary>
            <remarks>
            This is used as the value of <see cref="P:Northwoods.GoXam.Route.Adjusting"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkAdjusting.None">
            <summary>
            Always discards any old points and recomputes all points according to standard policies.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkAdjusting.Scale">
            <summary>
            When there are more than the standard number of points in the route,
            scale and rotate the intermediate points so that the link's shape stays
            approximately the same.
            This style, implemented by <see cref="M:Northwoods.GoXam.Route.RescalePoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead recalculate
            the standard route path, as if the adjusting style were <see cref="F:Northwoods.GoXam.LinkAdjusting.None"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkAdjusting.Stretch">
            <summary>
            When there are more than the standard number of points in the route,
            linearly interpolate the intermediate points along the X and Y dimensions
            between the ports.
            This style, implemented by <see cref="M:Northwoods.GoXam.Route.StretchPoints(System.Int32,System.Windows.Point,System.Int32,System.Windows.Point)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead only modify the
            end points of the existing path, as if the adjusting style were <see cref="F:Northwoods.GoXam.LinkAdjusting.End"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkAdjusting.End">
            <summary>
            When there are more than the standard number of points in the route,
            or if the route is orthogonal, just modify the end points,
            while leaving the intermediate points unchanged.
            This style maintains orthogonality for orthogonal links.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkRouting">
            <summary>
            This enumeration describes how the <see cref="T:Northwoods.GoXam.Route"/>'s computation of a path
            considers parts other than the two <see cref="T:Northwoods.GoXam.Node"/>s to which the route's <see cref="T:Northwoods.GoXam.Link"/>
            is connected.
            </summary>
            <remarks>
            This is used as the value of <see cref="P:Northwoods.GoXam.Route.Routing"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkRouting.Normal">
            <summary>
            The route only takes the link's two nodes into account.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkRouting.Orthogonal">
            <summary>
            The segments of the route are always either horizontal or vertical;
            nodes other than the link's two nodes are ignored.
            This routing style is not desirable when the curve is <see cref="F:Northwoods.GoXam.LinkCurve.Bezier"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkRouting.AvoidsNodes">
            <summary>
            The route tries to avoid crossing over other nodes.
            Currently this routing style also implies that it is <see cref="F:Northwoods.GoXam.LinkRouting.Orthogonal"/>.
            The other nodes must be <see cref="P:Northwoods.GoXam.Node.Avoidable"/>.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.LinkEndSegmentDirection">
            <summary>
            This enumeration describes how the <see cref="T:Northwoods.GoXam.Route"/> will compute an end segment angle
            in <see cref="M:Northwoods.GoXam.Route.GetLinkDirection(Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Windows.Point,Northwoods.GoXam.Spot,System.Boolean,System.Boolean,Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>.
            </summary>
            <remarks>
            This is used as the value of <see cref="P:Northwoods.GoXam.Route.FromEndSegmentDirection"/>
            and <see cref="P:Northwoods.GoXam.Route.ToEndSegmentDirection"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.LinkEndSegmentDirection.Absolute">
            <summary>
            The angle is the same even if the node has been rotated.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNode">
            <summary>
            The angle is rotated to match the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.LinkEndSegmentDirection.RotatedNodeOrthogonal">
            <summary>
            The angle is rotated to match the <see cref="P:Northwoods.GoXam.Node.RotationAngle"/>,
            but only in increments of multiples of 90 degrees.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.DataTemplateDictionary">
            <summary>
            This dictionary holds a number of <c>DataTemplates</c> indexed by category names.
            </summary>
            <remarks>
            <para>
            There are three standard template collections:
            <see cref="P:Northwoods.GoXam.Diagram.NodeTemplateDictionary"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GroupTemplateDictionary"/>, and
            <see cref="P:Northwoods.GoXam.Diagram.LinkTemplateDictionary"/>.
            You can swap whole sets of data templates at once by setting those three properties.
            </para>
            <para>
            However, the <see cref="T:Northwoods.GoXam.Diagram"/> properties:
            <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>, and
            <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/>
            take precedence over the <see cref="P:Northwoods.GoXam.DataTemplateDictionary.Default"/> value in this dictionary.
            </para>
            <para>
            Caution: if you create a <c>DataTemplateDictionary</c> in XAML as the value of a
            Style Setter, that dictionary will be shared by all diagrams affected by that style.
            The same is true if you create the <c>DataTemplateDictionary</c> as a resource
            and refer to it in more than one diagram.
            </para>
            <para>
            An instance of this dictionary may be shared by multiple <see cref="T:Northwoods.GoXam.Diagram"/>s.
            However, if you modify this dictionary, no <see cref="T:Northwoods.GoXam.Diagram"/> will be notified
            of such a change until you explicitly call <see cref="M:Northwoods.GoXam.Diagram.RaiseTemplatesChanged(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.DataTemplateDictionary.#ctor">
            <summary>
            Create an empty dictionary.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.DataTemplateDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Defined for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Northwoods.GoXam.DataTemplateDictionary.Default">
            <summary>
            Gets or sets the default data template, whose name is an empty string, "".
            </summary>
            <remarks>
            Depending on the dictionary, this value corresponds to either:
            <see cref="P:Northwoods.GoXam.Diagram.NodeTemplate"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GroupTemplate"/>, or
            <see cref="P:Northwoods.GoXam.Diagram.LinkTemplate"/>.
            However the value of those properties takes precedence over
            the dictionary's value of this Default property.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.DataTemplateDictionary.Comment">
            <summary>
            Gets or sets the data template named "Comment".
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.DataTemplateDictionary.LinkLabel">
            <summary>
            Gets or sets the data template named "LinkLabel".
            </summary>
            <remarks>
            This data template is used for nodes that are link labels,
            when the model supports separate link data.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Tool.RotatingTool">
            <summary>
            The <c>RotatingTool</c> is used to interactively change the angle of an element.
            </summary>
            <remarks>
            <para>
            This tool allows the user to rotate the <see cref="P:Northwoods.GoXam.Part.SelectionElement"/> of the selected part.
            Normally this works with <see cref="T:Northwoods.GoXam.Node"/>s; it does not make sense for <see cref="T:Northwoods.GoXam.Group"/>s
            and <see cref="T:Northwoods.GoXam.Link"/>s.
            </para>
            <para>
            You can limit the permitted angles by setting <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> and <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon"/>.
            For example, if you want to permit only angles that are multiples of 90 degrees,
            set <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> to 90 and <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon"/> to 45.
            </para>
            <para>
            This tool makes use of an <see cref="T:Northwoods.GoXam.Adornment"/>, shown when the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedNode"/> is selected,
            that includes a rotate handle.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultipleProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilonProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            Show an <see cref="T:Northwoods.GoXam.Adornment"/> with a rotate handle at a point to the side of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/>,
            if the node is selected and visible and if <see cref="M:Northwoods.GoXam.Part.CanRotate"/> is true.
            </summary>
            <param name="part"></param>
            <remarks>
            You can change the template used to create the adornment by setting <see cref="P:Northwoods.GoXam.Part.RotateAdornmentTemplate"/>.
            If that property is null, this uses a default template that produces a small circle.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.CanStart">
            <summary>
            The <see cref="T:Northwoods.GoXam.Tool.RotatingTool"/> may run when there is a mouse-down event on a rotate handle.
            </summary>
            <returns></returns>
            <remarks>
            For this tool to be runnable, the diagram must be modifiable
            (not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>),
            <see cref="P:Northwoods.GoXam.Diagram.AllowRotate"/> must be true,
            <see cref="M:Northwoods.GoXam.Tool.DiagramTool.IsLeftButtonDown"/> must be true,
            and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/> must return a "Rotate" tool handle.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoActivate">
            <summary>
            Start rotation.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.Handle"/> to the result of calling <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/>;
            if it is null, this method does not actually activate this tool.
            If there is a rotate handle,
            this sets <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/>,
            computes the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.RotationPoint"/>,
            remembers the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.OriginalAngle"/>,
            starts a transaction (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>),
            and sets <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoDeactivate">
            <summary>
            This stops the current edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>).
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoCancel">
            <summary>
            Restore the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.OriginalAngle"/> of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.RotatingTool.DoRotate(System.Double)"/> with a new angle determined by the mouse point.
            </summary>
            <remarks>
            This determines a new angle by calling
            <see cref="M:Northwoods.GoXam.Tool.RotatingTool.ComputeRotate(System.Windows.Point)"/> with the latest mouse point.
            The resulting angle is passed to <see cref="M:Northwoods.GoXam.Tool.RotatingTool.DoRotate(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoMouseUp">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.RotatingTool.DoRotate(System.Double)"/> with an angle based on the most recent mouse point
            and raise an "object rotated" event before stopping the tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.DoRotate(System.Double)">
            <summary>
            Change the angle of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/>.
            </summary>
            <param name="newangle">the new angle, in degrees</param>
            <remarks>
            This is called within a "Rotate" transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RotatingTool.ComputeRotate(System.Windows.Point)">
            <summary>
            Compute the new angle given a <c>Point</c>.
            </summary>
            <param name="newPoint">a <c>Point</c> in model coordinates</param>
            <returns>the new angle, in degrees</returns>
            <remarks>
            If the angle is close (by <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon"/> degrees)
            to a multiple of <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> degrees, make it
            exactly that multiple.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple">
            <summary>
            Gets or sets the preferred angles for the selected element.
            </summary>
            <value>
            The default value is 45 degrees, meaning that angles that are multiples
            of 45 degrees are automatically preferred, if the actual angle is
            close to that multiple.
            The closeness is determined by the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon"/> property.
            A value of zero for <c>SnapAngleMultiple</c> results in no snapping at all.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleEpsilon">
            <summary>
            Gets or sets the closeness to a desired angle at which the angle is "snapped to".
            </summary>
            <value>
            The default value is 2 degrees, meaning that any angle within 2 degrees
            of a multiple of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> automatically
            snaps to that multiple.
            Values are limited to half of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/>;
            such values restrict user selected angles only to exact multiples of
            <see cref="P:Northwoods.GoXam.Tool.RotatingTool.SnapAngleMultiple"/> -- no other angles between them.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.Handle">
            <summary>
            Gets or sets the current rotate handle that is being dragged.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement">
            <summary>
            Gets or sets the current <c>FrameworkElement</c> that is being rotated.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.AdornedNode">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Node"/> that the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/> is in.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.RotationPoint">
            <summary>
            Gets or sets the point around which the element is being rotated.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RotatingTool.OriginalAngle">
            <summary>
            Gets or sets the angle of the <see cref="P:Northwoods.GoXam.Tool.RotatingTool.AdornedElement"/>
            when the user started rotating.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ReshapingBaseTool">
            <summary>
            The <c>ReshapingBaseTool</c> abstract class is used to interactively change the shape of a <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <remarks>
            Currently only one tool subclass is defined: <see cref="T:Northwoods.GoXam.Tool.LinkReshapingTool"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ReshapingBaseTool.ReshapeBehaviorProperty">
            <summary>
            Identifies the <c>ReshapeBehavior</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ReshapingBaseTool.GetReshapeBehavior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <c>ReshapeBehavior</c> attached dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ReshapingBaseTool.SetReshapeBehavior(System.Windows.DependencyObject,Northwoods.GoXam.Tool.ReshapeBehavior)">
            <summary>
            Sets the value of the <c>ReshapeBehavior</c> attached dependency property.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ReshapingBaseTool.Handle">
            <summary>
            Gets or sets the current reshape handle that is being dragged.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ReshapingBaseTool.AdornedElement">
            <summary>
            Gets or sets the current <c>FrameworkElement</c> that is being reshaped.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.LinkReshapingTool">
            <summary>
            The <c>LinkReshapingTool</c> is used to interactively change the route of a <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            This tool makes use of an <see cref="T:Northwoods.GoXam.Adornment"/>, shown when the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.AdornedLink"/> is selected,
            that includes some number of reshape handles.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            Show an <see cref="T:Northwoods.GoXam.Adornment"/> with reshape handles at each of the interesting points of the link's <see cref="T:Northwoods.GoXam.Route"/>,
            if the link is selected and visible and if <see cref="M:Northwoods.GoXam.Part.CanReshape"/> is true.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            This produces reshape handles at each point of the route, starting with
            <see cref="P:Northwoods.GoXam.Route.FirstPickIndex"/> and ending with
            <see cref="P:Northwoods.GoXam.Route.LastPickIndex"/>.
            Depending on whether <see cref="P:Northwoods.GoXam.Route.Orthogonal"/> is true,
            this will call <see cref="M:Northwoods.GoXam.Tool.ReshapingBaseTool.SetReshapeBehavior(System.Windows.DependencyObject,Northwoods.GoXam.Tool.ReshapeBehavior)"/> and the <c>Cursor</c> to
            limit the directions in which the user may drag the handle.
            </para>
            <para>
            You can change the template used to create each reshape handle by setting <see cref="P:Northwoods.GoXam.Link.LinkReshapeHandleTemplate"/>.
            If that property is null, this uses a default template produces a small square.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.CanStart">
            <summary>
            The <see cref="T:Northwoods.GoXam.Tool.LinkReshapingTool"/> may run when there is a mouse-down event on a reshape handle.
            </summary>
            <returns></returns>
            <remarks>
            For this tool to be runnable, the diagram must be modifiable
            (not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>),
            <see cref="P:Northwoods.GoXam.Diagram.AllowReshape"/> must be true,
            <see cref="M:Northwoods.GoXam.Tool.DiagramTool.IsLeftButtonDown"/> must be true,
            and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/> must return a reshape tool handle.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoActivate">
            <summary>
            Start reshaping.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Tool.ReshapingBaseTool.Handle"/> to the result of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/>;
            if it is null, this method does not actually activate this tool.
            If there is a reshape handle,
            this sets <see cref="P:Northwoods.GoXam.Tool.ReshapingBaseTool.AdornedElement"/> and <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.HandleIndex"/>,
            remembers the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.OriginalPoint"/>,
            starts a transaction (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>),
            and sets <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoDeactivate">
            <summary>
            This stops the current edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>).
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoCancel">
            <summary>
            Restore the modified point to be the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.OriginalPoint"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoReshape(System.Windows.Point)"/> with a new point determined by the mouse.
            </summary>
            <remarks>
            This determines a new reshape point by calling
            <see cref="M:Northwoods.GoXam.Tool.LinkReshapingTool.ComputeReshape(System.Windows.Point)"/> with the latest mouse point.
            The resulting point is passed to <see cref="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoReshape(System.Windows.Point)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoMouseUp">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoReshape(System.Windows.Point)"/> with a point based on the most recent mouse point,
            and raise a "link reshaped" event before stopping the tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoReshape(System.Windows.Point)">
            <summary>
            Modify the <see cref="T:Northwoods.GoXam.Route"/> of the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.AdornedLink"/> to a new point,
            considering also which reshape handle is being dragged and whether the route
            is <see cref="P:Northwoods.GoXam.Route.Orthogonal"/>.
            </summary>
            <param name="newPoint"></param>
            <remarks>
            If the <see cref="T:Northwoods.GoXam.Route"/> is <see cref="P:Northwoods.GoXam.Route.Orthogonal"/> this
            modifies the adjacent points as well in order to keep adjacent segments orthogonal.
            For handles that are near either end of the route, the movement may be constrained
            to be only vertical or only horizontal, in order to maintain orthogonality.
            The decision is based on the value of <see cref="M:Northwoods.GoXam.Tool.ReshapingBaseTool.GetReshapeBehavior(System.Windows.DependencyObject)"/>
            on the <see cref="P:Northwoods.GoXam.Tool.ReshapingBaseTool.Handle"/>.
            This method is called during a "ReshapeLink" transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkReshapingTool.ComputeReshape(System.Windows.Point)">
            <summary>
            Compute the new <c>Point</c> for reshaping a point in the <see cref="T:Northwoods.GoXam.Route"/>.
            </summary>
            <param name="newPoint"></param>
            <returns></returns>
            <remarks>
            The value of <see cref="M:Northwoods.GoXam.Tool.ReshapingBaseTool.GetReshapeBehavior(System.Windows.DependencyObject)"/> on the <see cref="P:Northwoods.GoXam.Tool.ReshapingBaseTool.Handle"/> determines
            what reshape constraints exist on that handle, for the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.HandleIndex"/> point of the <see cref="T:Northwoods.GoXam.Route"/>.
            If there are no reshape constraints, this just returns the value of <paramref name="newPoint"/>.
            If the value is <see cref="F:Northwoods.GoXam.Tool.ReshapeBehavior.Vertical"/>, the Y coordinate may vary
            according to the value provided by <paramref name="newPoint"/>, but the X coordinate remains the same.
            If the value is <see cref="F:Northwoods.GoXam.Tool.ReshapeBehavior.Horizontal"/>, the X coordinate may change,
            but not the Y value.
            If the value is <see cref="F:Northwoods.GoXam.Tool.ReshapeBehavior.None"/>, the route point may not move.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkReshapingTool.AdornedLink">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Link"/> that the <see cref="P:Northwoods.GoXam.Tool.ReshapingBaseTool.AdornedElement"/> is in.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkReshapingTool.OriginalPoint">
            <summary>
            Gets or sets the point of the link's route that is being moved.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkReshapingTool.HandleIndex">
            <summary>
            Gets or sets the index of the handle being dragged.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkReshapingTool.OriginalPoints">
            <summary>
            Gets or sets a copy of the <see cref="P:Northwoods.GoXam.Tool.LinkReshapingTool.AdornedLink"/>'s route's initial array of Points.
            </summary>
            <value>
            This is null until it is set by <see cref="M:Northwoods.GoXam.Tool.LinkReshapingTool.DoActivate"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ReshapeBehavior">
            <summary>
            This enumeration lists the permissible drag directions for a reshape handle.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ReshapeBehavior.None">
            <summary>
            Disallow dragging.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ReshapeBehavior.Horizontal">
            <summary>
            Allow only horizontal (left-and-right) dragging.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ReshapeBehavior.Vertical">
            <summary>
            Allow only vertical (up-and-down) dragging.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ReshapeBehavior.All">
            <summary>
            Allow dragging in any direction.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DragZoomingTool">
            <summary>
            The <c>DragZoomingTool</c> lets the user zoom into a diagram by stretching a box
            to indicate the new contents of the diagram's viewport (the area of the
            model shown by the <see cref="T:Northwoods.GoXam.DiagramPanel"/>).
            </summary>
            <remarks>
            <para>
            The diagram that is zoomed by this tool is specified by the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram"/> property.
            If the value is null, the tool zooms its own <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Diagram"/>.
            </para>
            <para>
            Although this is a mouse-move tool class handling a mouse-drag in the background, and there is a
            <see cref="P:Northwoods.GoXam.Diagram.DragZoomingTool"/> property,
            no such tool is installed initially -- that property is null.
            You can install this tool by creating an instance of it and setting that diagram property.
            However, although it <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.CanStart"/>, the <see cref="T:Northwoods.GoXam.Tool.DragSelectingTool"/> and
            the <see cref="T:Northwoods.GoXam.Tool.PanningTool"/> are two other background-mouse-drag tools that are normally installed
            in a <see cref="T:Northwoods.GoXam.Diagram"/> and will take precedence over this tool.
            </para>
            <para>
            To make this mode-less tool effective, you can remove the other two background mouse-dragging tools
            and install this <c>DragZoomingTool</c> in XAML:
            <code>
              &lt;go:Diagram ...
                  DragSelectingTool="{x:Null}"
                  PanningTool="{x:Null}" &gt;
                &lt;go:Diagram.DragZoomingTool&gt;
                  &lt;go:DragZoomingTool /&gt;
                &lt;/go:Diagram.DragZoomingTool&gt;
              &lt;/go:Diagram&gt;
            </code>
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool does not edit the model.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragZoomingTool.BoxTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.BoxTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagramProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.CanStart">
            <summary>
            This tool can run when there has been a mouse-drag, far enough away not to be a click.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoActivate">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.CreateBox"/> to create the "rubber-band" box,
            remember it as the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.Box"/> property,
            and add it to the diagram's <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.CreateBox">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.Node"/> using <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.BoxTemplate"/> as its <c>DataTemplate</c>.
            </summary>
            <returns>a <see cref="T:Northwoods.GoXam.Node"/> that is not bound to data</returns>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.BoxTemplate"/> is null, this uses the default template
            named "DefaultDragZoomingBoxTemplate".
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoDeactivate">
            <summary>
            Cleanup any <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.Box"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoMouseMove">
            <summary>
            While dragging the mouse, position and size the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.Box"/>
            according to the bounds produced by <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ComputeBoxBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.DoMouseUp">
            <summary>
            Upon the mouse-up, call <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ZoomToRect(System.Windows.Rect)"/>
            with the value of <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ComputeBoxBounds"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.ComputeBoxBounds">
            <summary>
            This just returns a <c>Rect</c> stretching from the
            mouse-down point to a point guided by the current mouse point
            and the aspect ratio of the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragZoomingTool.ZoomToRect(System.Windows.Rect)">
            <summary>
            This method is called to zoom the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram"/>
            to match the given rectangle.
            </summary>
            <param name="brect">a rectangle in model coordinates</param>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram"/>'s <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Scale"/> and <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> properties
            according to the <paramref name="brect"/> rectangle argument.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragZoomingTool.BoxTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> that renders the "rubber-band" box
            that the user draws to specify the zoom area.
            </summary>
            <value>
            By default this is null, which causes <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.CreateBox"/>
            to use a default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragZoomingTool.ZoomedDiagram">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Diagram"/> that will be scaled and scrolled
            according to the value of <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ComputeBoxBounds"/> by <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ZoomToRect(System.Windows.Rect)"/>.
            </summary>
            <value>
            By default this is null, which causes <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.ZoomToRect(System.Windows.Rect)"/> to operate on the current <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Diagram"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragZoomingTool.Box">
            <summary>
            Gets or sets the temporary node acting as the "rubber-band" box
            that the user is stretching with a mouse drag.
            </summary>
            <value>
            This is set by <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.DoActivate"/> to the node produced by <see cref="M:Northwoods.GoXam.Tool.DragZoomingTool.CreateBox"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ResizingTool">
            <summary>
            The <c>ResizingTool</c> is used to interactively change the size of an element.
            </summary>
            <remarks>
            <para>
            This tool allows the user to resize an element of the selected part.
            Normally this works with <see cref="T:Northwoods.GoXam.Node"/>s; it does not make sense for <see cref="T:Northwoods.GoXam.Group"/>s
            and <see cref="T:Northwoods.GoXam.Link"/>s.
            </para>
            <para>
            You can limit the permitted minimum and maximum dimensions by setting <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MinSize"/> and <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MaxSize"/>.
            For example,
            <code>
              &lt;go:Diagram.ResizingTool&gt;
                &lt;go:ResizingTool MinSize="10 10" MaxSize="100 200"/&gt;
              &lt;/go:Diagram.ResizingTool&gt;
            </code>
            will make sure every interactive resizing operation results in the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>
            in having a width between 10 and 100 and in having a height between 10 and 200.
            Furthermore,
            <code>
              &lt;go:Diagram.ResizingTool&gt;
                &lt;go:ResizingTool MinSize="NaN 10" MaxSize="NaN 200"/&gt;
              &lt;/go:Diagram.ResizingTool&gt;
            </code>
            will restrict the width to be whatever the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>'s original width was,
            whereas the height may be varied between 10 and 200.
            </para>
            <para>
            The resizing will also respect the <c>FrameworkElement</c> properties: <c>MinWidth</c>,
            <c>MaxWidth</c>, <c>MinHeight</c>, and <c>MaxHeight</c>, that are one the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>.
            </para>
            <para>
            You can also limit the width and/or height to be multiples of a particular size by
            setting <see cref="P:Northwoods.GoXam.Tool.ResizingTool.CellSize"/>.  If either or both of these values are <c>NaN</c>,
            as they are by default,
            it will get the values from the node being resized: <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/>.
            </para>
            <para>
            If either or both of the width and height are still <c>NaN</c>,
            it will look for a snapper node behind the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/>
            (a node that has <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> true)
            and then use its <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/>.
            If it cannot find any snapper node, it uses the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/> if the diagram's
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> is true.
            </para>
            <para>
            This tool makes use of an <see cref="T:Northwoods.GoXam.Adornment"/>, shown when the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/> is selected,
            that includes some number of resize handles.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ResizingTool.MaxSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MaxSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ResizingTool.MinSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MinSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ResizingTool.CellSizeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.CellSize"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            Show an <see cref="T:Northwoods.GoXam.Adornment"/> with resize handles at points along the edge of bounds of the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>,
            if the node is selected and visible and if <see cref="M:Northwoods.GoXam.Part.CanResize"/> is true.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            First this finds the element in the visual tree of the <paramref name="part"/> that should
            get the resize adornment and that the user will be able to resize interactively.
            It finds the element that has the <see cref="P:Northwoods.GoXam.Part.ResizeElementName"/> property of the part.
            If the <see cref="P:Northwoods.GoXam.Part.ResizeElementName"/> property is null, as it is by default, it uses
            the part's <see cref="P:Northwoods.GoXam.Part.SelectionElement"/>.
            </para>
            <para>
            It then constructs the adornment template, associating it with the chosen resize element.
            </para>
            <para>
            You can change the template used to create the adornment by setting <see cref="P:Northwoods.GoXam.Part.ResizeAdornmentTemplate"/>.
            If that property is null, this uses a default template with eight resize handles
            at the four corners and at the middles of the four sides.
            </para>
            <para>
            This only gives a resize adornment to <see cref="T:Northwoods.GoXam.Node"/>s, not to <see cref="T:Northwoods.GoXam.Link"/>s.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.CanStart">
            <summary>
            The <see cref="T:Northwoods.GoXam.Tool.ResizingTool"/> may run when there is a mouse-down event on a resize handle.
            </summary>
            <returns></returns>
            <remarks>
            For this tool to be runnable, the diagram must be modifiable
            (not <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/>),
            <see cref="P:Northwoods.GoXam.Diagram.AllowResize"/> must be true,
            <see cref="M:Northwoods.GoXam.Tool.DiagramTool.IsLeftButtonDown"/> must be true,
            and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/> must return a "Resize" tool handle.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoActivate">
            <summary>
            Start resizing.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.Handle"/> to the result of <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/>;
            if it is null, this method does not actually activate this tool.
            If there is a resize handle,
            this sets <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>,
            remembers the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds"/> and <see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalLocation"/>,
            starts a transaction (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>),
            and sets <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to true.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoDeactivate">
            <summary>
            This stops the current edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>).
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoCancel">
            <summary>
            Restore the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds"/> of the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.ResizingTool.DoResize(System.Windows.Rect)"/> with a new bounds determined by the mouse point.
            </summary>
            <remarks>
            This determines a new resize bounds by calling
            <see cref="M:Northwoods.GoXam.Tool.ResizingTool.ComputeResize(System.Windows.Point,Northwoods.GoXam.Spot,System.Windows.Size,System.Windows.Size,System.Boolean)"/> with the latest mouse point
            limited by <see cref="M:Northwoods.GoXam.Tool.ResizingTool.ComputeMinSize"/> and <see cref="M:Northwoods.GoXam.Tool.ResizingTool.ComputeMaxSize"/>.
            The resulting rectangle is passed to <see cref="M:Northwoods.GoXam.Tool.ResizingTool.DoResize(System.Windows.Rect)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoMouseUp">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.ResizingTool.DoResize(System.Windows.Rect)"/> with a rectangle based on the most recent mouse point,
            and raise an "object resized" event before stopping the tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.DoResize(System.Windows.Rect)">
            <summary>
            Change the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>'s <c>Width</c> and/or <c>Height</c>,
            and perhaps the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/>'s <see cref="P:Northwoods.GoXam.Node.Location"/>,
            given a new rectangular bounds for the adorned element.
            </summary>
            <param name="newr"></param>
            <remarks>
            This is called within a "Resize" transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.ComputeResize(System.Windows.Point,Northwoods.GoXam.Spot,System.Windows.Size,System.Windows.Size,System.Boolean)">
            <summary>
            Given a <c>Spot</c> in the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds"/> and a new <c>Point</c>,
            compute the new <c>Rect</c>.
            </summary>
            <param name="newPoint">a Point in model coordinates</param>
            <param name="spot">The <see cref="T:Northwoods.GoXam.Spot"/> in the rectangular bounds for which the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.Handle"/> is being dragged</param>
            <param name="min">the computed rectangle must be at least as large as these dimensions</param>
            <param name="max">the computed rectangle must be no larger than these dimensions</param>
            <param name="reshape">whether the aspect ratio of the rectangle may change</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.ComputeMinSize">
            <summary>
            The effective minimum resizing size is the maximum of <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MinSize"/> and the
            <c>FrameworkElement</c>'s <c>MinWidth</c> and <c>MinHeight</c>.
            </summary>
            <returns>the desired minimum <c>Size</c> during resizing</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.ComputeMaxSize">
            <summary>
            The effective maximum resizing size is the minimum of <see cref="P:Northwoods.GoXam.Tool.ResizingTool.MaxSize"/> and the
            <c>FrameworkElement</c>'s <c>MaxWidth</c> and <c>MaxHeight</c>.
            </summary>
            <returns>the desired maximum <c>Size</c> during resizing</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ResizingTool.ComputeCellSize">
            <summary>
            The size should be a multiple of the value returned by this method.
            </summary>
            <returns>
            The <see cref="P:Northwoods.GoXam.Tool.ResizingTool.CellSize"/>, unless one or both of its width and height are <c>Double.NaN</c> or zero.
            If that is the case, it uses the width and/or height from the node's <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/>.
            But if one or both of the width and height are still <c>Double.NaN</c> or zero,
            it searches for a grid snapping node behind the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/>,
            one that is <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/>,
            and uses its <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/>.
            If it cannot find such a grid snapping node, or one or both of the width and height are <c>NaN</c>,
            it uses the diagram's <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/>
            if the diagram is <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/>.
            Finally, it defaults to 1x1.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.MaxSize">
            <summary>
            Gets or sets the maximum size of the selected element.
            </summary>
            <value>
            The default value is 9999 x 9999.
            The width and height must not be negative.
            A width of <c>Double.NaN</c> uses the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>'s original width;
            a height of <c>Double.NaN</c> uses its original height (<see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds"/>).
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.MinSize">
            <summary>
            Gets or sets the minimum size of the selected element.
            </summary>
            <value>
            The default value is 1 x 1.
            The width and height must not be negative or infinity.
            A width of <c>Double.NaN</c> uses the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>'s original width;
            a height of <c>Double.NaN</c> uses its original height (<see cref="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds"/>).
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.CellSize">
            <summary>
            Gets or sets the cell size of the selected element, so that resizing is limited to multiples of the cell size.
            </summary>
            <value>
            The default value is NaN x NaN.
            A value of NaN means that <see cref="M:Northwoods.GoXam.Tool.ResizingTool.ComputeCellSize"/>
            will look at its <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/>'s <see cref="P:Northwoods.GoXam.Part.ResizeCellSize"/>.
            Failing to find a positive number, it will look for a node underneath it
            that is <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> to use its <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/>,
            or for the diagram if it is <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/>
            to use its <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/>.
            The width and height must not be negative or infinity.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.Handle">
            <summary>
            Gets or sets the current resize handle that is being dragged.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement">
            <summary>
            Gets or sets the current <c>FrameworkElement</c> that is being resized.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Node"/> that the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/> is in.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.OriginalBounds">
            <summary>
            Gets or sets the bounds, in model coordinates, of the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedElement"/>
            when the user started resizing.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ResizingTool.OriginalLocation">
            <summary>
            Gets or sets the location, in model coordinates, of the <see cref="P:Northwoods.GoXam.Tool.ResizingTool.AdornedNode"/>
            when the user started resizing.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.PanningTool">
            <summary>
            The <c>PanningTool</c> supports manual panning, where the user
            can shift the <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            by dragging the mouse.
            </summary>
            <remarks>
            <para>
            This tool is a standard mouse-move tool.
            Although <see cref="M:Northwoods.GoXam.Tool.PanningTool.CanStart"/> is frequently able to return true,
            this tool is normally not run because other mouse-move tools will take precedence.
            In particular, the <see cref="T:Northwoods.GoXam.Tool.DragSelectingTool"/> will run when the
            user drags in the diagram's background.
            Disable or remove the <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/>
            to enable background panning.
            Disable diagram selection or dragging to enable panning everywhere in the diagram.
            </para>
            <para>
            For example, you can enable background panning by removing the drag-selecting tool:
            <code>
              &lt;go:Diagram ...
                  DragSelectingTool="{x:Null}" &gt;
              &lt;/go:Diagram&gt;
            </code>
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool does not edit the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.CanStart">
            <summary>
            This tool can run when the diagram allows scrolling and
            the mouse has been dragged far enough away from the mouse-down point
            to avoid being a click.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoActivate">
            <summary>
            Establish a scroll cursor and remember the <see cref="P:Northwoods.GoXam.Tool.PanningTool.OriginalPosition"/>
            of the <see cref="T:Northwoods.GoXam.DiagramPanel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoDeactivate">
            <summary>
            Restore the diagram's cursor.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoCancel">
            <summary>
            Reset the <see cref="T:Northwoods.GoXam.DiagramPanel"/>'s <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoMouseMove">
            <summary>
            Modify the <see cref="T:Northwoods.GoXam.Diagram"/>'s <see cref="P:Northwoods.GoXam.Diagram.Panel"/>'s
            <see cref="P:Northwoods.GoXam.DiagramPanel.Position"/> according to how much the mouse has moved.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.PanningTool.DoMouseUp">
            <summary>
            Finish scrolling the diagram.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ClickCreatingTool">
            <summary>
            The <c>ClickCreatingTool</c> lets the user create a node by clicking where they want the new node to be.
            </summary>
            <remarks>
            <para>
            Normally this is a "mouse-up" mode-less tool.
            It will not run until you have set the <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeData"/> property.
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool conducts a model edit in the <see cref="M:Northwoods.GoXam.Tool.ClickCreatingTool.InsertNode(System.Windows.Point)"/> method.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeDataProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeData"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.ClickCreatingTool.DoubleClickProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.DoubleClick"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ClickCreatingTool.CanStart">
            <summary>
            This tool can run when the diagram supports inserting nodes,
            the model is modifiable, and there is a click (or a double-click
            if <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.DoubleClick"/> is true).
            </summary>
            <returns></returns>
            <remarks>
            <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeData"/> must be non-null, too.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ClickCreatingTool.DoMouseUp">
            <summary>
            Upon a click, call <see cref="M:Northwoods.GoXam.Tool.ClickCreatingTool.InsertNode(System.Windows.Point)"/> and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ClickCreatingTool.InsertNode(System.Windows.Point)">
            <summary>
            Create a node by adding a copy of the <see cref="P:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeData"/>
            to the diagram's model, and assign its <see cref="P:Northwoods.GoXam.Node.Location"/>
            to be the given point.
            </summary>
            <param name="loc"></param>
            <remarks>
            This also selects the new node and raises the "object created" event.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ClickCreatingTool.PrototypeData">
            <summary>
            Gets or sets a data value for a new node.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ClickCreatingTool.DoubleClick">
            <summary>
            Gets or sets whether this tool requires a double-click to create a node at the click point.
            </summary>
            <value>
            The default value is false -- a single click is sufficient to insert a new node.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DragSelectingTool">
            <summary>
            The <c>DragSelectingTool</c> lets the user select multiple parts within
            a rectangular area.
            </summary>
            <remarks>
            <para>
            This is a standard mouse-move tool.
            </para>
            <para>
            For example, you can change the selection policy in XAML by:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.DragSelectingTool&gt;
                  &lt;go:DragSelectingTool Include="Intersects" /&gt;
                &lt;/go:Diagram.DragSelectingTool&gt;
              &lt;/go:Diagram&gt;
            </code>
            Or you can customize the default <see cref="P:Northwoods.GoXam.Diagram.DragSelectingTool"/> in code:
            <code>
              myDiagram.DragSelectingTool.Include = SearchInclusion.Intersects;
            </code>
            </para>
            <para>
            Selection occurs on a mouse up calling <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.SelectInRect(System.Windows.Rect)"/>
            with the value of <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.ComputeBoxBounds"/>.
            If you want real-time selection to occur during the drag:
            <code>
             public class RealtimeDragSelectingTool : DragSelectingTool {
               public override void DoMouseMove() {
                 base.DoMouseMove();
                 if (this.Active) SelectInRect(ComputeBoxBounds());
               }
             }
            </code>
            and install in XAML by:
            <code>
              &lt;go:Diagram ...&gt;
                &lt;go:Diagram.DragSelectingTool&gt;
                  &lt;local:RealtimeDragSelectingTool Include="Intersects" /&gt;
                &lt;/go:Diagram.DragSelectingTool&gt;
              &lt;/go:Diagram&gt;
            </code>
            Or you can install in code by:
            <code>
              myDiagram.DragSelectingTool = new RealtimeDragSelectingTool() { Include = SearchInclusion.Intersects };
            </code>
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool does not edit the model.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragSelectingTool.BoxTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.BoxTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragSelectingTool.IncludeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Include"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.CanStart">
            <summary>
            This tool can run when the diagram allows selection,
            there has been a mouse-drag (far enough away not to be a click),
            and there is no selectable part at the mouse-down point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoStart">
            <summary>
            Capture the mouse when starting this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoActivate">
            <summary>
            Call <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.CreateBox"/> to create the "rubber-band" box,
            remember it as the <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Box"/> property,
            and add it to the diagram's <see cref="T:Northwoods.GoXam.Model.PartsModel"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.CreateBox">
            <summary>
            Create a <see cref="T:Northwoods.GoXam.Node"/> using <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.BoxTemplate"/> as its <c>DataTemplate</c>.
            </summary>
            <returns></returns>
            <remarks>
            If <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.BoxTemplate"/> is null, this uses the default template
            named "DefaultDragSelectingBoxTemplate".
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoDeactivate">
            <summary>
            Cleanup any <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Box"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoStop">
            <summary>
            Release the mouse capture when stopping this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoMouseMove">
            <summary>
            While dragging the mouse, position and size the <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Box"/>
            according to the bounds produced by <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.ComputeBoxBounds"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.DoMouseUp">
            <summary>
            Upon the mouse-up, call <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.SelectInRect(System.Windows.Rect)"/>
            with the value of <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.ComputeBoxBounds"/>
            and stop this tool.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.ComputeBoxBounds">
            <summary>
            This just returns a <c>Rect</c> stretching from the
            mouse-down point to the current mouse point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DragSelectingTool.SelectInRect(System.Windows.Rect)">
            <summary>
            This method is called to select some parts, governed by the value of <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Include"/>.
            </summary>
            <param name="r"></param>
            <remarks>
            The normal behavior is to set the diagram's selection collection to only those parts
            in the given rectangle <paramref name="r"/> according to the <see cref="P:Northwoods.GoXam.Tool.DragSelectingTool.Include"/> policy.
            However, if the Shift key modifier was used, no parts are deselected --
            this adds to the selection the parts in the rectangle not already selected.
            If the Control key modifier was used, this toggles the selectedness of the parts in the rectangle.
            If the Control key and Shift key modifiers were both used, this deselects the parts in the rectangle.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragSelectingTool.BoxTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> that renders the "rubber-band" box
            that the user draws to specify the selection area.
            </summary>
            <value>
            By default this is null, which causes <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.CreateBox"/>
            to use a default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragSelectingTool.Include">
            <summary>
            Gets or sets the conditions under which parts are selected.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.SearchInclusion.Inside"/> --
            to be selected the part must be wholly inside the selection box.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DragSelectingTool.Box">
            <summary>
            Gets or sets the temporary node acting as the "rubber-band" box
            that the user is stretching with a mouse drag.
            </summary>
            <value>
            This is set by <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.DoActivate"/> to the node produced by <see cref="M:Northwoods.GoXam.Tool.DragSelectingTool.CreateBox"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.LinkingBaseTool">
            <summary>
            This abstract class is the base class for <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/> and <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>.
            </summary>
            <remarks>
            <para>
            This class includes properties for defining and accessing any temporary nodes and temporary link
            that are used during any linking operation, as well as access to the existing diagram's
            nodes and link.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.#ctor">
            <summary>
            This does common initialization for the linking tools.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingBaseTool.PortGravityProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.PortGravity"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLinkTemplateProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLinkTemplate"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStart">
            <summary>
            If needed, call <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.CreateTemporaryNode(System.Boolean)"/> and <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.CreateTemporaryLink"/>,
            and capture the mouse.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStop">
            <summary>
            Release the mouse capture and clear out any temporary state.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.CreateTemporaryNode(System.Boolean)">
            <summary>
            Construct a <see cref="T:Northwoods.GoXam.Node"/> to act as a temporary node.
            </summary>
            <param name="toend"></param>
            <returns>
            an unbound <see cref="T:Northwoods.GoXam.Node"/> defined by the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplate"/>,
            or if that is null, by the default template named "DefaultTemporaryNodeTemplate".
            </returns>
            <remarks>
            The node should be put in the "Tool" layer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.CreateTemporaryLink">
            <summary>
            Construct a <see cref="T:Northwoods.GoXam.Link"/> to act as a temporary link.
            </summary>
            <returns></returns>
            <returns>
            an unbound <see cref="T:Northwoods.GoXam.Link"/> defined by the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLinkTemplate"/>,
            or if that is null, by the default template named "DefaultTemporaryLinkTemplate".
            </returns>
            <remarks>
            The link should be put in the "Tool" layer.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.CopyPortProperties(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Make a temporary port look and act like a real one.
            </summary>
            <param name="realnode"></param>
            <param name="realport"></param>
            <param name="tempnode"></param>
            <param name="tempport"></param>
            <param name="toend"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            Reset temporary port properties to neutral values when there is no target port.
            </summary>
            <param name="tempnode"></param>
            <param name="tempport"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoMouseMove">
            <summary>
            Mouse movement results in the temporary node moving to where the valid <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TargetPort"/> is located,
            or to where the mouse is if there is no valid target port nearby.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.FindTargetPort(System.Boolean)"/> to update the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TargetPort"/>
            given the new mouse point.
            If a valid target port is found, this calls <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.CopyPortProperties(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Boolean)"/> to move the
            temporary node/port and make them appear like the target node/port.
            If no valid target port is found, this calls <set cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.SetNoTargetPortProperties(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>
            to move the temporary node to where the mouse currently is and to remove any node/port appearance.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.FindTargetPort(System.Boolean)">
            <summary>
            Find a port with which the user could complete a valid link.
            </summary>
            <param name="toend">true if looking for a "to" port</param>
            <returns>
            a <c>FrameworkElement</c> representing a valid port,
            or null if no such port is near the current mouse point (within <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.PortGravity"/> distance)
            </returns>
            <remarks>
            <para>
            This finds elements near to the current mouse point for which a valid link connection is possible.
            For example, when <paramref name="toend"/> is true, this looks for elements (i.e. "ports") in nodes that
            have <see cref="M:Northwoods.GoXam.Node.GetLinkableTo(System.Windows.DependencyObject)"/> return true and for which <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidTo(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> is true.
            </para>
            <para>
            For each port element found, this calls <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidLink(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> to find out if a link between
            the original node/port and the found node/port would be valid.
            The result is saved in the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.ValidPortsCache"/> for faster decisions later during
            the operation of this tool.
            The closest valid port is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidFrom(Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            This predicate is true if it is permissible to connect a link from a given node/port.
            </summary>
            <param name="fromnode"></param>
            <param name="fromport"></param>
            <returns>
            False if the <paramref name="fromnode"/> is in a <see cref="T:Northwoods.GoXam.Layer"/> that does not <see cref="P:Northwoods.GoXam.Layer.AllowLink"/>.
            False if <see cref="M:Northwoods.GoXam.Node.GetLinkableFrom(System.Windows.DependencyObject)"/> for the <paramref name="fromport"/> is either false or null.
            False if the number of links connected to the <paramref name="fromport"/> would exceed the <see cref="M:Northwoods.GoXam.Node.GetLinkableMaximum(System.Windows.DependencyObject)"/> value.
            Otherwise true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidTo(Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            This predicate is true if it is permissible to connect a link to a given node/port.
            </summary>
            <param name="tonode"></param>
            <param name="toport"></param>
            <returns>
            False if the <paramref name="tonode"/> is in a <see cref="T:Northwoods.GoXam.Layer"/> that does not <see cref="P:Northwoods.GoXam.Layer.AllowLink"/>.
            False if <see cref="M:Northwoods.GoXam.Node.GetLinkableTo(System.Windows.DependencyObject)"/> for the <paramref name="toport"/> is either false or null.
            False if the number of links connected to the <paramref name="toport"/> would exceed the <see cref="M:Northwoods.GoXam.Node.GetLinkableMaximum(System.Windows.DependencyObject)"/> value.
            Otherwise true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsInSameNode(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            This predicate is true if both argument ports are in the same <see cref="T:Northwoods.GoXam.Node"/>.
            </summary>
            <param name="fromport"></param>
            <param name="toport"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsLinked(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            This predicate is true if there is a link in the model going from <paramref name="fromport"/> to <paramref name="toport"/>.
            </summary>
            <param name="fromport">a <c>FrameworkElement</c> representing the "from" port</param>
            <param name="toport">a <c>FrameworkElement</c> representing the "to" port</param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidLink(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement)">
            <summary>
            This predicate should be true when it is logically valid to connect a link from
            one node/port to another node/port.
            </summary>
            <param name="fromnode">the "from" <see cref="T:Northwoods.GoXam.Node"/></param>
            <param name="fromport">the "from" <c>FrameworkElement</c></param>
            <param name="tonode">the "to" <see cref="T:Northwoods.GoXam.Node"/> (perhaps the same as <paramref name="fromnode"/>)</param>
            <param name="toport">the "to" <c>FrameworkElement</c> (perhaps the same as <paramref name="fromport"/>)</param>
            <returns>
            False if <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidFrom(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> is false for the <paramref name="fromnode"/> and <paramref name="fromport"/>.
            False if <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidTo(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/> is false for the <paramref name="tonode"/> and <paramref name="toport"/>.
            False if <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsInSameNode(System.Windows.FrameworkElement,System.Windows.FrameworkElement)"/> is true unless <see cref="M:Northwoods.GoXam.Node.GetLinkableSelfNode(System.Windows.DependencyObject)"/> is true for both ports.
            False if <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsLinked(System.Windows.FrameworkElement,System.Windows.FrameworkElement)"/> is true unless <see cref="M:Northwoods.GoXam.Node.GetLinkableDuplicates(System.Windows.DependencyObject)"/> is true for both ports.
            False if trying to link to the link's own label node(s).
            False if <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/> or one of the model-specific <c>IsRelinkValid</c> methods is false,
            depending on whether <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/> is null (a new link) or non-null (a relink).
            Otherwise true.
            </returns>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.PortGravity">
            <summary>
            Gets or sets the distance at which link snapping occurs.
            </summary>
            <value>
            The default value is 100.0.  The value should be non-negative.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to render the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryFromNode"/>
            and <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryToNode"/>.
            </summary>
            <value>
            If the value is null, the linking tools use a default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLinkTemplate">
            <summary>
            Gets or sets the <c>DataTemplate</c> used to render the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLink"/>.
            </summary>
            <value>
            If the value is null, the linking tools use a default template.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink">
            <summary>
            Gets or sets the original <see cref="T:Northwoods.GoXam.Link"/> being reconnected by the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/>.
            </summary>
            <value>
            This should be non-null only when this tool is a <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/> and it has been activated.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalFromNode">
            <summary>
            Gets or sets the original node from which the link was connected.
            </summary>
            <value>
            For the <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/> this will be the starting port if drawing
            a new link in the forwards direction.
            For the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/> this will be the "from" node of the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalFromPort">
            <summary>
            Gets or sets the <c>FrameworkElement</c> that is the port from which the link was connected.
            </summary>
            <value>
            For the <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/> this will be the starting port if drawing
            a new link in the forwards direction.
            For the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/> this will be the "from" port of the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalToNode">
            <summary>
            Gets or sets the original node to which the link was connected.
            </summary>
            <value>
            For the <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/> this will be the starting node if drawing
            a new link in the backwards direction.
            For the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/> this will be the "to" node of the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalToPort">
            <summary>
            Gets or sets the <c>FrameworkElement</c> that is the port to which the link was connected.
            </summary>
            <value>
            For the <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/> this will be the starting port if drawing
            a new link in the backwards direction.
            For the <see cref="T:Northwoods.GoXam.Tool.RelinkingTool"/> this will be the "to" port of the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLink">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.GoXam.Link"/> that is shown while the user is drawing or reconnecting a link.
            </summary>
            <value>
            This value is constructed by the linking tools using the <see cref="F:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLinkTemplateProperty"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryFromNode">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.GoXam.Node"/> at the "from" end of the link.
            </summary>
            <value>
            This value is constructed by the linking tools using the <see cref="F:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplateProperty"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryFromPort">
            <summary>
            Gets the element representing the port for the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryFromNode"/>.
            </summary>
            <value>
            This assumes it is the node's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryToNode">
            <summary>
            Gets or sets the temporary <see cref="T:Northwoods.GoXam.Node"/> at the "to" end of the link.
            </summary>
            <value>
            This value is constructed by the linking tools using the <see cref="F:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryNodeTemplateProperty"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryToPort">
            <summary>
            Gets the element representing the port for the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryToNode"/>.
            </summary>
            <value>
            This assumes it is the node's <see cref="P:Northwoods.GoXam.Part.VisualElement"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.Forwards">
            <summary>
            Gets or sets whether the linking operation is in the forwards direction.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.ValidPortsCache">
            <summary>
            Gets or sets the dictionary used to keep track of ports for which a link may be valid.
            </summary>
            <remarks>
            This dictionary remembers the results of calls to <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidLink(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingBaseTool.TargetPort">
            <summary>
            Gets or sets a proposed <c>FrameworkElement</c> port for connecting a link.
            </summary>
            <value>
            Whether this is a "to" port or a "from" port depends on the direction
            in which the link is being drawn or reconnected.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.LinkingDirection">
            <summary>
            This enumeration lists the possible directions that the user may draw a new link
            using the <see cref="T:Northwoods.GoXam.Tool.LinkingTool"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingDirection.Either">
            <summary>
            Links may be drawn either forwards or backwards.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingDirection.ForwardsOnly">
            <summary>
            Links may be drawn forwards only (i.e. from "from" node to "to" node).
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingDirection.BackwardsOnly">
            <summary>
            Links may be drawn backwards only (i.e. from "to" node to "from" node).
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.LinkingTool">
            <summary>
            The <c>LinkingTool</c> lets a user draw a new <see cref="T:Northwoods.GoXam.Link"/> between two ports, using a mouse-drag operation.
            </summary>
            <remarks>
            <para>
            By default an instance of this tool is installed as a mouse-move tool in each <see cref="T:Northwoods.GoXam.Diagram"/>,
            as the value of <see cref="P:Northwoods.GoXam.Diagram.LinkingTool"/>.
            <see cref="M:Northwoods.GoXam.Tool.LinkingTool.CanStart"/> calls <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> to find a valid "port" element
            from which (or to which) the user may interactively draw a new link.
            <see cref="M:Northwoods.GoXam.Tool.LinkingTool.DoActivate"/> sets up a temporary link and two temporary nodes, one at the start port and one following the mouse.
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            <para>
            If you want to programmatically start a new user mouse-gesture to draw a new link
            from a given <c>FrameworkElement</c> that may be a "port" element or may be within
            the visual tree of a "port" element, set the <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartElement"/> property
            to let <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> find the real "port" element.
            Then start and activate this tool:
            <code>
              myDiagram.LinkingTool.StartElement = ...;
              myDiagram.CurrentTool = myDiagram.LinkingTool;
              myDiagram.CurrentTool.DoActivate();
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.LinkingTool.DirectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.LinkingTool.Direction"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.CanStart">
            <summary>
            This tool can run when the diagram allows linking, the model is modifiable,
            the left-button mouse drag has moved far enough away to not be click, and
            when <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> has returned a valid port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort">
            <summary>
            Return the element at the mouse-down point, if it is part of a node and if it is valid to link with it.
            </summary>
            <returns>
            If the <see cref="P:Northwoods.GoXam.Tool.LinkingTool.Direction"/> is <see cref="F:Northwoods.GoXam.Tool.LinkingDirection.Either"/> or <see cref="F:Northwoods.GoXam.Tool.LinkingDirection.ForwardsOnly"/>,
            this checks the element and its parent <see cref="T:Northwoods.GoXam.Node"/> by calling <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidFrom(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>.
            If the <see cref="P:Northwoods.GoXam.Tool.LinkingTool.Direction"/> is <see cref="F:Northwoods.GoXam.Tool.LinkingDirection.Either"/> or <see cref="F:Northwoods.GoXam.Tool.LinkingDirection.BackwardsOnly"/>,
            this checks the element and its parent <see cref="T:Northwoods.GoXam.Node"/> by calling <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.IsValidTo(Northwoods.GoXam.Node,System.Windows.FrameworkElement)"/>.
            In either case finding a matching port will return that port and set <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.Forwards"/> in the appropriate direction.
            Otherwise this will return null.
            </returns>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartElement"/> is non-null, it starts it search for a linkable "port" element at that element.
            The element may itself be a valid element to draw from or to.
            If <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartElement"/> is null, it finds the <c>FrameworkElement</c> at the
            <see cref="P:Northwoods.GoXam.Diagram.FirstMousePointInModel"/>.
            </para>
            <para>
            Both <see cref="M:Northwoods.GoXam.Tool.LinkingTool.CanStart"/> and <see cref="M:Northwoods.GoXam.Tool.LinkingTool.DoActivate"/> call this method,
            although the latter only does so if <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartPort"/> is null.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.DoActivate">
            <summary>
            Start the linking operation.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartPort"/> is already set, it uses that element as the starting port.
            If it is not set, this calls <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> and remembers the port as <see cref="P:Northwoods.GoXam.Tool.LinkingTool.StartPort"/>.
            </para>
            <para>
            It then starts a model edit and changes the cursor.
            Next it initializes and adds the <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryFromNode"/>, <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryToNode"/>,
            and <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TemporaryLink"/> to the diagram's <see cref="P:Northwoods.GoXam.Diagram.PartsModel"/>.
            The temporary nodes that are positioned and sized to be like the real (<see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalFromPort"/>
            and <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalToPort"/>) ports by calling <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.CopyPortProperties(Northwoods.GoXam.Node,System.Windows.FrameworkElement,Northwoods.GoXam.Node,System.Windows.FrameworkElement,System.Boolean)"/>.
            The temporary link connects the two temporary nodes, of course.
            </para>
            <para>
            The base <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStart"/> method starts mouse capture.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.DoDeactivate">
            <summary>
            Finishing the linking operation stops the model edit and resets the cursor.
            </summary>
            <remarks>
            The base <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStop"/> method cleans up the temporary nodes and links
            and releases the mouse capture.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.DoStop">
            <summary>
            Clean up tool state.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.LinkingTool.DoMouseUp">
            <summary>
            A mouse-up ends the linking operation; if there is a valid <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TargetPort"/> nearby,
            this calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/> to create a new link.
            </summary>
            <remarks>
            If a new link is created in the model, the corresponding <see cref="T:Northwoods.GoXam.Link"/> is selected in the diagram
            and the "link drawn" event is raised.
            In any case this stops the tool.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingTool.Direction">
            <summary>
            Gets or sets the direction in which new links may be drawn.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.GoXam.Tool.LinkingDirection.Either"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingTool.StartPort">
            <summary>
            Gets or sets the port element at which the linking operation started.
            </summary>
            <value>
            The default value is null.
            This is set by <see cref="M:Northwoods.GoXam.Tool.LinkingTool.DoActivate"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.LinkingTool.StartElement">
            <summary>
            Gets or sets the <c>FrameworkElement</c> at which <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> should start its search.
            </summary>
            <value>
            The default value is null.
            </value>
            <remarks>
            If you want to explicitly start a new user mouse-gesture to draw a new link
            from a given <c>FrameworkElement</c> that may be a "port" element or may be within
            the visual tree of a "port" element, set this property to that element
            to let <see cref="M:Northwoods.GoXam.Tool.LinkingTool.FindLinkablePort"/> find the real "port" element.
            Then start and activate this tool:
            <code>
              myDiagram.LinkingTool.StartElement = ...;
              myDiagram.CurrentTool = myDiagram.LinkingTool;
              myDiagram.CurrentTool.DoActivate();
            </code>
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Tool.RelinkingTool">
            <summary>
            The <c>RelinkingTool</c> allows the user to reconnect an existing <see cref="T:Northwoods.GoXam.Link"/>.
            </summary>
            <remarks>
            <para>
            By default an instance of this tool is installed as a mouse-down tool in each <see cref="T:Northwoods.GoXam.Diagram"/>,
            as the value of <see cref="P:Northwoods.GoXam.Diagram.RelinkingTool"/>.
            </para>
            <para>
            This tool makes use of two <see cref="T:Northwoods.GoXam.Adornment"/>s,
            each including a relink handle (one for each end of the link),
            shown when a link is selected.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.UpdateAdornments(Northwoods.GoXam.Part)">
            <summary>
            Show an <see cref="T:Northwoods.GoXam.Adornment"/> for each end of the <see cref="T:Northwoods.GoXam.Link"/> that
            the user may reconnect.
            </summary>
            <param name="part"></param>
            <remarks>
            <para>
            If the link and layer and diagram support relinking
            (<see cref="M:Northwoods.GoXam.Link.CanRelinkFrom"/> and/or <see cref="M:Northwoods.GoXam.Link.CanRelinkTo"/>),
            this creates <see cref="T:Northwoods.GoXam.Adornment"/>s
            using the <see cref="P:Northwoods.GoXam.Link.RelinkFromAdornmentTemplate"/> and/or
            <see cref="P:Northwoods.GoXam.Link.RelinkToAdornmentTemplate"/>.
            If the <c>DataTemplate</c> is null, a default template is used instead,
            "DefaultRelinkFromAdornmentTemplate" or "DefaultRelinkToAdornmentTemplate".
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.CanStart">
            <summary>
            This tool can run when the diagram allows relinking, the model is modifiable,
            and there is a relink handle at the mouse-down point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.DoActivate">
            <summary>
            Start the relinking operation.
            </summary>
            <remarks>
            <para>
            Find the relink handle by calling <see cref="M:Northwoods.GoXam.Tool.DiagramTool.FindToolHandleAt(System.Windows.Point,System.String)"/>
            looking for either the "RelinkFrom" handle or the "RelinkTo" handle,
            saving the result in <see cref="P:Northwoods.GoXam.Tool.RelinkingTool.Handle"/>.
            </para>
            <para>
            This starts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>)
            and sets the cursor.
            </para>
            <para>
            The value of <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.Forwards"/> is set
            depending on the category of relink handle found.
            The <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.OriginalLink"/> property and
            various "Original..." port and node properties are set too.
            The temporary nodes and temporary link are also initialized.
            </para>
            <para>
            The base <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStart"/> method starts mouse capture.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.DoDeactivate">
            <summary>
            Finishing the relinking operation stops the model edit and resets the cursor.
            </summary>
            <remarks>
            The base <see cref="M:Northwoods.GoXam.Tool.LinkingBaseTool.DoStop"/> method cleans up the temporary nodes and links
            and releases the mouse capture.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.DoStop">
            <summary>
            Clean up tool state.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.RelinkingTool.DoMouseUp">
            <summary>
            A mouse-up ends the relinking operation; if there is a valid <see cref="P:Northwoods.GoXam.Tool.LinkingBaseTool.TargetPort"/> nearby,
            this calls <see cref="M:Northwoods.GoXam.Model.IDiagramModel.RemoveLink(System.Object,System.Object,System.Object,System.Object)"/> to delete the old link, and
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.AddLink(System.Object,System.Object,System.Object,System.Object)"/> to create the replacement link.
            </summary>
            <remarks>
            The corresponding new <see cref="T:Northwoods.GoXam.Link"/> is selected in the diagram
            and the "link relinked" event is raised.
            In any case this stops the tool.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.RelinkingTool.Handle">
            <summary>
            Gets or sets the relinking tool handle that the user is using (dragging).
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ClickSelectingTool">
            <summary>
            The <c>ClickSelectingTool</c> selects and deselects objects upon a click.
            </summary>
            <remarks>
            <para>
            Normally this is the last "mouse-up" mode-less tool.
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool does not edit the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ClickSelectingTool.CanStart">
            <summary>
            This tool can run when the diagram allows selection and there was a click.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ClickSelectingTool.DoMouseUp">
            <summary>
            Upon a click, call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseSelect"/> and stop this tool.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DraggingTool">
            <summary>
            The <c>DraggingTool</c> is used to move or copy selected parts with the mouse.
            </summary>
            <remarks>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool conducts a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/> and <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StopTransaction"/>)
            while the tool is <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.CopiesEffectiveCollectionProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiesEffectiveCollection"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.InclusionsProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapAreaProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabledProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.IsRealtimeProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.IsRealtime"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.DraggableLinksProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggableLinks"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.FromPortIdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.FromPortId"/> dependency property.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DraggingTool.ToPortIdProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.ToPortId"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.CanStart">
            <summary>
            This tool can run if this diagram allows selection and moves/copies/dragging-out,
            if the mouse has moved far enough away to be a drag and not a click,
            and if <see cref="M:Northwoods.GoXam.Tool.DraggingTool.FindDraggablePart"/> has found a selectable part at the mouse-down point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.FindDraggablePart">
            <summary>
            Return the selectable and movable/copyable <see cref="T:Northwoods.GoXam.Part"/> at the mouse-down point.
            </summary>
            <returns>
            null if there is no selectable <see cref="T:Northwoods.GoXam.Part"/> at the point,
            or if <see cref="M:Northwoods.GoXam.Part.CanMove"/> and <see cref="M:Northwoods.GoXam.Part.CanCopy"/> are both false.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.StandardMouseSelect">
            <summary>
            Don't have the Control modifier unselect an already selected part.
            </summary>
            <remarks>
            This also remembers the selectable <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CurrentPart"/> at the
            current mouse point.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoActivate">
            <summary>
            Start the dragging operation.
            </summary>
            <remarks>
            Select the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CurrentPart"/>,
            set <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/> to be the result of <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>,
            start a model edit (<see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>),
            and either capture the mouse, or in WPF if <see cref="P:Northwoods.GoXam.Diagram.AllowDragOut"/> is true,
            start a drag-and-drop by calling <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOut"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})">
            <summary>
            Find the actual collection of nodes and links to be moved or copied,
            given an initial collection.
            </summary>
            <param name="parts"></param>
            <returns>
            a <c>Dictionary</c> of <see cref="T:Northwoods.GoXam.Part"/>s,
            mapped to <see cref="T:Northwoods.GoXam.Tool.DraggingTool.Info"/>s holding their original <see cref="P:Northwoods.GoXam.Node.Location"/>s
            </returns>
            <remarks>
            <para>
            Besides the <see cref="T:Northwoods.GoXam.Part"/>s in the <paramref name="parts"/> collection,
            the result collection will include all member nodes and links,
            links whose connected nodes are both in the effective collection,
            and any link labels.
            This means that sometimes some or many of the parts that are dragged
            are not actually selected.
            </para>
            <para>
            You may want to override this method to include additional parts
            that are related logically in some manner particular to your application.
            To handle the common case of wanting to move all of the tree-structure children
            of selected nodes, you can just set <see cref="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions"/> to
            <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoStop">
            <summary>
            Finish and clean-up after a dragging operation.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.GoXam.DiagramPanel.StopAutoScroll"/>,
            makes sure any <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverPart"/> is no longer dragged over,
            removes any copied parts that are no longer needed,
            releases the mouse if it was captured,
            and stops the transaction on the model.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoCancel">
            <summary>
            Abort any dragging operation.
            </summary>
            <remarks>
            Remove any copied parts,
            move dragged parts to their original locations,
            and stop this tool.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle switching between copying and moving modes as the Control key
            is pressed or released.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle switching between copying and moving modes as the Control key
            is pressed or released.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MoveParts(System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info},System.Windows.Point)">
            <summary>
            Move a collection of <see cref="T:Northwoods.GoXam.Part"/>s by a given offset.
            </summary>
            <param name="parts">
            a <c>Dictionary</c> of parts,
            mapped to <see cref="T:Northwoods.GoXam.Tool.DraggingTool.Info"/> values that include the nodes' original locations
            </param>
            <param name="offset">a <c>Point</c> value in model coordinates</param>
            <remarks>
            This respects the <see cref="M:Northwoods.GoXam.Part.CanMove"/> predicate for nodes
            when this is the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            This tries to avoid routing the links that are being moved.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderSnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})">
            <summary>
            This predicate is true if the given <paramref name="snapper"/> node can control the movement
            of the given <paramref name="moving"/> node.
            </summary>
            <param name="moving">the <see cref="T:Northwoods.GoXam.Node"/> being dragged</param>
            <param name="pt">a <c>Point</c> in model coordinates, typically the current mouse point</param>
            <param name="snapper">the <see cref="T:Northwoods.GoXam.Node"/> that might control the <paramref name="moving"/> node's movement</param>
            <param name="draggedparts">a <c>Dictionary</c> of <see cref="T:Northwoods.GoXam.Part"/>s being dragged</param>
            <returns>true if the <paramref name="snapper"/> is not in the <paramref name="draggedparts"/> and is <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/></returns>
            <remarks>
            This is called by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeMove(Northwoods.GoXam.Node,System.Windows.Point,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.SnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})">
            <summary>
            Compute the new location for a node, given another node that is controlling its movement.
            </summary>
            <param name="moving">the <see cref="T:Northwoods.GoXam.Node"/> being dragged</param>
            <param name="pt">the <c>Point</c> in model coordinates to which the node is being dragged</param>
            <param name="snapper">the <see cref="T:Northwoods.GoXam.Node"/>, typically a grid, which is controlling the drag snapping</param>
            <param name="draggedparts">a <c>Dictionary</c> of <see cref="T:Northwoods.GoXam.Part"/>s being dragged</param>
            <returns>a new node location, in model coordinates</returns>
            <remarks>
            <para>
            This is called by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeMove(Northwoods.GoXam.Node,System.Windows.Point,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/>.
            </para>
            <para>
            When there is a <paramref name="snapper"/>, 
            if the <paramref name="snapper"/>'s <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> property is false,
            this method just returns the unmodified <paramref name="pt"/> value.
            Otherwise this uses the <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSize"/> and
            <see cref="P:Northwoods.GoXam.Part.DragOverSnapCellSpot"/>
            to compute the nearest grid point that should be the location of the
            <paramref name="moving"/> node.
            </para>
            <para>
            If there is no <paramref name="snapper"/>, this uses the <see cref="T:Northwoods.GoXam.Diagram"/>'s
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSize"/>,
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapCellSpot"/>, and
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapOrigin"/>
            properties to calculate and return the nearest grid point.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.ComputeMove(Northwoods.GoXam.Node,System.Windows.Point,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})">
            <summary>
            This method computes the new location for a node, given a new desired location
            and a dictionary of dragged parts.
            </summary>
            <param name="n">the <see cref="T:Northwoods.GoXam.Node"/> being moved</param>
            <param name="newloc">the proposed new <see cref="P:Northwoods.GoXam.Node.Location"/> for the node <paramref name="n"/>, in model coordinates</param>
            <param name="draggedparts">a <c>Dictionary</c> of <see cref="T:Northwoods.GoXam.Part"/>s being dragged</param>
            <returns>a new location for the node, in model coordinates</returns>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/> includes nodes,
            this finds a <see cref="T:Northwoods.GoXam.Node"/> that acts as a drag-snapping controller, typically a grid-like node,
            at the <paramref name="newloc"/> point, using <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderSnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/> as the predicate to find
            a qualified drag-snapping node.
            If it finds such a drag-snapper node, it calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.SnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/> to get the adjusted new location.
            </para>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/> includes the diagram,
            and if the diagram's <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> property is true,
            this calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.SnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/> with a null value for the moving node,
            allowing that method to consider the "GridSnap..." properties of the <see cref="T:Northwoods.GoXam.Diagram"/>
            in computing the new location for the node <paramref name="n"/>.
            </para>
            <para>
            It then limits the new location using the <see cref="P:Northwoods.GoXam.Node.MinLocation"/> and <see cref="P:Northwoods.GoXam.Node.MaxLocation"/> properties.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderDragOver(System.Windows.Point,Northwoods.GoXam.Part)">
            <summary>
            Determine if the currently dragged selection (<see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>
            or <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts"/>) would be valid to be dropped onto the target part <paramref name="p"/>,
            depending on its <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/>.
            </summary>
            <param name="pt">normally the current mouse point, in model coordinates</param>
            <param name="p">the <see cref="T:Northwoods.GoXam.Part"/> under the mouse point that the selection might be dropped onto</param>
            <returns></returns>
            <remarks>
            This predicate is false if the target part <paramref name="p"/> is
            one of the parts in the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/> or <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts"/> collections.
            It is also false if the target part is an <see cref="T:Northwoods.GoXam.Adornment"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Affect some stationary unselected objects that are under a given point,
            and consider auto-scrolling.
            </summary>
            <param name="pt">normally the current mouse point, in model coordinates</param>
            <param name="moving"></param>
            <param name="copying"></param>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true, this looks for a <see cref="T:Northwoods.GoXam.Part"/>
            at the mouse point for which <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderDragOver(System.Windows.Point,Northwoods.GoXam.Part)"/> is true;
            if successful it sets <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverPart"/> to that part.
            </para>
            <para>
            This method also performs auto-scrolling, if <see cref="P:Northwoods.GoXam.Diagram.AllowScroll"/> is true.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.IsValidMember(Northwoods.GoXam.Group,Northwoods.GoXam.Node)">
            <summary>
            This predicate is called to determine whether a <see cref="T:Northwoods.GoXam.Node"/>
            may be added as a member of the <see cref="T:Northwoods.GoXam.Group"/> <paramref name="group"/>
            by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>.
            </summary>
            <param name="group">this may be null if the node is being added as a top-level node</param>
            <param name="node">a <see cref="T:Northwoods.GoXam.Node"/>, possibly another <see cref="T:Northwoods.GoXam.Group"/></param>
            <returns>the result of calling <see cref="M:Northwoods.GoXam.Model.IGroupsModel.IsMemberValid(System.Object,System.Object)"/></returns>
            <remarks>
            <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderDragOver(System.Windows.Point,Northwoods.GoXam.Part)"/> also calls this predicate,
            to determine if side-effects on stationary parts should occur.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.IsValidLink(Northwoods.GoXam.Node,Northwoods.GoXam.Node,Northwoods.GoXam.Link)">
            <summary>
            This predicate is called to determine whether a <see cref="T:Northwoods.GoXam.Node"/>
            may be reconnected by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>.
            </summary>
            <param name="fromnode"></param>
            <param name="tonode"></param>
            <param name="relink">the <see cref="T:Northwoods.GoXam.Link"/> to relink to connect the <paramref name="fromnode"/> and the <paramref name="tonode"/></param>
            <returns>
            the result of calling <see cref="M:Northwoods.GoXam.Model.IDiagramModel.IsLinkValid(System.Object,System.Object,System.Object,System.Object)"/> if <paramref name="relink"/> is null,
            or if <paramref name="relink"/> is supplied,
            the result of calling <see cref="M:Northwoods.GoXam.Model.ILinksModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object,System.Object)"/>,
            <see cref="M:Northwoods.GoXam.Model.IConnectedModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)"/>, or
            <see cref="M:Northwoods.GoXam.Model.ITreeModel.IsRelinkValid(System.Object,System.Object,System.Object,System.Object)"/>.
            </returns>
            <remarks>
            <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ConsiderDragOver(System.Windows.Point,Northwoods.GoXam.Part)"/> also calls this predicate,
            to determine if side-effects on stationary parts should occur.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)">
            <summary>
            Perform any additional side-effects after a drop.
            </summary>
            <param name="pt"></param>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true, and if the selection
            is dropped onto a <see cref="T:Northwoods.GoXam.Group"/> that has 
            <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> set to <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsToGroup"/>,
            this will support re"parent"ing of nodes and links by adding them to the group.
            This calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.IsValidMember(Northwoods.GoXam.Group,Northwoods.GoXam.Node)"/> to decide if the additional group membership is valid.
            If the selection is dropped onto the background,
            the selected nodes and links are removed from any groups of which they were a member
            and for which <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> is also set to
            <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsToGroup"/>, and they are made into top-level nodes and links.
            </para>
            <para>
            If the target <see cref="T:Northwoods.GoXam.Node"/> has a <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> set to
            <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkFromNode"/> or <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkToNode"/>,
            this will support automatically adding a link from or to the dropped-on node with each
            of the dropped nodes.
            This calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.IsValidLink(Northwoods.GoXam.Node,Northwoods.GoXam.Node,Northwoods.GoXam.Link)"/> to decide if the additional link relationship is valid.
            </para>
            <para>
            If the target <see cref="T:Northwoods.GoXam.Link"/> has a <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> set to
            <see cref="F:Northwoods.GoXam.DropOntoBehavior.SplicesIntoLink"/>,
            this will support automatically removing that link and adding two links,
            one to and one from each of the dropped nodes, connecting with the two nodes
            that the original link had been connected with.
            This calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.IsValidLink(Northwoods.GoXam.Node,Northwoods.GoXam.Node,Northwoods.GoXam.Link)"/> twice to decide if the additional link relationships are valid.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoMouseMove">
            <summary>
            As the user moves the mouse, move the collection of <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts"/>
            or <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>, depending on whether <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopy"/>
            or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMove"/> is true.
            </summary>
            <remarks>
            <para>
            When <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopy"/> is true but <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts"/> is still null,
            it will restore the original locations of the dragged parts and
            make a copy by calling <see cref="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)"/>.
            When <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopy"/> becomes false because the Control-key modifier no
            longer applies, this will remove the copied parts by calling
            <see cref="M:Northwoods.GoXam.PartManager.DeleteParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/> and move the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MakeDragImage(System.Windows.Rect)">
            <summary>
            Create a representation of the Parts that are being dragged when <see cref="P:Northwoods.GoXam.Tool.DraggingTool.IsRealtime"/> is false.
            </summary>
            <param name="bounds">The bounds occupied by the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>, in model coordinates</param>
            <returns>FrameworkElement</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoMouseUp">
            <summary>
            On a mouse-up finish moving or copying the effective selection.
            </summary>
            <remarks>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>,
            updates the diagram's bounds,
            raises a "selection copied" or "selection moved" event,
            and stops this tool.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayCopy">
            <summary>
            This predicate is true when the view allows objects to be copied and inserted,
            and some object in the diagram's selection is copyable, and the user is holding down the Control key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayMove">
            <summary>
            This predicate is true when the view allows objects to be moved,
            and some object in the Selection is movable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOut">
            <summary>
            Start a drag-and-drop operation.
            </summary>
            <remarks>
            <para>
            This calls <see cref="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)"/>
            to create an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> which is passed to <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragDrop(Northwoods.GoXam.Model.IDataCollection,System.Windows.DragDropEffects)"/>
            to actually start the drag-and-drop process.
            </para>
            <para>
            If the result of the call to <c>DoDragDrop</c> returns <c>DragDropEffects.None</c>,
            this just cancels the operation of this dragging tool.
            If the result is <c>DragDropEffects.Move</c> and the data was moved
            to a different diagram, this will delete the original <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>.
            Otherwise (if the result was a copy) this will move the dragged parts back
            to their original locations.
            Finally this stops this tool.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDragDrop(Northwoods.GoXam.Model.IDataCollection,System.Windows.DragDropEffects)">
            <summary>
            Call <c>DragDrop.DoDragDrop</c>.
            </summary>
            <param name="data">this represents the data to be dragged</param>
            <param name="eff">this is passed as the third argument to <c>DragDrop.DoDragDrop</c></param>
            <returns>the result of calling <c>DragDrop.DoDragDrop</c></returns>
            <remarks>
            This is in a separate method for easy overriding, so that you can
            substitute other serializable objects or <c>IDataObject</c>s to be
            dragged out to other controls.
            By default this creates a <c>DataObject</c> using the diagram's model's
            <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>,
            and passes it as the second argument to <c>DragDrop.DoDragDrop</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveInternal(System.Windows.DragEventArgs)">
            <summary>
            This predicate is true if the user may move the selection on an internal drag-and-drop.
            </summary>
            <param name="e"></param>
            <returns>
            False if the <c>AllowedEffects</c> does not allow move.
            False if Control key modifier applies (trying to require a copy).
            False if the diagram <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/> or
            does not <see cref="P:Northwoods.GoXam.Diagram.AllowMove"/>.
            False if the drag-and-drop came from another control.
            Otherwise true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyInternal(System.Windows.DragEventArgs)">
            <summary>
            This predicate is true if the user may copy the selection on an internal drag-and-drop.
            </summary>
            <param name="e"></param>
            <returns>
            False if the <c>AllowedEffects</c> does not allow copy.
            False if Shift key modifier applies (trying to require a move).
            False if the diagram <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/> or
            does not <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/>.
            False if the drag-and-drop came from another control.
            False if the model is not <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/>.
            Otherwise true.
            </returns>
            <remarks>
            Despite the list of conditions that cause this method to return false,
            if this <see cref="T:Northwoods.GoXam.Diagram"/> is a <see cref="T:Northwoods.GoXam.Palette"/>, this will return true
            as long as the <c>AllowedEffects</c> allows Copy and as long as the Shift key is not held down.
            If you also set <c>AllowDrop</c> to true on the Palette,
            it avoids showing a "drop-not-allowed" cursor within the Palette,
            even though a drop really isn't allowed into the Palette.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyExternal(System.Windows.DragEventArgs)">
            <summary>
            This predicate is true if the user may copy the selection on an external drag-and-drop.
            </summary>
            <param name="e"></param>
            <returns>
            False if the <c>AllowedEffects</c> does not allow copy.
            False if Shift key modifier applies (trying to require a move).
            False if the diagram <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/> or
            does not <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/>.
            False if the drag-and-drop started in this control.
            False if the model is not <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/>.
            False if there is no drag-and-drop data of the model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>.
            Otherwise true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveExternal(System.Windows.DragEventArgs)">
            <summary>
            This predicate is true if the user may move the selection on an external drag-and-drop.
            </summary>
            <param name="e"></param>
            <returns>
            False if the <c>AllowedEffects</c> does not allow move.
            False if Control key modifier applies (trying to require a copy).
            False if the diagram <see cref="P:Northwoods.GoXam.Diagram.IsReadOnly"/> or
            does not <see cref="P:Northwoods.GoXam.Diagram.AllowInsert"/>.
            False if the drag-and-drop started in this control.
            False if the model is not <see cref="P:Northwoods.GoXam.Model.IDiagramModel.Modifiable"/>.
            False if there is no drag-and-drop data of the model's <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/>.
            Otherwise true.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Update the <c>DragEventArgs.Effects</c>.
            </summary>
            <param name="e"></param>
            <remarks>
            If <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveInternal(System.Windows.DragEventArgs)"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveExternal(System.Windows.DragEventArgs)"/> is true,
            the effect is <c>Move</c>.
            If <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyInternal(System.Windows.DragEventArgs)"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyExternal(System.Windows.DragEventArgs)"/> is true,
            the effect is <c>Copy</c>.
            Otherwise the effect is <c>None</c>.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDragLeave(System.Windows.DragEventArgs)">
            <summary>
            If no drop is allowed, remove any temporary copied parts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.MayAcceptData(System.Windows.IDataObject)">
            <summary>
            Decide whether an <c>IDataObject</c> is suitable for copying into this diagram's model.
            </summary>
            <param name="dataobj">An <c>IDataObject</c>, typically the value of <c>DragEventArgs.Data</c></param>
            <returns>
            By default, this checks whether the dataobject has data in the model's
            <see cref="P:Northwoods.GoXam.Model.IDiagramModel.DataFormat"/> or in the model's
            <see cref="M:Northwoods.GoXam.Model.IDiagramModel.GetNodeType"/>.
            </returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.AcceptData(System.Windows.IDataObject)">
            <summary>
            Convert an <c>IDataObject</c> into an <see cref="T:Northwoods.GoXam.Model.IDataCollection"/>.
            </summary>
            <param name="dataobj">An <c>IDataObject</c>, typically the value of <c>DragEventArgs.Data</c></param>
            <returns>An <see cref="T:Northwoods.GoXam.Model.IDataCollection"/> that the diagram's model can copy</returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOver(System.Windows.DragEventArgs)">
            <summary>
            For copies or external moves, create and move copied parts for the drag-and-drop data.
            </summary>
            <param name="e"></param>
            <remarks>
            <para>
            For an internal move (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveInternal(System.Windows.DragEventArgs)"/>), just move the collection of <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>.
            For internal or external copies (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyInternal(System.Windows.DragEventArgs)"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyExternal(System.Windows.DragEventArgs)"/>),
            create copied parts or create parts from the external drag-and-drop data and move them appropriately.
            For an external move (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveExternal(System.Windows.DragEventArgs)"/>),
            create parts from the external drag-and-drop data and move them appropriately.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoDrop(System.Windows.DragEventArgs)">
            <summary>
            Perform the drop of a drag-and-drop.
            </summary>
            <param name="e"></param>
            <remarks>
            <para>
            For an internal move (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveInternal(System.Windows.DragEventArgs)"/>), just move the collection of <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/>.
            For internal or external copies (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyInternal(System.Windows.DragEventArgs)"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayCopyExternal(System.Windows.DragEventArgs)"/>),
            create copied parts or create parts from the external drag-and-drop data,
            move them to the final locations and select them.
            For an external move (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.MayMoveExternal(System.Windows.DragEventArgs)"/>),
            create parts from the external drag-and-drop data, move them appropriately, and select them.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>.
            </para>
            <para>
            This also raises the appropriate event ("ExternalObjectsDropped", "SelectionCopied" or "SelectionMoved")
            and stops this tool.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
            <summary>
            By default this does nothing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.GoXam.Tool.DraggingTool.DoQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
            <summary>
            If the user hits the ESCAPE key, call <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoCancel"/> to abort this tool.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.CopiesEffectiveCollection">
            <summary>
            Gets or sets whether for a copying operation the extended selection
            is copied or only selected parts.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            Basically this controls whether <see cref="M:Northwoods.GoXam.PartManager.CopyParts(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part},Northwoods.GoXam.Model.IDiagramModel)"/> is
            called with the <see cref="P:Northwoods.GoXam.Diagram.SelectedParts"/> or with the possibly
            augmented collection returned by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>.
            The latter collection typically will include all of the <see cref="T:Northwoods.GoXam.Link"/>s
            that connect selected nodes, even if they are not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.Inclusions">
            <summary>
            Gets or sets whether moving or copying a node also includes all of the
            node's children and their descendants, along with the links to those additional nodes.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.Standard"/>.
            </value>
            <remarks>
            <para>
            When set to <see cref="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree"/>,
            <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/> will augment the collection of
            selected nodes to include their tree children nodes.
            The resulting collection often will include many <see cref="T:Northwoods.GoXam.Node"/>s and
            <see cref="T:Northwoods.GoXam.Link"/>s that are not <see cref="P:Northwoods.GoXam.Part.IsSelected"/>.
            </para>
            <para>
            Links are assumed to go from the parent node to the children nodes,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is set to "Source".
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea">
            <summary>
            Gets or sets whether dragging any parts over the diagram or over any parts causes their position to be snapped to grid points.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.GoXam.Tool.DragOverSnapArea.Diagram"/>.
            </value>
            <remarks>
            This property is independent of <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled">
            <summary>
            Gets or sets whether stationary parts get their <see cref="P:Northwoods.GoXam.Part.IsDropOntoAccepted"/>
            property temporarily set to true during a drag.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            <para>
            Basically this controls whether <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>
            performs additional side effects upon a drop based on the value of <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/>,
            and whether <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)"/> maintains the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverPart"/> property and
            sets the <see cref="P:Northwoods.GoXam.Part.IsDropOntoAccepted"/> property to support drag-over highlighting.
            </para>
            <para>
            This property is independent of <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/>
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.IsRealtime">
            <summary>
            Gets or sets whether parts move continuously during a drag or if a simple
            object is dragged instead, with the parts actually moving only upon a mouse up.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            This affects the behavior of <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoMouseMove"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DraggableLinks">
            <summary>
            Gets or sets whether the user can drag a single <see cref="T:Northwoods.GoXam.Link"/>,
            disconnecting it from its connected nodes and possibly connecting it
            to valid ports when the link is dropped.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This affects the behavior of <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/> and <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.FromPortId">
            <summary>
            Gets or sets the port identifier used when <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>
            creates a new link due to <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> is
            <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkFromNode"/>, <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkToNode"/>,
            or <see cref="F:Northwoods.GoXam.DropOntoBehavior.SplicesIntoLink"/>.
            </summary>
            <value>
            By default the value is null. 
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.ToPortId">
            <summary>
            Gets or sets the port identifier used when <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>
            creates a new link due to <see cref="P:Northwoods.GoXam.Part.DropOntoBehavior"/> is
            <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkFromNode"/>, <see cref="F:Northwoods.GoXam.DropOntoBehavior.AddsLinkToNode"/>,
            or <see cref="F:Northwoods.GoXam.DropOntoBehavior.SplicesIntoLink"/>.
            </summary>
            <value>
            By default the value is null.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.CurrentPart">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Part"/> found at the mouse point by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.StandardMouseSelect"/>.
            </summary>
            <value>
            This property is set during <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoActivate"/> by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.StandardMouseSelect"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts">
            <summary>
            Gets or sets the collection of <see cref="T:Northwoods.GoXam.Part"/>s being dragged.
            </summary>
            <value>
            The value is a <c>Dictionary</c> mapping <see cref="T:Northwoods.GoXam.Part"/>s to <see cref="T:Northwoods.GoXam.Tool.DraggingTool.Info"/>s
            holding dragging information about each part.
            This property is set by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoActivate"/> with the result from calling <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DraggedLink">
            <summary>
            Gets or sets the <see cref="T:Northwoods.GoXam.Link"/> that may be dragged and reconnected
            when <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggableLinks"/> is true.
            </summary>
            <value>
            This property is set during <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoActivate"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DragOutStarted">
            <summary>
            Gets or sets whether a potentially external drag-and-drop has been started by this tool.
            </summary>
            <value>
            This property is set to true when starting a drag-and-drop in <c>DoDragOut</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.Dropped">
            <summary>
            Gets or sets whether a drop has occurred after a drag-out had started.
            </summary>
            <value>
            This property is set to false by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOut"/>, and is set to true upon a drop.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.StartPoint">
            <summary>
            Gets or sets the mouse point from which parts start to move.
            </summary>
            <value>
            The value is a <c>Point</c> in model coordinates.
            This property is normally set to the diagram's mouse-down point,
            but may be set to a different point if parts are being copied
            from a different control.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts">
            <summary>
            Gets or sets the collection of parts that this tool has copied.
            </summary>
            <value>
            The value is a <c>Dictionary</c> mapping <see cref="T:Northwoods.GoXam.Part"/>s to <see cref="T:Northwoods.GoXam.Tool.DraggingTool.Info"/>s
            holding dragging information about each part.
            This property is set when there is a control-drag from within the diagram
            (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoMouseMove"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoMouseUp"/>)
            or when there is an external drag into this diagram
            (<see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDragOver(System.Windows.DragEventArgs)"/> or <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DoDrop(System.Windows.DragEventArgs)"/>).
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.DragOverPart">
            <summary>
            Gets or sets a <see cref="T:Northwoods.GoXam.Part"/>, not being dragged, that the mouse is over,
            and sets its <see cref="P:Northwoods.GoXam.Part.IsDropOntoAccepted"/> property appropriately.
            </summary>
            <value>
            This property is both used and set by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DragOver(System.Windows.Point,System.Boolean,System.Boolean)"/> and <see cref="M:Northwoods.GoXam.Tool.DraggingTool.DropOnto(System.Windows.Point)"/>,
            as long as <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DropOntoEnabled"/> is true.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.Source">
            <summary>
            This is an experimental property that gets the <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/> that
            is the source of a simulated drag-and-drop in Silverlight or in WPF XBAP.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DraggingTool.Info">
            <summary>
            This simple class provides temporary information about each dragged or copied <see cref="T:Northwoods.GoXam.Part"/>,
            as values in the <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DraggedParts"/> and <see cref="P:Northwoods.GoXam.Tool.DraggingTool.CopiedParts"/> dictionaries.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.DraggingTool.Info.Point">
            <summary>
            Gets or sets the original <see cref="P:Northwoods.GoXam.Node.Location"/> of the <see cref="T:Northwoods.GoXam.Part"/>.
            </summary>
            <value>
            This property is used by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.MoveParts(System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info},System.Windows.Point)"/>.
            </value>
            <remarks>
            This tool needs to remember the original location of each dragged part so that
            independent movement of each node, particularly in the presence of drag snapping
            (for example, over grids), can occur while trying to maintain the same relative
            positioning of the parts.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Tool.DragOverSnapArea">
            <summary>
            This enumeration controls where the <see cref="T:Northwoods.GoXam.Tool.DraggingTool"/> might
            snap the selection location during dragging.
            </summary>
            <remarks>
            <para>
            Drag snapping may happen for the whole diagram and/or for individual nodes,
            or not at all.
            Snapping behavior for the whole diagram is governed by the various
            "GridSnap..." properties on <see cref="T:Northwoods.GoXam.Diagram"/>.
            Snapping behavior over a particular node is governed by the various
            "DragOverSnap..." properties on the node.
            </para>
            <para>
            Snap movement during a drag is implemented by <see cref="M:Northwoods.GoXam.Tool.DraggingTool.SnapTo(Northwoods.GoXam.Node,System.Windows.Point,Northwoods.GoXam.Node,System.Collections.Generic.Dictionary{Northwoods.GoXam.Part,Northwoods.GoXam.Tool.DraggingTool.Info})"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragOverSnapArea.None">
            <summary>
            Perform no location snapping during a drag.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragOverSnapArea.Diagram">
            <summary>
            Perform location snapping for the whole diagram.
            This is the default value for <see cref="P:Northwoods.GoXam.Tool.DraggingTool.DragOverSnapArea"/>.
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> must also be true.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragOverSnapArea.Nodes">
            <summary>
            Perform location snapping when the mouse is over a node
            that has <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> set to true.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.DragOverSnapArea.DiagramAndNodes">
            <summary>
            Perform location snapping when the mouse is over a node
            that has <see cref="P:Northwoods.GoXam.Part.DragOverSnapEnabled"/> set to true,
            or if the mouse is not over such a node, perform location
            snapping for the whole diagram, if
            <see cref="P:Northwoods.GoXam.Diagram.GridSnapEnabled"/> is also true.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.EffectiveCollectionInclusions">
            <summary>
            This enumeration controls the behavior of <see cref="M:Northwoods.GoXam.Tool.DraggingTool.ComputeEffectiveCollection(System.Collections.Generic.IEnumerable{Northwoods.GoXam.Part})"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.None">
            <summary>
            Don't add any parts but the selected ones.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.Standard">
            <summary>
            Just include the selected nodes, their members if they are groups, and the links connecting them.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.TreeChildren">
            <summary>
            Include tree-structure descendant nodes (children, grandchildren, etc.).
            This assumes that links go from the parent node to their children,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            in which case links are assumed to go from each child to its parent node.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.EffectiveCollectionInclusions.SubTree">
            <summary>
            Include all standard connected parts and also tree-structure descendant
            nodes (children, grandchildren, etc.) and the links connecting to them.
            This assumes that links go from the parent node to their children,
            unless <see cref="P:Northwoods.GoXam.Diagram.TreePath"/> is <see cref="F:Northwoods.GoXam.Layout.TreePath.Source"/>,
            in which case links are assumed to go from each child to its parent node.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.TextEditingTool">
            <summary>
            The <c>TextEditingTool</c> is used to let the user interactively edit text in place.
            </summary>
            <remarks>
            <para>
            Typically this is used by setting the <c>go:Part.TextEditable</c> attached property to true
            on a particular <c>TextBlock</c> in a node.
            When the node is selected and the user clicks on the <c>TextBlock</c>
            or invokes the <see cref="M:Northwoods.GoXam.CommandHandler.Edit"/> command,
            this tool is started and it uses an <see cref="T:Northwoods.GoXam.Tool.ITextEditor"/> to perform in-place text editing.
            This text editor control is held in an <see cref="T:Northwoods.GoXam.Adornment"/> so that it can be positioned
            in front of the <c>TextBlock</c>.
            (For more details see the description for <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/>.)
            </para>
            <para>
            The <c>TextBlock</c> is accessible as the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> property.
            The text editor is accessible as the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextEditor"/> property;
            the adornment holding the editor is accessible as the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment"/> property.
            From the text editor control one can access the <c>TextBlock</c> being edited via the
            <see cref="P:Northwoods.GoXam.Tool.ITextEditor.TextEditingTool"/> to get to this tool, from which one can use
            the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> property.
            </para>
            <para>
            You can disable mouse clicking from starting this text editing tool
            by setting <see cref="P:Northwoods.GoXam.Tool.DiagramTool.MouseEnabled"/> to false.
            You can disable the F2 key from starting this text editing tool
            by making sure <see cref="M:Northwoods.GoXam.Part.CanEdit"/> returns false,
            by either setting <see cref="P:Northwoods.GoXam.Diagram.AllowEdit"/> to false
            or by setting <see cref="P:Northwoods.GoXam.Part.Editable"/> to false.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingTool.StartingProperty">
            <summary>
            Identifies the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.Starting"/> dependency property.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.CanStart">
            <summary>
            The <see cref="T:Northwoods.GoXam.Tool.TextEditingTool"/> may run when there is a mouse-click on a <c>TextBlock</c>
            for which the <c>go:Part.TextEditable</c> attached property is true in a <see cref="T:Northwoods.GoXam.Part"/>
            that <see cref="P:Northwoods.GoXam.Part.IsSelected"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoStart">
            <summary>
            When starting this tool, call <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/> if there is a
            <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> supplied.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate">
            <summary>
            Start editing the text for a <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/>.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> is not already specified, this looks for one at the current
            mouse point.  If none is found, this method does nothing.
            </para>
            <para>
            This method then creates an <see cref="T:Northwoods.GoXam.Adornment"/> using the <see cref="M:Northwoods.GoXam.Part.GetTextEditAdornmentTemplate(System.Windows.DependencyObject)"/>,
            or a default data template that displays a <c>TextBox</c>.
            The adornment is remembered as the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment"/> property.
            </para>
            <para>
            Then this method finds an <see cref="T:Northwoods.GoXam.Tool.ITextEditor"/> to manage the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment"/>.
            If the root visual element of the adornment template implements <see cref="T:Northwoods.GoXam.Tool.ITextEditor"/>,
            it uses that.
            Otherwise it uses <see cref="M:Northwoods.GoXam.Part.GetTextEditor(System.Windows.DependencyObject)"/> on the <c>TextBlock</c>.
            Finally, by default it uses one that understands <c>TextBox</c>es, which matches the
            implementation of the default TextEditAdornmentTemplate.
            </para>
            <para>
            This also calls <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StartTransaction(System.String)"/>
            and sets <see cref="P:Northwoods.GoXam.Tool.DiagramTool.Active"/> to true.
            You should call <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.AcceptText(Northwoods.GoXam.Tool.TextEditingReason)"/> if you want to finish the edit
            by modifying the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> and committing the edit transaction.
            Or call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoCancel"/> if you want to abort the edit.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoDeactivate">
            <summary>
            This stops the current transaction and removes the editor adornment.
            </summary>
            <remarks>
            You should call <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.AcceptText(Northwoods.GoXam.Tool.TextEditingReason)"/> if you want to modify the
            <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> and commit the edit transaction.
            Or call <see cref="M:Northwoods.GoXam.Tool.DiagramTool.DoCancel"/> if you want to abort the edit.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoMouseUp">
            <summary>
            A click (mouse up) calls <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/> if this tool is not already active
            and if <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.CanStart"/> returns true.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoMouseDown">
            <summary>
            If the user clicks elsewhere in the diagram, call <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.AcceptText(Northwoods.GoXam.Tool.TextEditingReason)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.AcceptText(Northwoods.GoXam.Tool.TextEditingReason)">
            <summary>
            Finish editing by trying to accept the new text.
            </summary>
            <remarks>
            Basically this just calls <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoAcceptText"/>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.DoAcceptText">
            <summary>
            Modify the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/>'s <c>Text</c> property to
            the new text string value if it <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.IsValidText(System.String,System.String)"/>.
            </summary>
            <returns>
            True if it succeeds, false if <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.IsValidText(System.String,System.String)"/> was false.
            </returns>
            <remarks>
            If <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.IsValidText(System.String,System.String)"/> is true,
            this sets the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/>'s <c>Text</c> property,
            raises the <see cref="T:Northwoods.GoXam.Diagram"/>'s <c>TextEditedEvent</c>,
            gives focus to the diagram,
            sets the <see cref="P:Northwoods.GoXam.Tool.DiagramTool.TransactionResult"/>,
            and stops this tool.
            If <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.IsValidText(System.String,System.String)"/> is false,
            this method does nothing and editing continues.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.TextEditingTool.IsValidText(System.String,System.String)">
            <summary>
            Decide whether the proposed new text string is valid.
            </summary>
            <param name="oldstring"></param>
            <param name="newstring"></param>
            <returns>By default this returns true</returns>
            <remarks>
            You might want to override this method to provide custom validation.
            </remarks>
        </member>
        <member name="P:Northwoods.GoXam.Tool.TextEditingTool.Starting">
            <summary>
            Gets or sets how user gestures can start in-place editing of text.
            </summary>
            <value>
            The default is <see cref="F:Northwoods.GoXam.Tool.TextEditingStarting.SingleClickSelected"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock">
            <summary>
            Gets or sets the <c>TextBlock</c> that is being edited.
            </summary>
            <value>
            This property is initially null and is set in <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/>
            as the <c>TextBlock</c> at the mouse click point.
            However, if you set this property beforehand, <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/>
            will not set it, and this tool will edit the given <c>TextBlock</c>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.TextEditingTool.AdornedPart">
            <summary>
            Gets the current <see cref="T:Northwoods.GoXam.Part"/> that the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.TextBlock"/> is in.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment">
            <summary>
            Gets or sets the "editor" <see cref="T:Northwoods.GoXam.Adornment"/> that contains the control
            used to edit the text.
            </summary>
            <value>
            This is set by <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/>.
            </value>
        </member>
        <member name="P:Northwoods.GoXam.Tool.TextEditingTool.TextEditor">
            <summary>
            Gets or sets the "editing" code that manages the interactions of the <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment"/>.
            </summary>
            <value>
            This is set by <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.DoActivate"/>.
            </value>
        </member>
        <member name="T:Northwoods.GoXam.Tool.TextEditingReason">
            <summary>
            Enumerate reasons for calling <see cref="M:Northwoods.GoXam.Tool.TextEditingTool.AcceptText(Northwoods.GoXam.Tool.TextEditingReason)"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingReason.LostFocus">
            <summary>
            The text editing control has lost focus.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingReason.MouseDown">
            <summary>
            The user has clicked somewhere else in the diagram.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingReason.Tab">
            <summary>
            The user has typed TAB.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingReason.Enter">
            <summary>
            The user has typed ENTER.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ITextEditor">
            <summary>
            This interface manages the text editing interaction performed by the 
            <see cref="P:Northwoods.GoXam.Tool.ITextEditor.TextEditingTool"/>'s <see cref="P:Northwoods.GoXam.Tool.TextEditingTool.EditorAdornment"/>.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ITextEditor.Focus">
            <summary>
            Give focus to the editing control.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ITextEditor.IsValidText(System.String,System.String)">
            <summary>
            This predicate should be true if the <paramref name="newstring"/> is a valid value.
            </summary>
            <param name="oldstring"></param>
            <param name="newstring"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ITextEditor.TextEditingTool">
            <summary>
            Gets or sets the <see cref="P:Northwoods.GoXam.Tool.ITextEditor.TextEditingTool"/>.
            </summary>
            <remarks>
            You will want to have the setter perform the editing control's initialization
            when the new value is not null.
            </remarks>
        </member>
        <member name="E:Northwoods.GoXam.Tool.ITextEditor.GotFocus">
            <summary>
            An event indicating that the editing control has gotten focus.
            </summary>
        </member>
        <member name="P:Northwoods.GoXam.Tool.ITextEditor.Text">
            <summary>
            Gets or sets the current text value being edited.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.TextEditingStarting">
            <summary>
            This enum specifies the different ways users can start the <see cref="T:Northwoods.GoXam.Tool.TextEditingTool"/>.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingStarting.SingleClick">
            <summary>
            A single click on a <c>TextBlock</c> with <c>go:Part.TextEditable</c> attached property set to true
            will start in-place editing.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.TextEditingStarting.SingleClickSelected">
            <summary>
            A single click on a <c>TextBlock</c> with <c>go:Part.TextEditable</c> attached property set to true
            will start in-place editing, but only if the <see cref="T:Northwoods.GoXam.Part"/> that the <c>TextBlock</c> is in is already selected.
            </summary>
        </member>
        <member name="T:Northwoods.GoXam.Tool.ToolManager">
            <summary>
            This special <see cref="T:Northwoods.GoXam.Tool.IDiagramTool"/> is responsible for managing all of
            the <see cref="T:Northwoods.GoXam.Diagram"/>'s mode-less tools.
            </summary>
            <remarks>
            <para>
            Mode-less tools are tools that are present in one of the following lists:
            <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>,
            <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>, or
            <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/>.
            This <c>ToolManager</c> tool is normally the <see cref="P:Northwoods.GoXam.Diagram.DefaultTool"/>,
            so it is also often the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>.
            </para>
            <para>
            When this tool is running as the current tool, it handles mouse-down,
            mouse-move, and mouse-up events.  For each event it iterates over each of the tools
            in the corresponding list, calling its <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.CanStart"/> predicate.
            If that predicate returns true, it starts that tool by making it the diagram's current tool.
            It then activates the tool and passes on the event to the tool by calling the
            corresponding method (either <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseDown"/>,
            <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseMove"/>, or <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseUp"/>).
            </para>
            <para>
            Because this tool is typically the one running as the diagram's current tool
            when the user isn't "doing" anything, this tool can also handle other events,
            such as mouse wheel events.
            In Silverlight it handles key down events.
            (WPF handles the standard keyboard events for diagrams via command bindings.)
            </para>
            <para>
            This tool does not utilize any <see cref="T:Northwoods.GoXam.Adornment"/>s or tool handles.
            </para>
            <para>
            This tool does not edit the model.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoMouseDown">
            <summary>
            Iterate over the <see cref="P:Northwoods.GoXam.Diagram.MouseDownTools"/>
            and start the first one that <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.CanStart"/>.
            </summary>
            <remarks>
            <para>
            A mouse down first tries to give focus to the <see cref="T:Northwoods.GoXam.Diagram"/>.
            </para>
            <para>
            Starting a tool replaces the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>
            with the new tool.
            Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoActivate"/>
            and passes on the mouse-down event to it by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseDown"/>.
            </para>
            <para>
            Not finding any startable tools causes this tool manager to activate,
            thereby enabling the mouse-move and mouse-up behaviors.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoMouseMove">
            <summary>
            Iterate over the <see cref="P:Northwoods.GoXam.Diagram.MouseMoveTools"/>
            and start the first one that <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.CanStart"/>.
            </summary>
            <remarks>
            <para>
            Starting a tool replaces the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>
            with the new tool.
            Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoActivate"/>
            and passes on the mouse-move event to it by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseMove"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoMouseUp">
            <summary>
            Iterate over the <see cref="P:Northwoods.GoXam.Diagram.MouseUpTools"/>
            and start the first one that <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.CanStart"/>.
            </summary>
            <remarks>
            <para>
            Starting a tool replaces the <see cref="P:Northwoods.GoXam.Diagram.CurrentTool"/>
            with the new tool.
            Successfully doing so also activates the new tool by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoActivate"/>
            and passes on the mouse-up event to it by calling <see cref="M:Northwoods.GoXam.Tool.IDiagramTool.DoMouseUp"/>.
            </para>
            <para>
            If no startable tool is found it deactivates this tool manager,
            to get ready for a mouse-down and ignore mouse-move and mouse-up events.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoMouseWheel">
            <summary>
            This just calls <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseWheel"/>
            to get the standard scrolling and zooming behavior.
            </summary>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            This just calls <see cref="M:Northwoods.GoXam.CommandHandler.DoKeyDown(System.Windows.Input.KeyEventArgs)"/>
            on the diagram's <see cref="T:Northwoods.GoXam.CommandHandler"/>
            to handle standard keyboard command bindings in Silverlight.
            </summary>
            <param name="e"></param>
            <remarks>
            In WPF, <c>InputBindings</c> for <c>Commands</c> invoke the commands, not through this mechanism.
            </remarks>
        </member>
        <member name="M:Northwoods.GoXam.Tool.ToolManager.DoKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            This just calls <see cref="M:Northwoods.GoXam.CommandHandler.DoKeyUp(System.Windows.Input.KeyEventArgs)"/>
            on the diagram's <see cref="T:Northwoods.GoXam.CommandHandler"/>.
            </summary>
            <param name="e"></param>
            <remarks>
            In WPF, <c>InputBindings</c> for <c>Commands</c> invoke the commands, not through this mechanism.
            </remarks>
        </member>
        <member name="T:Northwoods.GoXam.Tool.WheelBehavior">
            <summary>
            This enumeration controls the behavior of the mouse wheel by <see cref="M:Northwoods.GoXam.Tool.DiagramTool.StandardMouseWheel"/>.
            </summary>
            <remarks>
            <para>
            These enumerated values can be combined as flags.
            However, when conflicting flags are combined, the behavior is undetermined.
            Flags conflict when they specify different behaviors for the same combination of modifiers:
            Control or Shift or Alt (or no modifiers at all).
            </para>
            <para>
            At the current time, the only conflicting flags are for unmodified mouse wheel events:
            <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ScrollsVertically"/> or <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.Zooms"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.None">
            <summary>
            When <see cref="P:Northwoods.GoXam.Tool.DiagramTool.WheelBehavior"/> is "None", mouse wheel events are ignored.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.ScrollsVertically">
            <summary>
            When there is no modifier, mouse wheel events scroll the diagram up and down.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.Zooms">
            <summary>
            When there is no modifier, mouse wheel events zoom in and out.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.ControlZooms">
            <summary>
            When there is only a Control key modifier, mouse wheel events zoom in and out.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.ShiftScrollsHorizontally">
            <summary>
            When there is only a Shift key modifier, mouse wheel events scroll the diagram left and right.
            </summary>
        </member>
        <member name="F:Northwoods.GoXam.Tool.WheelBehavior.Standard">
            <summary>
            This combination of flags represents the default value for <see cref="P:Northwoods.GoXam.Tool.DiagramTool.WheelBehavior"/>:
            <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ScrollsVertically"/>, <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ControlZooms"/>, and <see cref="F:Northwoods.GoXam.Tool.WheelBehavior.ShiftScrollsHorizontally"/>.
            </summary>
        </member>
    </members>
</doc>
